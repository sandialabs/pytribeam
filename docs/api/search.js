window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pytribeam", "modulename": "pytribeam", "kind": "module", "doc": "<p>Automated tools for serial sectioning in the SEM.</p>\n"}, {"fullname": "pytribeam.command_line", "modulename": "pytribeam.command_line", "kind": "module", "doc": "<h1 id=\"command-line-entry-points-module\">Command Line Entry Points Module</h1>\n\n<p>This module provides command line entry points for various functions and utilities.\nIt serves as the interface between the command line and the underlying functionality\nof the application.</p>\n"}, {"fullname": "pytribeam.command_line.CLI_DOCS", "modulename": "pytribeam.command_line", "qualname": "CLI_DOCS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[str]", "default_value": "&#x27;\\n--------\\npytribeam\\n--------\\n\\npytribeam\\n    (this command)\\n\\npytribeam_info\\n    Prints the module version and ThermoFisher Scientific Autoscript and Laser\\n    API version requirements.\\n\\npytribeam_gui\\n    Launches GUI for creating configuration .yml files and to control\\n    experimental collection.\\n\\npytribeam_exp &lt;path_to_file&gt;.yml\\n    Runs 3D data collection workflow based off of input .yml file.\\n\\n    Example:\\n        path/to/experiment/directory&gt; pytribeam_exp path/to/config/file.yml\\n\\n&#x27;"}, {"fullname": "pytribeam.command_line.pytribeam", "modulename": "pytribeam.command_line", "qualname": "pytribeam", "kind": "function", "doc": "<p>Prints the command line documentation to the command window.</p>\n\n<p>This function prints the contents of the global variable <code>CLI_DOCS</code> to the\ncommand window. It is assumed that <code>CLI_DOCS</code> contains the necessary\ndocumentation in string format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>None</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.command_line.module_info", "modulename": "pytribeam.command_line", "qualname": "module_info", "kind": "function", "doc": "<p>Prints the module version and the yml_schema_version.</p>\n\n<p>This function retrieves the version of the module and the YAML schema version\nfrom the <code>Constants</code> class in the <code>cs</code> module (constants.py). It prints these\nversions to the command window and returns the module version.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>None</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.command_line.launch_gui", "modulename": "pytribeam.command_line", "qualname": "launch_gui", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.command_line.run_experiment", "modulename": "pytribeam.command_line", "qualname": "run_experiment", "kind": "function", "doc": "<p>run experiment from command line</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.command_line.work_in_progress", "modulename": "pytribeam.command_line", "qualname": "work_in_progress", "kind": "function", "doc": "<p>Prints the 'Work in Progress (WIP)' warning message.</p>\n\n<p>This function prints a warning message indicating that the function is a\nwork in progress and has not yet been implemented.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>None</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.constants", "modulename": "pytribeam.constants", "kind": "module", "doc": "<h1 id=\"constants-module\">Constants Module</h1>\n\n<p>This module contains various constants and conversion factors used throughout the software. The constants are organized into two main classes: <code>Constants</code> and <code>Conversions</code>.</p>\n\n<h2 id=\"classes\">Classes</h2>\n\n<p>Constants : NamedTuple\n    A NamedTuple containing various constants related to software versions, log files, beam parameters, detector parameters, laser parameters, FIB parameters, stage parameters, mapping parameters, test suite parameters, and error message display parameters.</p>\n\n<p>Conversions : NamedTuple\n    A NamedTuple containing various conversion factors for length, time, voltage, current, and angle.</p>\n"}, {"fullname": "pytribeam.constants.Constants", "modulename": "pytribeam.constants", "qualname": "Constants", "kind": "class", "doc": "<p>A NamedTuple containing various constants used throughout the software.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>module_short_name : str\n    Short name of the module.\nautoscript_version : str\n    Version of the AutoScript software.\nlaser_api_version : str\n    Version of the Laser API.\nyml_schema_version : str\n    Maximum supported version of the YAML schema.</p>\n\n<p>logfile_extension : str\n    Extension for log files.\nsettings_dataset_name : str\n    Name of the dataset for experiment settings.\npre_position_dataset_name : str\n    Name of the dataset for position before an event.\npost_position_dataset_name : str\n    Name of the dataset for position after an event.\npre_lasing_dataset_name : str\n    Name of the dataset for laser power before an event.\npost_lasing_dataset_name : str\n    Name of the dataset for laser power after an event.\nspecimen_current_dataset_name : str\n    Name of the dataset for specimen current.\nsettings_dtype : np.dtype\n    Data type for settings dataset.\nposition_dtype : np.dtype\n    Data type for position dataset.\nlaser_power_dtype : np.dtype\n    Data type for laser power dataset.\nspecimen_current_dtype : np.dtype\n    Data type for specimen current dataset.</p>\n\n<p>beam_types : list of str\n    Types of beams (electron/ion).\nvoltage_tol_ratio : float\n    Tolerance ratio for voltage.\ncurrent_tol_ratio : float\n    Tolerance ratio for current.\nbeam_dwell_tol_ratio : float\n    Tolerance ratio for beam dwell time.\ndefault_color_depth : tbt.ColorDepth\n    Default color depth.\nscan_resolution_limit : tbt.Limit\n    Limit for scan resolution.</p>\n\n<p>contrast_brightness_tolerance : float\n    Tolerance for contrast and brightness.</p>\n\n<p>image_scan_rotation_for_laser_deg : float\n    Image scan rotation for laser in degrees.\nlaser_objective_limit_mm : tbt.Limit\n    Limit for laser objective in millimeters.\nlaser_objective_retracted_mm : float\n    Safe retracted position for laser objective in millimeters.\nlaser_objective_tolerance_mm : float\n    Tolerance for laser objective in millimeters.\nlaser_beam_shift_tolerance_um : float\n    Tolerance for laser beam shift in micrometers.\nlaser_energy_tol_uj : float\n    Tolerance for laser energy in microjoules.\nlaser_delay_s : float\n    Delay for measuring power and setting pulse divider/energy in seconds.</p>\n\n<p>default_fib_rectangle_pattern : tbt.FIBRectanglePattern\n    Default FIB rectangle pattern.\nstream_pattern_scale : int\n    Scale for stream pattern.\nstream_pattern_y_shift : int\n    Y-axis shift for stream pattern.\nstream_pattern_base_dwell_us : float\n    Base dwell time for stream pattern in microseconds.</p>\n\n<p>stage_move_delay_s : float\n    Delay for stage movement in seconds.\nstage_move_attempts : int\n    Number of attempts for stage movement.\ndefault_stage_tolerance : tbt.StageTolerance\n    Default stage tolerance.\nslice_thickness_limit_um : tbt.Limit\n    Limit for slice thickness in micrometers.\npre_tilt_limit_deg_generic : tbt.Limit\n    Generic limit for pre-tilt in degrees.\npre_tilt_limit_deg_non_Z_sectioning : tbt.Limit\n    Limit for pre-tilt in non-Z sectioning in degrees.\nhome_position : tbt.StagePositionUser\n    Home position of the stage.\nrotation_axis_limit_deg : tbt.Limit\n    Limit for rotation axis in degrees.\ndetector_collisions : list of list of tbt.DetectorType\n    List of detector collisions.</p>\n\n<p>min_map_time_s : int\n    Minimum mapping time in seconds.\nspecimen_current_hfw_mm : float\n    Specimen current high field width in millimeters.\nspecimen_current_delay_s : float\n    Delay for specimen current in seconds.</p>\n\n<p>test_hardware_movement : bool\n    Flag for testing hardware movement.\noffline_machines : list of str\n    List of offline machines.\nmicroscope_machines : list of str\n    List of microscope machines.</p>\n\n<p>default_column_count : int\n    Default number of columns for printing large lists of values.\ndefault_column_width : int\n    Default width of columns in characters.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.constants.Constants.__init__", "modulename": "pytribeam.constants", "qualname": "Constants.__init__", "kind": "function", "doc": "<p>Create new instance of Constants()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pytribeam.constants.Constants.module_short_name", "modulename": "pytribeam.constants", "qualname": "Constants.module_short_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pyTriBeam&#x27;"}, {"fullname": "pytribeam.constants.Constants.autoscript_version", "modulename": "pytribeam.constants", "qualname": "Constants.autoscript_version", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;4.8.1&#x27;"}, {"fullname": "pytribeam.constants.Constants.laser_api_version", "modulename": "pytribeam.constants", "qualname": "Constants.laser_api_version", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;2.2.1&#x27;"}, {"fullname": "pytribeam.constants.Constants.yml_schema_version", "modulename": "pytribeam.constants", "qualname": "Constants.yml_schema_version", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;1.0&#x27;"}, {"fullname": "pytribeam.constants.Constants.logfile_extension", "modulename": "pytribeam.constants", "qualname": "Constants.logfile_extension", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.h5&#x27;"}, {"fullname": "pytribeam.constants.Constants.settings_dataset_name", "modulename": "pytribeam.constants", "qualname": "Constants.settings_dataset_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Experiment Settings&#x27;"}, {"fullname": "pytribeam.constants.Constants.pre_position_dataset_name", "modulename": "pytribeam.constants", "qualname": "Constants.pre_position_dataset_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Position Before&#x27;"}, {"fullname": "pytribeam.constants.Constants.post_position_dataset_name", "modulename": "pytribeam.constants", "qualname": "Constants.post_position_dataset_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Position After&#x27;"}, {"fullname": "pytribeam.constants.Constants.pre_lasing_dataset_name", "modulename": "pytribeam.constants", "qualname": "Constants.pre_lasing_dataset_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Laser Power Before&#x27;"}, {"fullname": "pytribeam.constants.Constants.post_lasing_dataset_name", "modulename": "pytribeam.constants", "qualname": "Constants.post_lasing_dataset_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Laser Power After&#x27;"}, {"fullname": "pytribeam.constants.Constants.specimen_current_dataset_name", "modulename": "pytribeam.constants", "qualname": "Constants.specimen_current_dataset_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Specimen Current&#x27;"}, {"fullname": "pytribeam.constants.Constants.settings_dtype", "modulename": "pytribeam.constants", "qualname": "Constants.settings_dtype", "kind": "variable", "doc": "<p></p>\n", "default_value": "dtype([(&#x27;Slice&#x27;, &#x27;&lt;u4&#x27;), (&#x27;Step&#x27;, &#x27;&lt;u4&#x27;), (&#x27;Config File&#x27;, &#x27;O&#x27;), (&#x27;Timestamp&#x27;, &#x27;O&#x27;), (&#x27;UNIX time&#x27;, &#x27;&lt;u8&#x27;)])"}, {"fullname": "pytribeam.constants.Constants.position_dtype", "modulename": "pytribeam.constants", "qualname": "Constants.position_dtype", "kind": "variable", "doc": "<p></p>\n", "default_value": "dtype([(&#x27;Slice&#x27;, &#x27;&lt;u4&#x27;), (&#x27;X&#x27;, &#x27;&lt;f8&#x27;), (&#x27;Y&#x27;, &#x27;&lt;f8&#x27;), (&#x27;Z&#x27;, &#x27;&lt;f8&#x27;), (&#x27;T&#x27;, &#x27;&lt;f8&#x27;), (&#x27;R&#x27;, &#x27;&lt;f8&#x27;), (&#x27;Timestamp&#x27;, &#x27;O&#x27;), (&#x27;UNIX time&#x27;, &#x27;&lt;u8&#x27;)])"}, {"fullname": "pytribeam.constants.Constants.laser_power_dtype", "modulename": "pytribeam.constants", "qualname": "Constants.laser_power_dtype", "kind": "variable", "doc": "<p></p>\n", "default_value": "dtype([(&#x27;Slice&#x27;, &#x27;&lt;u4&#x27;), (&#x27;Power&#x27;, &#x27;&lt;f8&#x27;), (&#x27;Timestamp&#x27;, &#x27;O&#x27;), (&#x27;UNIX time&#x27;, &#x27;&lt;u8&#x27;)])"}, {"fullname": "pytribeam.constants.Constants.specimen_current_dtype", "modulename": "pytribeam.constants", "qualname": "Constants.specimen_current_dtype", "kind": "variable", "doc": "<p></p>\n", "default_value": "dtype([(&#x27;Slice&#x27;, &#x27;&lt;u4&#x27;), (&#x27;Current&#x27;, &#x27;&lt;f8&#x27;), (&#x27;Timestamp&#x27;, &#x27;O&#x27;), (&#x27;UNIX time&#x27;, &#x27;&lt;u8&#x27;)])"}, {"fullname": "pytribeam.constants.Constants.beam_types", "modulename": "pytribeam.constants", "qualname": "Constants.beam_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;electron&#x27;, &#x27;ion&#x27;]"}, {"fullname": "pytribeam.constants.Constants.voltage_tol_ratio", "modulename": "pytribeam.constants", "qualname": "Constants.voltage_tol_ratio", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.05"}, {"fullname": "pytribeam.constants.Constants.current_tol_ratio", "modulename": "pytribeam.constants", "qualname": "Constants.current_tol_ratio", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.05"}, {"fullname": "pytribeam.constants.Constants.beam_dwell_tol_ratio", "modulename": "pytribeam.constants", "qualname": "Constants.beam_dwell_tol_ratio", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "pytribeam.constants.Constants.default_color_depth", "modulename": "pytribeam.constants", "qualname": "Constants.default_color_depth", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ColorDepth.BITS_8: 8&gt;"}, {"fullname": "pytribeam.constants.Constants.scan_resolution_limit", "modulename": "pytribeam.constants", "qualname": "Constants.scan_resolution_limit", "kind": "variable", "doc": "<p></p>\n", "default_value": "Limit(min=12, max=65535)"}, {"fullname": "pytribeam.constants.Constants.contrast_brightness_tolerance", "modulename": "pytribeam.constants", "qualname": "Constants.contrast_brightness_tolerance", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.0001"}, {"fullname": "pytribeam.constants.Constants.image_scan_rotation_for_laser_deg", "modulename": "pytribeam.constants", "qualname": "Constants.image_scan_rotation_for_laser_deg", "kind": "variable", "doc": "<p></p>\n", "default_value": "180.0"}, {"fullname": "pytribeam.constants.Constants.laser_objective_limit_mm", "modulename": "pytribeam.constants", "qualname": "Constants.laser_objective_limit_mm", "kind": "variable", "doc": "<p></p>\n", "default_value": "Limit(min=2.0, max=29.0)"}, {"fullname": "pytribeam.constants.Constants.laser_objective_retracted_mm", "modulename": "pytribeam.constants", "qualname": "Constants.laser_objective_retracted_mm", "kind": "variable", "doc": "<p></p>\n", "default_value": "2.5"}, {"fullname": "pytribeam.constants.Constants.laser_objective_tolerance_mm", "modulename": "pytribeam.constants", "qualname": "Constants.laser_objective_tolerance_mm", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.005"}, {"fullname": "pytribeam.constants.Constants.laser_beam_shift_tolerance_um", "modulename": "pytribeam.constants", "qualname": "Constants.laser_beam_shift_tolerance_um", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.5"}, {"fullname": "pytribeam.constants.Constants.laser_energy_tol_uj", "modulename": "pytribeam.constants", "qualname": "Constants.laser_energy_tol_uj", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.05"}, {"fullname": "pytribeam.constants.Constants.laser_delay_s", "modulename": "pytribeam.constants", "qualname": "Constants.laser_delay_s", "kind": "variable", "doc": "<p></p>\n", "default_value": "3.0"}, {"fullname": "pytribeam.constants.Constants.default_fib_rectangle_pattern", "modulename": "pytribeam.constants", "qualname": "Constants.default_fib_rectangle_pattern", "kind": "variable", "doc": "<p></p>\n", "default_value": "FIBRectanglePattern(center_um=Point(x=0, y=0), width_um=10.0, height_um=5.0, depth_um=0.1, scan_direction=&lt;FIBPatternScanDirection.TOP_TO_BOTTOM: &#x27;TopToBottom&#x27;&gt;, scan_type=&lt;FIBPatternScanType.RASTER: &#x27;Raster&#x27;&gt;)"}, {"fullname": "pytribeam.constants.Constants.stream_pattern_scale", "modulename": "pytribeam.constants", "qualname": "Constants.stream_pattern_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "4096"}, {"fullname": "pytribeam.constants.Constants.stream_pattern_y_shift", "modulename": "pytribeam.constants", "qualname": "Constants.stream_pattern_y_shift", "kind": "variable", "doc": "<p></p>\n", "default_value": "10922"}, {"fullname": "pytribeam.constants.Constants.stream_pattern_base_dwell_us", "modulename": "pytribeam.constants", "qualname": "Constants.stream_pattern_base_dwell_us", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.025"}, {"fullname": "pytribeam.constants.Constants.stage_move_delay_s", "modulename": "pytribeam.constants", "qualname": "Constants.stage_move_delay_s", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.5"}, {"fullname": "pytribeam.constants.Constants.stage_move_attempts", "modulename": "pytribeam.constants", "qualname": "Constants.stage_move_attempts", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "pytribeam.constants.Constants.default_stage_tolerance", "modulename": "pytribeam.constants", "qualname": "Constants.default_stage_tolerance", "kind": "variable", "doc": "<p></p>\n", "default_value": "StageTolerance(translational_um=0.5, angular_deg=0.02)"}, {"fullname": "pytribeam.constants.Constants.slice_thickness_limit_um", "modulename": "pytribeam.constants", "qualname": "Constants.slice_thickness_limit_um", "kind": "variable", "doc": "<p></p>\n", "default_value": "Limit(min=0.0, max=30.0)"}, {"fullname": "pytribeam.constants.Constants.pre_tilt_limit_deg_generic", "modulename": "pytribeam.constants", "qualname": "Constants.pre_tilt_limit_deg_generic", "kind": "variable", "doc": "<p></p>\n", "default_value": "Limit(min=-60.0, max=60.0)"}, {"fullname": "pytribeam.constants.Constants.pre_tilt_limit_deg_non_Z_sectioning", "modulename": "pytribeam.constants", "qualname": "Constants.pre_tilt_limit_deg_non_Z_sectioning", "kind": "variable", "doc": "<p></p>\n", "default_value": "Limit(min=0.0, max=0.0)"}, {"fullname": "pytribeam.constants.Constants.home_position", "modulename": "pytribeam.constants", "qualname": "Constants.home_position", "kind": "variable", "doc": "<p></p>\n", "default_value": "StagePositionUser(x_mm=0.0, y_mm=0.0, z_mm=0.0, r_deg=0.0, t_deg=0.0, coordinate_system=&lt;StageCoordinateSystem.RAW: &#x27;Raw&#x27;&gt;)"}, {"fullname": "pytribeam.constants.Constants.rotation_axis_limit_deg", "modulename": "pytribeam.constants", "qualname": "Constants.rotation_axis_limit_deg", "kind": "variable", "doc": "<p></p>\n", "default_value": "Limit(min=-180.0, max=180.0)"}, {"fullname": "pytribeam.constants.Constants.detector_collisions", "modulename": "pytribeam.constants", "qualname": "Constants.detector_collisions", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[&lt;DetectorType.CBS: &#x27;CBS&#x27;&gt;, &lt;DetectorType.EDS: &#x27;EDS&#x27;&gt;], [&lt;DetectorType.CBS: &#x27;CBS&#x27;&gt;, &lt;DetectorType.EBSD: &#x27;EBSD&#x27;&gt;]]"}, {"fullname": "pytribeam.constants.Constants.min_map_time_s", "modulename": "pytribeam.constants", "qualname": "Constants.min_map_time_s", "kind": "variable", "doc": "<p></p>\n", "default_value": "30"}, {"fullname": "pytribeam.constants.Constants.specimen_current_hfw_mm", "modulename": "pytribeam.constants", "qualname": "Constants.specimen_current_hfw_mm", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "pytribeam.constants.Constants.specimen_current_delay_s", "modulename": "pytribeam.constants", "qualname": "Constants.specimen_current_delay_s", "kind": "variable", "doc": "<p></p>\n", "default_value": "2.0"}, {"fullname": "pytribeam.constants.Constants.test_hardware_movement", "modulename": "pytribeam.constants", "qualname": "Constants.test_hardware_movement", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pytribeam.constants.Constants.offline_machines", "modulename": "pytribeam.constants", "qualname": "Constants.offline_machines", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;S1099177&#x27;]"}, {"fullname": "pytribeam.constants.Constants.microscope_machines", "modulename": "pytribeam.constants", "qualname": "Constants.microscope_machines", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;HPN125v-MPC&#x27;, &#x27;HPN276-MPC&#x27;]"}, {"fullname": "pytribeam.constants.Constants.default_column_count", "modulename": "pytribeam.constants", "qualname": "Constants.default_column_count", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "pytribeam.constants.Constants.default_column_width", "modulename": "pytribeam.constants", "qualname": "Constants.default_column_width", "kind": "variable", "doc": "<p></p>\n", "default_value": "20"}, {"fullname": "pytribeam.constants.Conversions", "modulename": "pytribeam.constants", "qualname": "Conversions", "kind": "class", "doc": "<p>A NamedTuple containing various conversion constants for length, time, voltage, current, and angle.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>MM_TO_M : float\n    Conversion factor from millimeters to meters.\nUM_TO_M : float\n    Conversion factor from micrometers to meters.\nM_TO_MM : float\n    Conversion factor from meters to millimeters.\nM_TO_UM : float\n    Conversion factor from meters to micrometers.\nUM_TO_MM : float\n    Conversion factor from micrometers to millimeters.\nMM_TO_UM : float\n    Conversion factor from millimeters to micrometers.</p>\n\n<p>US_TO_S : float\n    Conversion factor from microseconds to seconds.\nS_TO_US : float\n    Conversion factor from seconds to microseconds.\nS_TO_NS : float\n    Conversion factor from seconds to nanoseconds.\nNS_TO_S : float\n    Conversion factor from nanoseconds to seconds.\nUS_TO_NS : float\n    Conversion factor from microseconds to nanoseconds.\nNS_TO_US : float\n    Conversion factor from nanoseconds to microseconds.</p>\n\n<p>KV_TO_V : float\n    Conversion factor from kilovolts to volts.\nV_TO_KV : float\n    Conversion factor from volts to kilovolts.</p>\n\n<p>UA_TO_A : float\n    Conversion factor from microamperes to amperes.\nNA_TO_A : float\n    Conversion factor from nanoamperes to amperes.\nPA_TO_A : float\n    Conversion factor from picoamperes to amperes.\nA_TO_UA : float\n    Conversion factor from amperes to microamperes.\nA_TO_NA : float\n    Conversion factor from amperes to nanoamperes.\nA_TO_PA : float\n    Conversion factor from amperes to picoamperes.\nPA_TO_NA : float\n    Conversion factor from picoamperes to nanoamperes.\nPA_TO_UA : float\n    Conversion factor from picoamperes to microamperes.\nNA_TO_UA : float\n    Conversion factor from nanoamperes to microamperes.\nNA_TO_PA : float\n    Conversion factor from nanoamperes to picoamperes.\nUA_TO_NA : float\n    Conversion factor from microamperes to nanoamperes.\nUA_TO_PA : float\n    Conversion factor from microamperes to picoamperes.</p>\n\n<p>DEG_TO_RAD : float\n    Conversion factor from degrees to radians.\nRAD_TO_DEG : float\n    Conversion factor from radians to degrees.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.constants.Conversions.__init__", "modulename": "pytribeam.constants", "qualname": "Conversions.__init__", "kind": "function", "doc": "<p>Create new instance of Conversions()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pytribeam.constants.Conversions.MM_TO_M", "modulename": "pytribeam.constants", "qualname": "Conversions.MM_TO_M", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "pytribeam.constants.Conversions.UM_TO_M", "modulename": "pytribeam.constants", "qualname": "Conversions.UM_TO_M", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-06"}, {"fullname": "pytribeam.constants.Conversions.M_TO_MM", "modulename": "pytribeam.constants", "qualname": "Conversions.M_TO_MM", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "pytribeam.constants.Conversions.M_TO_UM", "modulename": "pytribeam.constants", "qualname": "Conversions.M_TO_UM", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "pytribeam.constants.Conversions.UM_TO_MM", "modulename": "pytribeam.constants", "qualname": "Conversions.UM_TO_MM", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "pytribeam.constants.Conversions.MM_TO_UM", "modulename": "pytribeam.constants", "qualname": "Conversions.MM_TO_UM", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "pytribeam.constants.Conversions.US_TO_S", "modulename": "pytribeam.constants", "qualname": "Conversions.US_TO_S", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-06"}, {"fullname": "pytribeam.constants.Conversions.S_TO_US", "modulename": "pytribeam.constants", "qualname": "Conversions.S_TO_US", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "pytribeam.constants.Conversions.S_TO_NS", "modulename": "pytribeam.constants", "qualname": "Conversions.S_TO_NS", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000000.0"}, {"fullname": "pytribeam.constants.Conversions.NS_TO_S", "modulename": "pytribeam.constants", "qualname": "Conversions.NS_TO_S", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-09"}, {"fullname": "pytribeam.constants.Conversions.US_TO_NS", "modulename": "pytribeam.constants", "qualname": "Conversions.US_TO_NS", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "pytribeam.constants.Conversions.NS_TO_US", "modulename": "pytribeam.constants", "qualname": "Conversions.NS_TO_US", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "pytribeam.constants.Conversions.KV_TO_V", "modulename": "pytribeam.constants", "qualname": "Conversions.KV_TO_V", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "pytribeam.constants.Conversions.V_TO_KV", "modulename": "pytribeam.constants", "qualname": "Conversions.V_TO_KV", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.001"}, {"fullname": "pytribeam.constants.Conversions.UA_TO_A", "modulename": "pytribeam.constants", "qualname": "Conversions.UA_TO_A", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-06"}, {"fullname": "pytribeam.constants.Conversions.NA_TO_A", "modulename": "pytribeam.constants", "qualname": "Conversions.NA_TO_A", "kind": "variable", "doc": "<p></p>\n", "default_value": "9.999999999999999e-10"}, {"fullname": "pytribeam.constants.Conversions.PA_TO_A", "modulename": "pytribeam.constants", "qualname": "Conversions.PA_TO_A", "kind": "variable", "doc": "<p></p>\n", "default_value": "9.999999999999998e-13"}, {"fullname": "pytribeam.constants.Conversions.A_TO_UA", "modulename": "pytribeam.constants", "qualname": "Conversions.A_TO_UA", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "pytribeam.constants.Conversions.A_TO_NA", "modulename": "pytribeam.constants", "qualname": "Conversions.A_TO_NA", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000000.0000001"}, {"fullname": "pytribeam.constants.Conversions.A_TO_PA", "modulename": "pytribeam.constants", "qualname": "Conversions.A_TO_PA", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000000000.0002"}, {"fullname": "pytribeam.constants.Conversions.PA_TO_NA", "modulename": "pytribeam.constants", "qualname": "Conversions.PA_TO_NA", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.0009999999999999998"}, {"fullname": "pytribeam.constants.Conversions.PA_TO_UA", "modulename": "pytribeam.constants", "qualname": "Conversions.PA_TO_UA", "kind": "variable", "doc": "<p></p>\n", "default_value": "9.999999999999997e-07"}, {"fullname": "pytribeam.constants.Conversions.NA_TO_UA", "modulename": "pytribeam.constants", "qualname": "Conversions.NA_TO_UA", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.0009999999999999998"}, {"fullname": "pytribeam.constants.Conversions.NA_TO_PA", "modulename": "pytribeam.constants", "qualname": "Conversions.NA_TO_PA", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0000000000002"}, {"fullname": "pytribeam.constants.Conversions.UA_TO_NA", "modulename": "pytribeam.constants", "qualname": "Conversions.UA_TO_NA", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0000000000002"}, {"fullname": "pytribeam.constants.Conversions.UA_TO_PA", "modulename": "pytribeam.constants", "qualname": "Conversions.UA_TO_PA", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0000000002"}, {"fullname": "pytribeam.constants.Conversions.DEG_TO_RAD", "modulename": "pytribeam.constants", "qualname": "Conversions.DEG_TO_RAD", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.017453292519943295"}, {"fullname": "pytribeam.constants.Conversions.RAD_TO_DEG", "modulename": "pytribeam.constants", "qualname": "Conversions.RAD_TO_DEG", "kind": "variable", "doc": "<p></p>\n", "default_value": "57.29577951308232"}, {"fullname": "pytribeam.factory", "modulename": "pytribeam.factory", "kind": "module", "doc": "<h1 id=\"factory-module\">Factory Module</h1>\n\n<p>This module contains functions for creating and validating various settings and objects used in the microscope operations. The functions are organized to handle different step types, including EBSD, EDS, IMAGE, LASER, CUSTOM, and FIB.</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>active_fib_applications(microscope: tbt.Microscope) -> list\n    Retrieve a list of all active FIB (Focused Ion Beam) application files from the microscope.</p>\n\n<p>active_beam_with_settings(microscope: tbt.Microscope) -> tbt.Beam\n    Retrieve the current active beam and its settings from the microscope to create a beam object.</p>\n\n<p>active_detector_settings(microscope: tbt.Microscope) -> tbt.Detector\n    Retrieve the current active detector settings from the microscope to create a detector object.</p>\n\n<p>active_image_settings(microscope: tbt.Microscope) -> tbt.ImageSettings\n    Retrieve the current active image settings from the microscope to create an image settings object.</p>\n\n<p>active_imaging_device(microscope: tbt.Microscope) -> tbt.Beam\n    Determine the active imaging device and return the corresponding internal beam type object with null beam settings.</p>\n\n<p>active_scan_settings(microscope: tbt.Microscope) -> tbt.Scan\n    Retrieve the current active scan settings from the microscope to create a scan object.</p>\n\n<p>active_stage_position_settings(microscope: tbt.Microscope) -> tbt.StagePositionUser\n    Retrieve the current stage position in the raw coordinate system and user units [mm, deg].</p>\n\n<p>active_laser_state() -> tbt.LaserState\n    Retrieve the current state of the laser, including various properties that can be quickly read.</p>\n\n<p>active_laser_settings(microscope: tbt.Microscope) -> tbt.LaserSettings\n    Retrieve the current active laser settings from the microscope to create a laser settings object.</p>\n\n<p>available_detector_types(microscope: tbt.Microscope) -> List[str]\n    Retrieve the available detector types on the current microscope.</p>\n\n<p>available_detector_modes(microscope: tbt.Microscope) -> List[str]\n    Retrieve the available detector modes on the current microscope.</p>\n\n<p>beam_object_type(type: tbt.BeamType) -> tbt.Beam\n    Retrieve the beam object type based on the given beam type.</p>\n\n<p>stage_limits(microscope: tbt.Microscope) -> tbt.StageLimits\n    Retrieve the stage limits from the current microscope connection.</p>\n\n<p>beam_limits(selected_beam: property, beam_type: tbt.BeamType) -> tbt.BeamLimits\n    Retrieve the beam limits for the selected beam and beam type.</p>\n\n<p>general(general_db: dict, yml_format: tbt.YMLFormatVersion) -> tbt.GeneralSettings\n    Convert a general settings dictionary to a built-in type and perform schema checking.</p>\n\n<p>laser_box_pattern(settings: dict) -> tbt.LaserBoxPattern\n    Convert a dictionary of laser box pattern settings to a <code>LaserBoxPattern</code> object.</p>\n\n<p>laser_line_pattern(settings: dict) -> tbt.LaserLinePattern\n    Convert a dictionary of laser line pattern settings to a <code>LaserLinePattern</code> object.</p>\n\n<p>laser(microscope: tbt.Microscope, step_settings: dict, step_name: str, yml_format: tbt.YMLFormatVersion) -> tbt.LaserSettings\n    Convert a laser step from a .yml file to microscope settings for performing laser milling.</p>\n\n<p>image(microscope: tbt.Microscope, step_settings: dict, step_name: str, yml_format: tbt.YMLFormatVersion) -> tbt.ImageSettings\n    Convert an image step from a .yml file to microscope settings for capturing an image.</p>\n\n<p>fib(microscope: tbt.Microscope, step_settings: dict, step_name: str, yml_format: tbt.YMLFormatVersion) -> tbt.FIBSettings\n    Convert a FIB step from a .yml file to microscope settings for performing a FIB operation.</p>\n\n<p>enforce_beam_type(beam_type, step_settings: dict, step_name: str, yml_format: tbt.YMLFormatVersion) -> bool\n    Enforce a specific beam type is used for an operation based on a dictionary.</p>\n\n<p>ebsd(microscope: tbt.Microscope, step_settings: dict, step_name: str, yml_format: tbt.YMLFormatVersion) -> tbt.EBSDSettings\n    Convert an EBSD step from a .yml file to microscope settings for performing an EBSD operation.</p>\n\n<p>eds(microscope: tbt.Microscope, step_settings: dict, step_name: str, yml_format: tbt.YMLFormatVersion) -> tbt.EDSSettings\n    Convert an EDS step from a .yml file to microscope settings for performing an EDS operation.</p>\n\n<p>custom(microscope: tbt.Microscope, step_settings: dict, step_name: str, yml_format: tbt.YMLFormatVersion) -> tbt.CustomSettings\n    Convert a custom step from a .yml file to custom settings for the microscope.</p>\n\n<p>scan_limits(selected_beam: property) -> tbt.ScanLimits\n    Retrieve the scan settings limits for the selected beam.</p>\n\n<p>string_to_res(input: str) -> tbt.Resolution\n    Convert a string in the format \"{{width}}x{{height}}\" to a resolution object.</p>\n\n<p>valid_string_resolution(string_resolution: str) -> bool\n    Validate a string resolution.</p>\n\n<p>validate_auto_cb_settings(settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> bool\n    Perform schema checking for auto contrast/brightness setting dictionary.</p>\n\n<p>validate_stage_position(microscope: tbt.Microscope, step_name: str, settings: dict, yml_format: tbt.YMLFormatVersion) -> bool\n    Perform schema checking for stage position dictionary.</p>\n\n<p>validate_beam_settings(microscope: tbt.Microscope, beam_type: tbt.BeamType, settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> bool\n    Perform schema checking for beam setting dictionary.</p>\n\n<p>validate_detector_settings(microscope: tbt.Microscope, beam_type: tbt.BeamType, settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> bool\n    Perform schema checking for detector setting dictionary.</p>\n\n<p>validate_EBSD_EDS_settings(yml_format: tbt.YMLFormatVersion, connection_host: str, connection_port: str, ebsd_oem: str, eds_oem: str) -> bool\n    Check EBSD and EDS OEM and connection for supported OEMs.</p>\n\n<p>validate_general_settings(settings: dict, yml_format: tbt.YMLFormatVersion) -> bool\n    Perform schema checking for general setting dictionary.</p>\n\n<p>validate_scan_settings(microscope: tbt.Microscope, beam_type: tbt.BeamType, settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> bool\n    Perform schema checking for scan setting dictionary.</p>\n\n<p>stage_position_settings(microscope: tbt.Microscope, step_name: str, general_settings: tbt.GeneralSettings, step_stage_settings: dict, yml_format: tbt.YMLFormatVersion) -> tbt.StageSettings\n    Create a StagePositionUser object from settings, including validation.</p>\n\n<p>validate_pulse_settings(settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> bool\n    Perform schema checking for pulse setting dictionary.</p>\n\n<p>validate_laser_optics_settings(settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> bool\n    Perform schema checking for laser optics setting dictionary.</p>\n\n<p>validate_laser_box_settings(settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> bool\n    Perform schema checking for laser box pattern setting dictionary.</p>\n\n<p>validate_laser_line_settings(settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> bool\n    Perform schema checking for laser line pattern setting dictionary.</p>\n\n<p>validate_laser_mode_settings(settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> bool\n    Perform schema checking for laser mode setting dictionary.</p>\n\n<p>validate_laser_pattern_settings(settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> tbt.LaserPatternType\n    Perform schema checking for laser pattern setting dictionary.</p>\n\n<p>validate_fib_pattern_settings(microscope: tbt.Microscope, settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str) -> Union[tbt.FIBRectanglePattern, tbt.FIBRegularCrossSection, tbt.FIBCleaningCrossSection, tbt.FIBStreamPattern]\n    Perform schema checking for FIB pattern setting dictionary.</p>\n\n<p>validate_fib_box_settings(settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str, pattern_type: tbt.FIBPatternType) -> bool\n    Perform schema checking for FIB box pattern setting dictionary.</p>\n\n<p>validate_fib_selected_area_settings(settings: dict, yml_format: tbt.YMLFormatVersion, step_name: str, pattern_type: tbt.FIBPatternType) -> bool\n    Perform schema checking for FIB selected area pattern setting dictionary.</p>\n\n<p>step(microscope: tbt.Microscope, step_name: str, step_settings: dict, general_settings: tbt.GeneralSettings, yml_format: tbt.YMLFormatVersion) -> tbt.Step\n    Create a step object for different step types, including validation.</p>\n"}, {"fullname": "pytribeam.factory.active_fib_applications", "modulename": "pytribeam.factory", "qualname": "active_fib_applications", "kind": "function", "doc": "<p>Retrieve a list of all active FIB (Focused Ion Beam) patterning application files from the microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the application files.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list\n    A list of active FIB patterning application files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.active_beam_with_settings", "modulename": "pytribeam.factory", "qualname": "active_beam_with_settings", "kind": "function", "doc": "<p>Retrieve the current active beam and its settings from the microscope to create a beam object.</p>\n\n<p>This function grabs the current beam and its settings on the microscope to make a beam object. These settings fully depend on the currently active beam as determined by xTUI. Tolerance values for voltage and current are auto-populated as a ratio of current values predetermined in the <code>Constants</code> class.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the active beam and its settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.Beam\n    The active beam object with its settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.active_detector_settings", "modulename": "pytribeam.factory", "qualname": "active_detector_settings", "kind": "function", "doc": "<p>Retrieve the current active detector settings from the microscope to create a detector object.</p>\n\n<p>This function grabs the current detector settings on the microscope to make a detector object. These settings fully depend on the currently active detector as determined by xTUI.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the active detector settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.Detector\n    The active detector object with its settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Detector</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.active_image_settings", "modulename": "pytribeam.factory", "qualname": "active_image_settings", "kind": "function", "doc": "<p>Retrieve the current active image settings from the microscope to create an image settings object.</p>\n\n<p>This function grabs the current beam, detector, and scan settings on the microscope to make an image settings object. The bit depth is set to the default color depth defined in the <code>Constants</code> class.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the active image settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.ImageSettings\n    The active image settings object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.active_imaging_device", "modulename": "pytribeam.factory", "qualname": "active_imaging_device", "kind": "function", "doc": "<p>Determine the active imaging device and return the corresponding internal beam type object with null beam settings.</p>\n\n<p>This function identifies the currently active imaging device on the microscope and returns the appropriate beam type object (electron or ion) with null beam settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to determine the active imaging device.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.Beam\n    The active beam object with null beam settings.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the currently selected device is neither an electron beam nor an ion beam.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.active_scan_settings", "modulename": "pytribeam.factory", "qualname": "active_scan_settings", "kind": "function", "doc": "<p>Retrieve the current active scan settings from the microscope to create a scan object.</p>\n\n<p>This function grabs the current scan settings on the microscope to make a scan object. These settings fully depend on the currently active scan settings as determined by xTUI.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the active scan settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.Scan\n    The active scan object with its settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Scan</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.active_stage_position_settings", "modulename": "pytribeam.factory", "qualname": "active_stage_position_settings", "kind": "function", "doc": "<p>Retrieve the current stage position in the raw coordinate system and user units [mm, deg].</p>\n\n<p>This function sets the stage coordinate system to RAW, retrieves the current stage position in encoder units (meters and radians), converts it to user units (millimeters and degrees), and ensures the r-axis is within the axis limit.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the current stage position.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.StagePositionUser\n    The current stage position in user units [mm, deg].</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.active_laser_state", "modulename": "pytribeam.factory", "qualname": "active_laser_state", "kind": "function", "doc": "<p>Retrieve the current state of the laser, including various properties that can be quickly read.</p>\n\n<p>This function returns a dictionary object for all properties that can be quickly read from the laser (not exhaustive). Power can be read but has its own method and is more involved. Flipper configuration can only be set, not read.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.LaserState\n    The current state of the laser, including wavelength, frequency, pulse divider, pulse energy, objective position, beam shift, pattern, and expected pattern duration.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If an unsupported LaserPatternType is encountered.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserState</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.active_laser_settings", "modulename": "pytribeam.factory", "qualname": "active_laser_settings", "kind": "function", "doc": "<p>Retrieve the current active laser settings from the microscope to create a laser settings object.</p>\n\n<p>This function grabs the current laser state and uses it to create a laser settings object. Some values cannot be read by Laser Control and can only be set. For example, polarization will default to \"Vertical\" as this value cannot be read.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the active laser settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.LaserSettings\n    The active laser settings object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.available_detector_types", "modulename": "pytribeam.factory", "qualname": "available_detector_types", "kind": "function", "doc": "<p>Retrieve the available detector types on the current microscope.</p>\n\n<p>This function returns a list of available detector types on the current microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the available detector types.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>List[str]\n    A list of available detector types.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.available_detector_modes", "modulename": "pytribeam.factory", "qualname": "available_detector_modes", "kind": "function", "doc": "<p>Retrieve the available detector modes on the current microscope.</p>\n\n<p>This function returns a list of available detector modes on the current microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the available detector modes.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>List[str]\n    A list of available detector modes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.beam_object_type", "modulename": "pytribeam.factory", "qualname": "beam_object_type", "kind": "function", "doc": "<p>Retrieve the beam object type based on the given beam type.</p>\n\n<p>This function returns the appropriate beam object type (electron or ion) based on the provided beam type.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>type : tbt.BeamType\n    The type of the beam (electron or ion).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.Beam\n    The corresponding beam object type.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the provided beam type is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.stage_limits", "modulename": "pytribeam.factory", "qualname": "stage_limits", "kind": "function", "doc": "<p>Retrieve the stage limits from the current microscope connection.</p>\n\n<p>This function retrieves the stage limits for the X, Y, Z, R, and T axes from the current microscope connection and returns them as a <code>StageLimits</code> object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the stage limits.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.StageLimits\n    The stage limits for the X, Y, Z, R, and T axes in user units (mm and degrees).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageLimits</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.beam_limits", "modulename": "pytribeam.factory", "qualname": "beam_limits", "kind": "function", "doc": "<p>Retrieve the beam limits for the selected beam and beam type.</p>\n\n<p>This function retrieves the limits for voltage, current, horizontal field width (HFW), and working distance for the selected beam and beam type, and returns them as a <code>BeamLimits</code> object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>selected_beam : property\n    The selected beam property from which to retrieve the limits.\nbeam_type : tbt.BeamType\n    The type of the beam (electron or ion).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.BeamLimits\n    The beam limits for voltage, current, HFW, and working distance in user units (kV, nA, mm).</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the beam type is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">selected_beam</span><span class=\"p\">:</span> <span class=\"nb\">property</span>,</span><span class=\"param\">\t<span class=\"n\">beam_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamLimits</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.general", "modulename": "pytribeam.factory", "qualname": "general", "kind": "function", "doc": "<p>Convert a general settings dictionary to a built-in type and perform schema checking.</p>\n\n<p>This function converts a general settings dictionary from a .yml file to a <code>GeneralSettings</code> object. It performs schema checking to ensure valid inputs are requested.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>general_db : dict\n    The general settings dictionary from the .yml file.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.GeneralSettings\n    The general settings object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the provided yml format is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">general_db</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneralSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.laser_box_pattern", "modulename": "pytribeam.factory", "qualname": "laser_box_pattern", "kind": "function", "doc": "<p>Convert a dictionary of laser box pattern settings to a <code>LaserBoxPattern</code> object.</p>\n\n<p>This function takes a dictionary of laser box pattern settings and converts it to a <code>LaserBoxPattern</code> object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing laser box pattern settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.LaserBoxPattern\n    The laser box pattern object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserBoxPattern</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.laser_line_pattern", "modulename": "pytribeam.factory", "qualname": "laser_line_pattern", "kind": "function", "doc": "<p>Convert a dictionary of laser line pattern settings to a <code>LaserLinePattern</code> object.</p>\n\n<p>This function takes a dictionary of laser line pattern settings and converts it to a <code>LaserLinePattern</code> object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing laser line pattern settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.LaserLinePattern\n    The laser line pattern object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserBoxPattern</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.laser", "modulename": "pytribeam.factory", "qualname": "laser", "kind": "function", "doc": "<p>Convert a laser step from a .yml file to microscope settings for performing laser milling.</p>\n\n<p>This function converts a laser step from a .yml file to <code>LaserSettings</code> for the microscope. It performs schema checking to ensure valid inputs are requested.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to set the laser settings.\nstep_settings : dict\n    The dictionary containing the laser step settings from the .yml file.\nstep_name : str\n    The name of the step in the .yml file.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.LaserSettings\n    The laser settings object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If required settings are missing from the .yml file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">step_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.image", "modulename": "pytribeam.factory", "qualname": "image", "kind": "function", "doc": "<p>Convert an image step from a .yml file to microscope settings for capturing an image.</p>\n\n<p>This function converts an image step from a .yml file to <code>ImageSettings</code> for the microscope. It performs schema checking to ensure valid inputs are requested.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to set the image settings.\nstep_settings : dict\n    The dictionary containing the image step settings from the .yml file.\nstep_name : str\n    The name of the step in the .yml file.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.ImageSettings\n    The image settings object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If required settings are missing from the .yml file.\nNotImplementedError\n    If the provided beam type is unsupported.\nValueError\n    If invalid scan rotation is requested with dynamic focus or tilt correction, or if the bit depth is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">step_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.fib", "modulename": "pytribeam.factory", "qualname": "fib", "kind": "function", "doc": "<p>Convert a FIB step from a .yml file to microscope settings for performing a FIB operation.</p>\n\n<p>This function converts a FIB step from a .yml file to <code>FIBSettings</code> for the microscope. It performs schema checking to ensure valid inputs are requested.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to set the FIB settings.\nstep_settings : dict\n    The dictionary containing the FIB step settings from the .yml file.\nstep_name : str\n    The name of the step in the .yml file.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.FIBSettings\n    The FIB settings object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If required settings are missing from the .yml file.\nValueError\n    If invalid beam type is requested.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">step_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.enforce_beam_type", "modulename": "pytribeam.factory", "qualname": "enforce_beam_type", "kind": "function", "doc": "<p>Enforce a specific beam type is used for an operation based on a dictionary.</p>\n\n<p>This function ensures that the specified beam type is used for an operation based on the provided settings dictionary. The dictionary must contain a sub-dictionary with the key 'beam'.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam_type : Any\n    The beam type to enforce.\nstep_settings : dict\n    The dictionary containing the step settings.\nstep_name : str\n    The name of the step in the .yml file.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the beam type is enforced successfully.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If no handler is available for the provided type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam_type</span>,</span><span class=\"param\">\t<span class=\"n\">step_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.ebsd", "modulename": "pytribeam.factory", "qualname": "ebsd", "kind": "function", "doc": "<p>Convert an EBSD step from a .yml file to microscope settings for performing an EBSD operation.</p>\n\n<p>This function converts an EBSD step from a .yml file to <code>EBSDSettings</code> for the microscope. It performs schema checking to ensure valid inputs are requested.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to set the EBSD settings.\nstep_settings : dict\n    The dictionary containing the EBSD step settings from the .yml file.\nstep_name : str\n    The name of the step in the .yml file.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.EBSDSettings\n    The EBSD settings object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If required settings are missing from the .yml file or if the 'concurrent_EDS' key is invalid.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">step_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">EBSDSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.eds", "modulename": "pytribeam.factory", "qualname": "eds", "kind": "function", "doc": "<p>Convert an EDS step from a .yml file to microscope settings for performing an EDS operation.</p>\n\n<p>This function converts an EDS step from a .yml file to <code>EDSSettings</code> for the microscope. It performs schema checking to ensure valid inputs are requested.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to set the EDS settings.\nstep_settings : dict\n    The dictionary containing the EDS step settings from the .yml file.\nstep_name : str\n    The name of the step in the .yml file.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.EDSSettings\n    The EDS settings object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">step_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">EDSSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.custom", "modulename": "pytribeam.factory", "qualname": "custom", "kind": "function", "doc": "<p>Convert a custom step from a .yml file to custom settings for the microscope.</p>\n\n<p>This function converts a custom step from a .yml file to <code>CustomSettings</code> for the microscope. It performs schema checking to ensure valid inputs are requested.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to set the custom settings.\nstep_settings : dict\n    The dictionary containing the custom step settings from the .yml file.\nstep_name : str\n    The name of the step in the .yml file.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.CustomSettings\n    The custom settings object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If required settings are missing from the .yml file.\nValueError\n    If the specified script or executable path does not exist.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">step_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">CustomSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.scan_limits", "modulename": "pytribeam.factory", "qualname": "scan_limits", "kind": "function", "doc": "<p>Retrieve the scan settings limits for the selected beam.</p>\n\n<p>This function retrieves the limits for rotation and dwell time for the selected beam and returns them as a <code>ScanLimits</code> object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>selected_beam : property\n    The selected beam property from which to retrieve the scan limits.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.ScanLimits\n    The scan limits for rotation (degrees) and dwell time (microseconds).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selected_beam</span><span class=\"p\">:</span> <span class=\"nb\">property</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ScanLimits</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.string_to_res", "modulename": "pytribeam.factory", "qualname": "string_to_res", "kind": "function", "doc": "<p>Convert a string in the format \"{{width}}x{{height}}\" to a resolution object.</p>\n\n<p>This function takes a string representing the resolution in the format \"WIDTHxHEIGHT\" and converts it to a <code>Resolution</code> object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>input : str\n    The string representing the resolution in the format \"WIDTHxHEIGHT\".</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.Resolution\n    The resolution object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the input string is not in the expected format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Resolution</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.valid_string_resolution", "modulename": "pytribeam.factory", "qualname": "valid_string_resolution", "kind": "function", "doc": "<p>Validate a string resolution.</p>\n\n<p>This function validates a string resolution by converting it to a <code>Resolution</code> object and checking if the width and height are within the specified limits.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>string_resolution : str\n    The string representing the resolution in the format \"WIDTHxHEIGHT\".</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the resolution is valid, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string_resolution</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_auto_cb_settings", "modulename": "pytribeam.factory", "qualname": "validate_auto_cb_settings", "kind": "function", "doc": "<p>Perform schema checking for auto contrast/brightness setting dictionary.</p>\n\n<p>This function validates the auto contrast/brightness settings dictionary based on the specified yml format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the auto contrast/brightness settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If required keys are missing from the settings dictionary.\nValueError\n    If the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_stage_position", "modulename": "pytribeam.factory", "qualname": "validate_stage_position", "kind": "function", "doc": "<p>Perform schema checking for stage position dictionary.</p>\n\n<p>This function validates the stage position settings dictionary based on the specified yml format and the stage limits of the microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to validate the stage position settings.\nstep_name : str\n    The name of the step in the .yml file.\nsettings : dict\n    The dictionary containing the stage position settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the yml version is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_beam_settings", "modulename": "pytribeam.factory", "qualname": "validate_beam_settings", "kind": "function", "doc": "<p>Perform schema checking for beam setting dictionary.</p>\n\n<p>This function validates the beam settings dictionary based on the specified yml format and the beam limits of the microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to validate the beam settings.\nbeam_type : tbt.BeamType\n    The type of the beam (electron or ion).\nsettings : dict\n    The dictionary containing the beam settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the yml version is unsupported or if the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">beam_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamType</span>,</span><span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_detector_settings", "modulename": "pytribeam.factory", "qualname": "validate_detector_settings", "kind": "function", "doc": "<p>Perform schema checking for detector setting dictionary.</p>\n\n<p>This function validates the detector settings dictionary based on the specified yml format and the detector capabilities of the microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to validate the detector settings.\nbeam_type : tbt.BeamType\n    The type of the beam (electron or ion).\nsettings : dict\n    The dictionary containing the detector settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If auto contrast/brightness settings conflict with fixed brightness/contrast values.\nValueError\n    If the yml version is unsupported, or if the settings do not satisfy the specified schema, or if the detector type or mode is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">beam_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamType</span>,</span><span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_EBSD_EDS_settings", "modulename": "pytribeam.factory", "qualname": "validate_EBSD_EDS_settings", "kind": "function", "doc": "<p>Check EBSD and EDS OEM and connection for supported OEMs.</p>\n\n<p>This function ensures that the specified EBSD and EDS OEMs are supported and that the connection settings are valid.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>yml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nconnection_host : str\n    The host for the microscope connection.\nconnection_port : str\n    The port for the microscope connection.\nebsd_oem : str\n    The OEM for the EBSD device.\neds_oem : str\n    The OEM for the EDS device.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If differing EBSD and EDS OEMs are requested.\nValueError\n    If the EBSD or EDS OEM is unsupported.\nSystemError\n    If the Laser API is not accessible.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">connection_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">connection_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ebsd_oem</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">eds_oem</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_general_settings", "modulename": "pytribeam.factory", "qualname": "validate_general_settings", "kind": "function", "doc": "<p>Perform schema checking for general setting dictionary.</p>\n\n<p>This function validates the general settings dictionary based on the specified yml format. It checks the microscope connection and EBSD/EDS connection if valid OEMs are specified.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the general settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the general settings dictionary is empty, or if the settings do not satisfy the specified schema, or if the connection is invalid.\nNotImplementedError\n    If the sectioning axis is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_scan_settings", "modulename": "pytribeam.factory", "qualname": "validate_scan_settings", "kind": "function", "doc": "<p>Perform schema checking for scan setting dictionary.</p>\n\n<p>This function validates the scan settings dictionary based on the specified yml format and the scan limits of the microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to validate the scan settings.\nbeam_type : tbt.BeamType\n    The type of the beam (electron or ion).\nsettings : dict\n    The dictionary containing the scan settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the yml version is unsupported or if the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">beam_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamType</span>,</span><span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.stage_position_settings", "modulename": "pytribeam.factory", "qualname": "stage_position_settings", "kind": "function", "doc": "<p>Create a StagePositionUser object from settings, including validation.</p>\n\n<p>This function creates a <code>StagePositionUser</code> object from the provided settings and performs validation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to set the stage position.\nstep_name : str\n    The name of the step in the .yml file.\ngeneral_settings : tbt.GeneralSettings\n    The general settings object.\nstep_stage_settings : dict\n    The dictionary containing the stage position settings for the step.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.StageSettings\n    The stage settings object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the rotation side value is unsupported.\nValueError\n    If the stage position settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">general_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneralSettings</span>,</span><span class=\"param\">\t<span class=\"n\">step_stage_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_pulse_settings", "modulename": "pytribeam.factory", "qualname": "validate_pulse_settings", "kind": "function", "doc": "<p>Perform schema checking for pulse setting dictionary.</p>\n\n<p>This function validates the pulse settings dictionary based on the specified yml format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the pulse settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the wavelength or polarization value is unsupported.\nValueError\n    If the yml version is unsupported or if the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_laser_optics_settings", "modulename": "pytribeam.factory", "qualname": "validate_laser_optics_settings", "kind": "function", "doc": "<p>Perform schema checking for laser optics setting dictionary.</p>\n\n<p>This function validates the laser optics settings dictionary based on the specified yml format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the laser optics settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the yml version is unsupported or if the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_laser_box_settings", "modulename": "pytribeam.factory", "qualname": "validate_laser_box_settings", "kind": "function", "doc": "<p>Perform schema checking for laser box pattern setting dictionary.</p>\n\n<p>This function validates the laser box pattern settings dictionary based on the specified yml format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the laser box pattern settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the scan type or coordinate reference value is unsupported.\nValueError\n    If the yml version is unsupported or if the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_laser_line_settings", "modulename": "pytribeam.factory", "qualname": "validate_laser_line_settings", "kind": "function", "doc": "<p>Perform schema checking for laser line pattern setting dictionary.</p>\n\n<p>This function validates the laser line pattern settings dictionary based on the specified yml format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the laser line pattern settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the scan type value is unsupported.\nValueError\n    If the yml version is unsupported or if the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_laser_mode_settings", "modulename": "pytribeam.factory", "qualname": "validate_laser_mode_settings", "kind": "function", "doc": "<p>Perform schema checking for laser mode setting dictionary.</p>\n\n<p>This function validates the laser mode settings dictionary based on the specified yml format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the laser mode settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the laser pattern mode value is unsupported.\nValueError\n    If the yml version is unsupported or if the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_laser_pattern_settings", "modulename": "pytribeam.factory", "qualname": "validate_laser_pattern_settings", "kind": "function", "doc": "<p>Perform schema checking for laser pattern setting dictionary.</p>\n\n<p>This function validates the laser pattern settings dictionary based on the specified yml format and determines the type of pattern (box or line).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the laser pattern settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.LaserPatternType\n    The type of the laser pattern (box or line).</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If required settings are missing from the .yml file or if multiple pattern types are specified.\nValueError\n    If the laser pattern settings are invalid.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPatternType</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_fib_pattern_settings", "modulename": "pytribeam.factory", "qualname": "validate_fib_pattern_settings", "kind": "function", "doc": "<p>Perform schema checking for FIB pattern setting dictionary.</p>\n\n<p>This function validates the FIB pattern settings dictionary based on the specified yml format and determines the type of pattern (rectangle, regular cross section, cleaning cross section, or selected area).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to validate the FIB pattern settings.\nsettings : dict\n    The dictionary containing the FIB pattern settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Union[tbt.FIBRectanglePattern, tbt.FIBRegularCrossSection, tbt.FIBCleaningCrossSection, tbt.FIBStreamPattern]\n    The validated FIB pattern object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If required settings are missing from the .yml file or if multiple pattern types are specified.\nValueError\n    If the application file is unsupported or invalid for the specified pattern type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBRectanglePattern</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBRegularCrossSection</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBCleaningCrossSection</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBStreamPattern</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_fib_box_settings", "modulename": "pytribeam.factory", "qualname": "validate_fib_box_settings", "kind": "function", "doc": "<p>Perform schema checking for FIB box pattern setting dictionary.</p>\n\n<p>This function validates the FIB box pattern settings dictionary based on the specified yml format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the FIB box pattern settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.\npattern_type : tbt.FIBPatternType\n    The type of the FIB pattern.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the yml version is unsupported or if the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pattern_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.validate_fib_selected_area_settings", "modulename": "pytribeam.factory", "qualname": "validate_fib_selected_area_settings", "kind": "function", "doc": "<p>Perform schema checking for FIB selected area pattern setting dictionary.</p>\n\n<p>This function validates the FIB selected area pattern settings dictionary based on the specified yml format.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The dictionary containing the FIB selected area pattern settings.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.\nstep_name : str\n    The name of the step in the .yml file.\npattern_type : tbt.FIBPatternType\n    The type of the FIB pattern.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the settings are valid, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the yml version is unsupported or if the settings do not satisfy the specified schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pattern_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.factory.step", "modulename": "pytribeam.factory", "qualname": "step", "kind": "function", "doc": "<p>Create a step object for different step types, including validation.</p>\n\n<p>This function creates a <code>Step</code> object for the specified step type and performs validation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to create the step.\nstep_name : str\n    The name of the step in the .yml file.\nstep_settings : dict\n    The dictionary containing the step settings.\ngeneral_settings : tbt.GeneralSettings\n    The general settings object.\nyml_format : tbt.YMLFormatVersion\n    The format specified by the version of the .yml file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.Step\n    The step object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the step type is unsupported.\nKeyError\n    If required settings are missing or invalid.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">step_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">general_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneralSettings</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Step</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.fib", "modulename": "pytribeam.fib", "kind": "module", "doc": "<h1 id=\"fib-module\">FIB Module</h1>\n\n<p>This module contains functions for performing various operations related to Focused Ion Beam (FIB) milling, including preparing the microscope for milling, creating patterns, and performing milling operations.</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>application_files(microscope: tbt.Microscope) -> List[str]\n    Get the list of application files from the current microscope.</p>\n\n<p>shutter_control(microscope: tbt.Microscope) -> None\n    Ensure auto control is set on the e-beam shutter. Manual control is not currently offered.</p>\n\n<p>prepare_milling(microscope: tbt.Microscope, application: str, patterning_device: tbt.Device = tbt.Device.ION_BEAM) -> bool\n    Clear old patterns, assign patterning to ion beam by default, and load the application.</p>\n\n<p>create_pattern(geometry, microscope: tbt.Microscope, **kwargs: dict) -> bool\n    Create a pattern on the microscope based on the provided geometry.</p>\n\n<p>create_pattern(geometry: tbt.FIBRectanglePattern, microscope: tbt.Microscope, **kwargs: dict) -> tbt.as_dynamics.RectanglePattern\n    Create a rectangle pattern on the microscope.</p>\n\n<p>create_pattern(geometry: tbt.FIBRegularCrossSection, microscope: tbt.Microscope, **kwargs: dict) -> tbt.as_dynamics.RegularCrossSectionPattern\n    Create a regular cross-section pattern on the microscope.</p>\n\n<p>create_pattern(geometry: tbt.FIBCleaningCrossSection, microscope: tbt.Microscope, **kwargs: dict) -> tbt.as_dynamics.CleaningCrossSectionPattern\n    Create a cleaning cross-section pattern on the microscope.</p>\n\n<p>create_pattern(geometry: tbt.FIBStreamPattern, microscope: tbt.Microscope, **kwargs: dict) -> tbt.StreamPattern\n    Create a stream pattern on the microscope.</p>\n\n<p>image_processing(geometry: tbt.FIBStreamPattern, input_image_path: Path) -> bool\n    Perform image processing for FIB stream pattern.</p>\n\n<p>mill_operation(step: tbt.Step, fib_settings: tbt.FIBSettings, general_settings: tbt.GeneralSettings, slice_number: int) -> bool\n    Perform a milling operation based on the provided step and settings.</p>\n"}, {"fullname": "pytribeam.fib.application_files", "modulename": "pytribeam.fib", "qualname": "application_files", "kind": "function", "doc": "<p>Get the list of application files from the current microscope.</p>\n\n<p>This function retrieves the list of application files available on the current microscope, removes any \"None\" entries, and sorts the list.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object from which to retrieve the application files.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>List[str]\n    A sorted list of application files available on the microscope.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.fib.shutter_control", "modulename": "pytribeam.fib", "qualname": "shutter_control", "kind": "function", "doc": "<p>Ensure auto control is set on the e-beam shutter. Manual control is not currently offered.</p>\n\n<p>This function checks if the e-beam protective shutter is installed and sets its mode to automatic if it is not already set. If the shutter cannot be set to automatic mode, a SystemError is raised.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to control the e-beam shutter.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If the e-beam shutter is installed but cannot be set to automatic mode.</p>\n\n<h2 id=\"warnings\">Warnings</h2>\n\n<p>UserWarning\n    If the e-beam shutter is not installed or if it is set to automatic mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.fib.prepare_milling", "modulename": "pytribeam.fib", "qualname": "prepare_milling", "kind": "function", "doc": "<p>Clear old patterns, assign patterning to ion beam by default, and load the application.</p>\n\n<p>This function clears old patterns, assigns the patterning device to the specified beam (ion beam by default), and loads the specified application. It validates the patterning device and application file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to prepare milling.\napplication : str\n    The name of the application file to load.\npatterning_device : tbt.Device, optional\n    The device to use for patterning (default is tbt.Device.ION_BEAM).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the preparation is successful.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the patterning device is invalid or if the application file is not found on the system.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">application</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">patterning_device</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Device</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">ION_BEAM</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.fib.create_pattern", "modulename": "pytribeam.fib", "qualname": "create_pattern", "kind": "function", "doc": "<p>Create a pattern on the microscope based on the provided geometry.</p>\n\n<p>This function creates a pattern on the microscope based on the provided geometry. It is a generic function that raises a NotImplementedError if no handler is available for the provided geometry type.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>geometry : Any\n    The geometry of the pattern to create.\nmicroscope : tbt.Microscope\n    The microscope object on which to create the pattern.\nkwargs : dict\n    Additional keyword arguments.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the pattern is created successfully.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If no handler is available for the provided geometry type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">geometry</span>, </span><span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.fib.image_processing", "modulename": "pytribeam.fib", "qualname": "image_processing", "kind": "function", "doc": "<p>Perform image processing for FIB stream pattern.</p>\n\n<p>This function runs an image processing script specified by the <code>recipe_file</code> in the <code>geometry</code> object, using the input image path and outputting the mask file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>geometry : tbt.FIBStreamPattern\n    The geometry of the FIB stream pattern, including the <code>recipe_file</code> and <code>mask_file</code>.\ninput_image_path : Path\n    The path to the input image.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the image processing is successful.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the subprocess call for the script does not execute correctly or if the mask file is not created.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">geometry</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBStreamPattern</span>,</span><span class=\"param\">\t<span class=\"n\">input_image_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.fib.mill_operation", "modulename": "pytribeam.fib", "qualname": "mill_operation", "kind": "function", "doc": "<p>Perform a milling operation based on the provided step and settings.</p>\n\n<p>This function performs a milling operation using the specified step, FIB settings, general settings, and slice number.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>step : tbt.Step\n    The step object containing the operation settings.\nfib_settings : tbt.FIBSettings\n    The FIB settings object containing the microscope and pattern settings.\ngeneral_settings : tbt.GeneralSettings\n    The general settings object.\nslice_number : int\n    The slice number for the operation.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the milling operation is successful.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the ion image for selected area milling is not found.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Step</span>,</span><span class=\"param\">\t<span class=\"n\">fib_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBSettings</span>,</span><span class=\"param\">\t<span class=\"n\">general_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneralSettings</span>,</span><span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image", "modulename": "pytribeam.image", "kind": "module", "doc": "<h1 id=\"microscope-imaging-module\">Microscope Imaging Module</h1>\n\n<p>This module provides a set of functions for configuring and operating the microscope for imaging purposes.\nIt includes functions for setting beam parameters, detector settings, and capturing images with custom\nor preset resolutions.</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>beam_angular_correction(microscope, dynamic_focus, tilt_correction, delay_s=0.5)\n    Uses auto mode to set tilt correction and dynamic focus.</p>\n\n<p>beam_current(beam, microscope, current_na, current_tol_na, delay_s=5.0)\n    Sets the current for the selected beam type, with inputs in units of nanoamps.</p>\n\n<p>beam_dwell_time(beam, microscope, dwell_us, delay_s=0.1)\n    Sets the dwell time for the selected beam, with inputs in units of microseconds.</p>\n\n<p>beam_hfw(beam, microscope, hfw_mm, delay_s=0.1)\n    Sets the horizontal field width for the selected beam, with inputs in units of millimeters.</p>\n\n<p>beam_ready(beam, microscope, delay_s=5.0, attempts=2)\n    Checks if the beam is on or blanked, and tries to turn it on and unblank it if possible.</p>\n\n<p>beam_scan_full_frame(beam, microscope)\n    Sets the beam scan mode to full frame.</p>\n\n<p>beam_scan_resolution(beam, microscope, resolution, delay_s=0.1)\n    Sets the scan resolution for the selected beam, with inputs in units of preset resolutions.</p>\n\n<p>beam_scan_rotation(beam, microscope, rotation_deg, delay_s=0.1)\n    Sets the scan rotation for the selected beam, with inputs in units of degrees.</p>\n\n<p>beam_voltage(beam, microscope, voltage_kv, voltage_tol_kv, delay_s=5.0)\n    Sets the voltage for a given beam type, with inputs in units of kilovolts.</p>\n\n<p>beam_working_dist(beam, microscope, wd_mm, delay_s=0.1)\n    Sets the working distance for the selected beam, with inputs in units of millimeters.</p>\n\n<p>collect_multiple_images(multiple_img_settings, num_frames)\n    Sets up scanning for multiple frames.</p>\n\n<p>collect_single_image(save_path, img_settings)\n    Collects a single frame image with defined image settings.</p>\n\n<p>detector_auto_cb(microscope, beam, settings, delay_s=0.1)\n    Runs the detector auto contrast-brightness function.</p>\n\n<p>detector_brightness(microscope, brightness, delay_s=0.1)\n    Sets the detector brightness with input from 0 to 1.</p>\n\n<p>detector_cb(microscope, detector_settings, beam)\n    Sets detector contrast and brightness.</p>\n\n<p>detector_contrast(microscope, contrast, delay_s=0.1)\n    Sets the detector contrast with input from 0 to 1.</p>\n\n<p>detector_mode(microscope, detector_mode, delay_s=0.1)\n    Sets the detector mode.</p>\n\n<p>detector_type(microscope, detector, delay_s=0.1)\n    Sets the detector type.</p>\n\n<p>grab_custom_resolution_frame(img_settings, save_path)\n    Captures a single frame image using custom resolutions and saves it to the specified path.</p>\n\n<p>grab_preset_resolution_frame(img_settings)\n    Captures a single frame image using preset resolutions.</p>\n\n<p>image_operation(step, image_settings, general_settings, slice_number)\n    Performs an image operation based on the specified settings.</p>\n\n<p>imaging_detector(img_settings)\n    Prepares the detector and inserts it if applicable.</p>\n\n<p>imaging_device(microscope, beam)\n    Prepares the imaging beam, viewing quad, and the beam voltage and current.</p>\n\n<p>imaging_scan(img_settings)\n    Sets all scan settings except for the resolution.</p>\n\n<p>prepare_imaging(img_settings)\n    Prepares various imaging settings.</p>\n\n<p>set_beam_device(microscope, device, delay_s=0.1)\n    Sets the active imaging device.</p>\n\n<p>set_view(microscope, quad)\n    Sets the active view to the specified quad.</p>\n"}, {"fullname": "pytribeam.image.beam_angular_correction", "modulename": "pytribeam.image", "qualname": "beam_angular_correction", "kind": "function", "doc": "<p>Uses auto mode to set tilt correction and dynamic focus.</p>\n\n<p>This function configures the electron beam's angular correction mode to automatic,\nsets the scan rotation to zero, and enables or disables dynamic focus and tilt correction\nbased on the provided parameters.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\ndynamic_focus : bool\n    If True, dynamic focus will be turned on. If False, dynamic focus will be turned off.\ntilt_correction : bool\n    If True, tilt correction will be turned on. If False, tilt correction will be turned off.\ndelay_s : float, optional\n    The delay in seconds to wait after turning dynamic focus or tilt correction on or off (default is 0.5).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the configuration is successful, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If unable to turn dynamic focus or tilt correction on or off.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_angular_correction</span><span class=\"p\">(</span><span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">dynamic_focus</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">tilt_correction</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">dynamic_focus</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">tilt_correction</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.beam_current", "modulename": "pytribeam.image", "qualname": "beam_current", "kind": "function", "doc": "<p>Sets the current for the selected beam type, with inputs in units of nanoamps.</p>\n\n<p>This function sets the beam current for the specified beam type on the microscope.\nIf the current difference exceeds the tolerance, it adjusts the beam current and\nwaits for the specified delay.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : tbt.Beam\n    The beam type to configure.\nmicroscope : tbt.Microscope\n    The microscope object to configure.\ncurrent_na : float\n    The desired beam current in nanoamps.\ncurrent_tol_na : float\n    The tolerance for the beam current in nanoamps.\ndelay_s : float, optional\n    The delay in seconds to wait after adjusting the beam current (default is 5.0).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the beam current is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the beam current cannot be adjusted within the specified tolerance.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_current</span><span class=\"p\">(</span><span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">current_na</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">current_tol_na</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">current_na</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">current_tol_na</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.beam_dwell_time", "modulename": "pytribeam.image", "qualname": "beam_dwell_time", "kind": "function", "doc": "<p>Sets the dwell time for the selected beam, with inputs in units of microseconds.</p>\n\n<p>This function sets the dwell time for the specified beam type on the microscope.\nIt converts the dwell time from microseconds to seconds, sets the dwell time, and\nwaits for the specified delay.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : tbt.Beam\n    The beam type to configure.\nmicroscope : tbt.Microscope\n    The microscope object to configure.\ndwell_us : float\n    The desired dwell time in microseconds.\ndelay_s : float, optional\n    The delay in seconds to wait after adjusting the dwell time (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the dwell time is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the dwell time cannot be adjusted correctly.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_dwell_time</span><span class=\"p\">(</span><span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">dwell_us</span><span class=\"o\">=</span><span class=\"mf\">10.0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">dwell_us</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.beam_hfw", "modulename": "pytribeam.image", "qualname": "beam_hfw", "kind": "function", "doc": "<p>Sets the horizontal field width for the selected beam, with inputs in units of millimeters.</p>\n\n<p>This function sets the horizontal field width (HFW) for the specified beam type on the microscope.\nIt converts the HFW from millimeters to meters, sets the HFW, and waits for the specified delay.\nThis should be done after adjusting the working distance.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : tbt.Beam\n    The beam type to configure.\nmicroscope : tbt.Microscope\n    The microscope object to configure.\nhfw_mm : float\n    The desired horizontal field width in millimeters.\ndelay_s : float, optional\n    The delay in seconds to wait after adjusting the HFW (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the HFW is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the HFW cannot be adjusted correctly.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_hfw</span><span class=\"p\">(</span><span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">hfw_mm</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">hfw_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">hfw_tol_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.beam_ready", "modulename": "pytribeam.image", "qualname": "beam_ready", "kind": "function", "doc": "<p>Checks if the beam is on or blanked, and tries to turn it on and unblank it if possible.</p>\n\n<p>This function checks the vacuum state, ensures the beam is on, and unblanks the beam if it is blanked.\nIt makes multiple attempts to turn on and unblank the beam, waiting for the specified delay between attempts.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : tbt.Beam\n    The beam type to check.\nmicroscope : tbt.Microscope\n    The microscope object to check.\ndelay_s : float, optional\n    The delay in seconds to wait between attempts (default is 5.0).\nattempts : int, optional\n    The number of attempts to turn on and unblank the beam (default is 2).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the beam is ready (on and unblanked), False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the vacuum is not pumped.\n    If the beam cannot be turned on after the specified number of attempts.\n    If the beam cannot be unblanked after the specified number of attempts.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_ready</span><span class=\"p\">(</span><span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">microscope</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span>,</span><span class=\"param\">\t<span class=\"n\">attempts</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.beam_scan_full_frame", "modulename": "pytribeam.image", "qualname": "beam_scan_full_frame", "kind": "function", "doc": "<p>Set beam scan mode to full frame.</p>\n\n<p>This function sets the scanning mode of the specified beam to full frame on the microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : tbt.Beam\n    The beam type to configure.\nmicroscope : tbt.Microscope\n    The microscope object to configure.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the scan mode is set to full frame successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If unable to set the scan mode to full frame.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_scan_full_frame</span><span class=\"p\">(</span><span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">microscope</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.beam_scan_resolution", "modulename": "pytribeam.image", "qualname": "beam_scan_resolution", "kind": "function", "doc": "<p>Sets the scan resolution for the selected beam, with inputs in units of preset resolutions.</p>\n\n<p>This function sets the scan resolution for the specified beam type on the microscope.\nIt only works for preset resolutions and waits for the specified delay after setting the resolution.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : tbt.Beam\n    The beam type to configure.\nmicroscope : tbt.Microscope\n    The microscope object to configure.\nresolution : tbt.Resolution\n    The desired scan resolution (must be a preset resolution).\ndelay_s : float, optional\n    The delay in seconds to wait after adjusting the resolution (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the scan resolution is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If a custom resolution is requested or if the resolution cannot be adjusted correctly.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.utility</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">resolution</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">PresetResolution</span><span class=\"o\">.</span><span class=\"n\">HIGH</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_scan_resolution</span><span class=\"p\">(</span><span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">resolution</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Resolution</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.beam_scan_rotation", "modulename": "pytribeam.image", "qualname": "beam_scan_rotation", "kind": "function", "doc": "<p>Sets the scan rotation for the selected beam, with inputs in units of degrees.</p>\n\n<p>This function sets the scan rotation for the specified beam type on the microscope.\nIt converts the rotation from degrees to radians, sets the scan rotation, and waits for the specified delay.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : tbt.Beam\n    The beam type to configure.\nmicroscope : tbt.Microscope\n    The microscope object to configure.\nrotation_deg : float\n    The desired scan rotation in degrees.\ndelay_s : float, optional\n    The delay in seconds to wait after adjusting the scan rotation (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the scan rotation is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the scan rotation cannot be adjusted correctly.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_scan_rotation</span><span class=\"p\">(</span><span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">rotation_deg</span><span class=\"o\">=</span><span class=\"mf\">45.0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">rotation_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.beam_voltage", "modulename": "pytribeam.image", "qualname": "beam_voltage", "kind": "function", "doc": "<p>Sets the voltage for a given beam type, with inputs in units of kilovolts.</p>\n\n<p>This function sets the beam voltage for the specified beam type on the microscope.\nIf the voltage difference exceeds the tolerance, it adjusts the beam voltage and waits for the specified delay.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : tbt.Beam\n    The beam type to configure.\nmicroscope : tbt.Microscope\n    The microscope object to configure.\nvoltage_kv : float\n    The desired beam voltage in kilovolts.\nvoltage_tol_kv : float\n    The tolerance for the beam voltage in kilovolts.\ndelay_s : float, optional\n    The delay in seconds to wait after adjusting the beam voltage (default is 5.0).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the beam voltage is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the beam voltage cannot be adjusted within the specified tolerance.\n    If the beam is not controllable.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_voltage</span><span class=\"p\">(</span><span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">voltage_kv</span><span class=\"o\">=</span><span class=\"mf\">15.0</span><span class=\"p\">,</span> <span class=\"n\">voltage_tol_kv</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">voltage_kv</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">voltage_tol_kv</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.beam_working_distance", "modulename": "pytribeam.image", "qualname": "beam_working_distance", "kind": "function", "doc": "<p>Sets the working distance for the selected beam, with inputs in units of millimeters.</p>\n\n<p>This function sets the working distance (WD) for the specified beam type on the microscope.\nIt converts the WD from millimeters to meters, sets the WD, and waits for the specified delay.\nThis should be done before adjusting the horizontal field width.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : tbt.Beam\n    The beam type to configure.\nmicroscope : tbt.Microscope\n    The microscope object to configure.\nwd_mm : float\n    The desired working distance in millimeters.\ndelay_s : float, optional\n    The delay in seconds to wait after adjusting the working distance (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the working distance is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the working distance cannot be adjusted correctly.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">beam_working_dist</span><span class=\"p\">(</span><span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">wd_mm</span><span class=\"o\">=</span><span class=\"mf\">5.0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">wd_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.detector_auto_cb", "modulename": "pytribeam.image", "qualname": "detector_auto_cb", "kind": "function", "doc": "<p>Detector auto contrast brightness. Currently only reduced scan area option is supported.</p>\n\n<p>This function sets the scanning mode to reduced area, runs the auto contrast-brightness function,\nand then sets the scanning mode back to full frame.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\nbeam : tbt.Beam\n    The beam type to configure.\nsettings : tbt.ScanArea\n    The scan area settings for the reduced area.\ndelay_s : float, optional\n    The delay in seconds to wait after each operation (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the auto contrast-brightness is completed successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If unable to set the scan mode to reduced area or full frame.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">auto_cb_settings</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ScanArea</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">detector_auto_cb</span><span class=\"p\">(</span><span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">beam</span><span class=\"p\">,</span> <span class=\"n\">auto_cb_settings</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ScanArea</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.detector_brightness", "modulename": "pytribeam.image", "qualname": "detector_brightness", "kind": "function", "doc": "<p>Sets the detector brightness with input from 0 to 1.</p>\n\n<p>This function sets the brightness for the detector on the microscope and waits for the specified delay.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\nbrightness : float\n    The desired brightness value (from 0 to 1).\ndelay_s : float, optional\n    The delay in seconds to wait after adjusting the brightness (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the brightness is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the brightness cannot be adjusted correctly.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">detector_brightness</span><span class=\"p\">(</span><span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">brightness</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">brightness</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.detector_contrast", "modulename": "pytribeam.image", "qualname": "detector_contrast", "kind": "function", "doc": "<p>Sets the detector contrast with input from 0 to 1.</p>\n\n<p>This function sets the contrast for the detector on the microscope and waits for the specified delay.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\ncontrast : float\n    The desired contrast value (from 0 to 1).\ndelay_s : float, optional\n    The delay in seconds to wait after adjusting the contrast (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the contrast is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the contrast cannot be adjusted correctly.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">detector_contrast</span><span class=\"p\">(</span><span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">contrast</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">contrast</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.detector_cb", "modulename": "pytribeam.image", "qualname": "detector_cb", "kind": "function", "doc": "<p>Sets detector contrast and brightness.</p>\n\n<p>This function sets the contrast and brightness for the detector on the microscope.\nIt also runs the auto contrast-brightness function if specified in the detector settings.\nSupports initial settings of contrast and brightness with fixed values before auto adjustment.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\ndetector_settings : tbt.Detector\n    The detector settings, including contrast, brightness, and auto contrast-brightness settings.\nbeam : tbt.Beam\n    The beam type to configure.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the contrast and brightness are set successfully, False otherwise.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">detector_settings</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Detector</span><span class=\"p\">(</span><span class=\"n\">contrast</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">brightness</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">auto_cb_settings</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ScanArea</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">detector_cb</span><span class=\"p\">(</span><span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">detector_settings</span><span class=\"p\">,</span> <span class=\"n\">beam</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">detector_settings</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Detector</span><span class=\"p\">(</span><span class=\"n\">contrast</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">brightness</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">auto_cb_settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">detector_cb</span><span class=\"p\">(</span><span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">detector_settings</span><span class=\"p\">,</span> <span class=\"n\">beam</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam_brightness</span> <span class=\"o\">=</span> <span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">detector</span><span class=\"o\">.</span><span class=\"n\">brightness</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">beam_brightness</span><span class=\"p\">)</span>\n<span class=\"go\">0.3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beam_contrast</span> <span class=\"o\">=</span> <span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">detector</span><span class=\"o\">.</span><span class=\"n\">contrast</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">beam_contrast</span><span class=\"p\">)</span>\n<span class=\"go\">0.2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">detector_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Detector</span>,</span><span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.detector_mode", "modulename": "pytribeam.image", "qualname": "detector_mode", "kind": "function", "doc": "<p>Sets the detector mode.</p>\n\n<p>This function sets the mode for the detector on the microscope and waits for the specified delay.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\ndetector_mode : tbt.DetectorMode\n    The desired detector mode.\ndelay_s : float, optional\n    The delay in seconds to wait after setting the detector mode (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the detector mode is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the detector mode cannot be set correctly.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">DetectorMode</span><span class=\"o\">.</span><span class=\"n\">SECONDARY_ELECTRONS</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">detector_mode</span><span class=\"p\">(</span><span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">detector_mode</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DetectorMode</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.detector_type", "modulename": "pytribeam.image", "qualname": "detector_type", "kind": "function", "doc": "<p>Sets the detector type.</p>\n\n<p>This function sets the type for the detector on the microscope and waits for the specified delay.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\ndetector : tbt.DetectorType\n    The desired detector type.\ndelay_s : float, optional\n    The delay in seconds to wait after setting the detector type (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the detector type is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the detector type cannot be set correctly.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">detector</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">DetectorType</span><span class=\"o\">.</span><span class=\"n\">ETD</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">detector_type</span><span class=\"p\">(</span><span class=\"n\">microscope</span><span class=\"p\">,</span> <span class=\"n\">detector</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">detector</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DetectorType</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.grab_custom_resolution_frame", "modulename": "pytribeam.image", "qualname": "grab_custom_resolution_frame", "kind": "function", "doc": "<p>Method for single frame imaging used with custom resolutions.</p>\n\n<p>This function captures a single frame image using custom resolutions and saves it to the specified path.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>img_settings : tbt.ImageSettings\n    The image settings, including the microscope and scan resolution.\nsave_path : Path\n    The path to save the captured image.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the image is captured and saved successfully, False otherwise.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img_settings</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">microscope</span><span class=\"o\">=</span><span class=\"n\">microscope</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">beam</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">detector</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Detector</span><span class=\"p\">(),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">scan</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Scan</span><span class=\"p\">(</span><span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Resolution</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">768</span><span class=\"p\">)),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">bit_depth</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ColorDepth</span><span class=\"o\">.</span><span class=\"n\">BITS_8</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">save_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/save/image.tif&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">grab_custom_resolution_frame</span><span class=\"p\">(</span><span class=\"n\">img_settings</span><span class=\"p\">,</span> <span class=\"n\">save_path</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.grab_preset_resolution_frame", "modulename": "pytribeam.image", "qualname": "grab_preset_resolution_frame", "kind": "function", "doc": "<p>Method for single frame imaging used with preset resolutions.</p>\n\n<p>This function captures a single frame image using preset resolutions.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>img_settings : tbt.ImageSettings\n    The image settings, including the microscope, beam, detector, and scan resolution.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.AdornedImage\n    The captured image.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img_settings</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">microscope</span><span class=\"o\">=</span><span class=\"n\">microscope</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">beam</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">detector</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Detector</span><span class=\"p\">(),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">scan</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Scan</span><span class=\"p\">(</span><span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">PresetResolution</span><span class=\"o\">.</span><span class=\"n\">PRESET_768X512</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">bit_depth</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ColorDepth</span><span class=\"o\">.</span><span class=\"n\">BITS_8</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">grab_preset_resolution_frame</span><span class=\"p\">(</span><span class=\"n\">img_settings</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n<span class=\"go\">AdornedImage(width=768, height=512, bit_depth=8)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">AdornedImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.imaging_detector", "modulename": "pytribeam.image", "qualname": "imaging_detector", "kind": "function", "doc": "<p>Prepares the detector and inserts it if applicable.</p>\n\n<p>This function sets the detector type, inserts the detector if necessary, sets the detector mode,\nand adjusts the contrast and brightness settings. It is important to set detector mode settings\nright before contrast and brightness as any subsequent calls to a detector type can overwrite the mode.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>img_settings : tbt.ImageSettings\n    The image settings, including the microscope, beam, and detector settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the detector is prepared successfully, False otherwise.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pytribeam.types</span> <span class=\"k\">as</span> <span class=\"nn\">tbt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Microscope</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">microscope</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Client connecting to [localhost:7520]...</span>\n<span class=\"go\">Client connected to [localhost:7520]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img_settings</span> <span class=\"o\">=</span> <span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">microscope</span><span class=\"o\">=</span><span class=\"n\">microscope</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">beam</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ElectronBeam</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">detector</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Detector</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">DetectorType</span><span class=\"o\">.</span><span class=\"n\">ETD</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">DetectorMode</span><span class=\"o\">.</span><span class=\"n\">SECONDARY_ELECTRONS</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">brightness</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">contrast</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">scan</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">Scan</span><span class=\"p\">(</span><span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">PresetResolution</span><span class=\"o\">.</span><span class=\"n\">PRESET_768X512</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">bit_depth</span><span class=\"o\">=</span><span class=\"n\">tbt</span><span class=\"o\">.</span><span class=\"n\">ColorDepth</span><span class=\"o\">.</span><span class=\"n\">BITS_8</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">imaging_detector</span><span class=\"p\">(</span><span class=\"n\">img_settings</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.imaging_device", "modulename": "pytribeam.image", "qualname": "imaging_device", "kind": "function", "doc": "<p>Prepares the imaging beam, viewing quad, and the beam voltage and current.</p>\n\n<p>This function sets the beam device, ensures the beam is ready, sets the beam voltage and current,\nand applies angular correction if the beam type is electron.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\nbeam : tbt.Beam\n    The beam type to configure, including its settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the imaging device is prepared successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.imaging_scan", "modulename": "pytribeam.image", "qualname": "imaging_scan", "kind": "function", "doc": "<p>Sets all scan settings except for the resolution.</p>\n\n<p>This function configures the scan settings for the specified image settings, including\nsetting the scan mode to full frame, scan rotation, working distance, horizontal field width,\nand dwell time.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>img_settings : tbt.ImageSettings\n    The image settings, including the microscope, beam, and scan settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the scan settings are configured successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.prepare_imaging", "modulename": "pytribeam.image", "qualname": "prepare_imaging", "kind": "function", "doc": "<p>Prepares various imaging settings.</p>\n\n<p>This function prepares the imaging device, scan settings, and detector settings\nbased on the specified image settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>img_settings : tbt.ImageSettings\n    The image settings, including the microscope, beam, scan, and detector settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the imaging settings are prepared successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.set_view", "modulename": "pytribeam.image", "qualname": "set_view", "kind": "function", "doc": "<p>Sets the active view to the specified quad.</p>\n\n<p>This function sets the active imaging view to the specified quad on the microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\nquad : tbt.ViewQuad\n    The imaging view to select:\n    - 1 is upper left\n    - 2 is upper right\n    - 3 is lower left\n    - 4 is lower right</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the active view is set successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">quad</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ViewQuad</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.set_beam_device", "modulename": "pytribeam.image", "qualname": "set_beam_device", "kind": "function", "doc": "<p>Sets the active imaging device.</p>\n\n<p>This function sets the active imaging device on the microscope and waits for the specified delay.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to configure.\ndevice : tbt.Device\n    The desired imaging device.\ndelay_s : float, optional\n    The delay in seconds to wait after setting the device (default is 0.1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the active device is set successfully, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the active device cannot be set correctly.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.collect_single_image", "modulename": "pytribeam.image", "qualname": "collect_single_image", "kind": "function", "doc": "<p>Collects a single frame image with defined image settings.</p>\n\n<p>This function prepares the imaging settings, sets the view, and captures a single frame image.\nIt saves the image to the specified path. If a non-preset resolution is requested, the image\nwill be saved at 8-bit color depth.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>save_path : Path\n    The path to save the captured image.\nimg_settings : tbt.ImageSettings\n    The image settings, including the microscope, beam, scan, and detector settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the image is captured and saved successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">img_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.collect_multiple_images", "modulename": "pytribeam.image", "qualname": "collect_multiple_images", "kind": "function", "doc": "<p>Sets up scanning for multiple frames.</p>\n\n<p>This function is best used for collecting multiple segments on a single detector simultaneously.\nIt is limited to preset resolutions only.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>multiple_img_settings : List[tbt.ImageSettings]\n    The list of image settings for each frame, including the microscope, beam, scan, and detector settings.\nnum_frames : int\n    The number of frames to collect.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>List[tbt.AdornedImage]\n    The list of captured images.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If a non-preset resolution is requested for simultaneous multiple frame imaging.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This method has not yet been tested.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">multiple_img_settings</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">num_frames</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">AdornedImage</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.image.image_operation", "modulename": "pytribeam.image", "qualname": "image_operation", "kind": "function", "doc": "<p>Performs an image operation based on the specified settings.</p>\n\n<p>This function collects an image, saves it to the specified directory, and turns off tilt correction and dynamic focus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>step : tbt.Step\n    The step information, including the name of the step.\nimage_settings : tbt.ImageSettings\n    The image settings, including the microscope, beam, scan, and detector settings.\ngeneral_settings : tbt.GeneralSettings\n    The general settings, including the experimental directory.\nslice_number : int\n    The slice number for naming the saved image file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the image operation is performed successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Step</span>,</span><span class=\"param\">\t<span class=\"n\">image_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span>,</span><span class=\"param\">\t<span class=\"n\">general_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneralSettings</span>,</span><span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices", "modulename": "pytribeam.insertable_devices", "kind": "module", "doc": "<h1 id=\"insertable-devices-module\">Insertable Devices Module</h1>\n\n<p>This module contains functions for managing and controlling insertable devices in the microscope, including detectors, EBSD, and EDS systems.</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>detector_insertable(microscope: tbt.Microscope, detector: tbt.DetectorType) -> bool\n    Determine whether or not the built-in microscope detector is insertable and return its state.</p>\n\n<p>detector_state(microscope: tbt.Microscope, detector: tbt.DetectorType) -> tbt.RetractableDeviceState\n    Determine the state of the detector, only valid if the detector is insertable.</p>\n\n<p>detectors_will_collide(microscope: tbt.Microscope, detector_to_insert: tbt.DetectorType) -> bool\n    Determine if a collision may occur when inserting the specified detector.</p>\n\n<p>device_access(microscope: tbt.Microscope) -> tbt.ViewQuad\n    Switch to the upper-left quadrant and assign the electron beam as the active device.</p>\n\n<p>insert_EBSD(microscope: tbt.Microscope) -> bool\n    Insert the EBSD camera into the microscope.</p>\n\n<p>insert_EDS(microscope: tbt.Microscope) -> bool\n    Insert the EDS camera into the microscope.</p>\n\n<p>insert_detector(microscope: tbt.Microscope, detector: tbt.DetectorType, time_delay_s: float = 0.5) -> bool\n    Insert the selected detector into the microscope.</p>\n\n<p>retract_all_devices(microscope: tbt.Microscope, enable_EBSD: bool, enable_EDS: bool) -> bool\n    Retract all insertable devices, including microscope detectors and EBSD/EDS detectors if integrated.</p>\n\n<p>connect_EBSD() -> tbt.RetractableDeviceState\n    Connect to the EBSD system and retrieve the camera status.</p>\n\n<p>retract_EBSD(microscope: tbt.Microscope) -> bool\n    Retract the EBSD camera from the microscope.</p>\n\n<p>connect_EDS() -> tbt.RetractableDeviceState\n    Connect to the EDS system and retrieve the camera status.</p>\n\n<p>retract_EDS(microscope: tbt.Microscope) -> bool\n    Retract the EDS detector from the microscope.</p>\n\n<p>retract_device(microscope: tbt.Microscope, detector: tbt.DetectorType) -> bool\n    Retract the specified detector from the microscope.</p>\n\n<p>CCD_pause(microscope: tbt.Microscope, quad: tbt.ViewQuad = tbt.ViewQuad.LOWER_RIGHT) -> bool\n    Pause the CCD camera, typically used after device or stage movement.</p>\n\n<p>CCD_view(microscope: tbt.Microscope, quad: tbt.ViewQuad = tbt.ViewQuad.LOWER_RIGHT) -> bool\n    Visualize detector or stage movement for the user using the CCD camera.</p>\n\n<p>specimen_current(microscope: tbt.Microscope, hfw_mm=Constants.specimen_current_hfw_mm, delay_s=Constants.specimen_current_delay_s) -> float\n    Measure the specimen current using the electron beam and return the value in nA.</p>\n"}, {"fullname": "pytribeam.insertable_devices.detector_insertable", "modulename": "pytribeam.insertable_devices", "qualname": "detector_insertable", "kind": "function", "doc": "<p>Determine whether or not the built-in microscope detector is insertable and return its state.</p>\n\n<p>This function checks if the specified detector is being read by Autoscript and if it is insertable.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to check the detector.\ndetector : tbt.DetectorType\n    The type of the detector to check.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the detector is insertable, False otherwise.</p>\n\n<h2 id=\"warnings\">Warnings</h2>\n\n<p>UserWarning\n    If the detector type is invalid for the currently selected device or if the detector is not found on the system.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">detector</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DetectorType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.detector_state", "modulename": "pytribeam.insertable_devices", "qualname": "detector_state", "kind": "function", "doc": "<p>Determine the state of the detector, only valid if the detector is insertable.</p>\n\n<p>This function checks if the specified detector is insertable and returns its state.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to check the detector state.\ndetector : tbt.DetectorType\n    The type of the detector to check.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.RetractableDeviceState\n    The state of the detector if it is insertable, None otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">detector</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DetectorType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">RetractableDeviceState</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.detectors_will_collide", "modulename": "pytribeam.insertable_devices", "qualname": "detectors_will_collide", "kind": "function", "doc": "<p>Determine if a collision may occur when inserting the specified detector.</p>\n\n<p>This function checks if inserting the specified detector will cause a collision with any other detectors.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to check for potential collisions.\ndetector_to_insert : tbt.DetectorType\n    The type of the detector to insert.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if a collision may occur, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">detector_to_insert</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DetectorType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.device_access", "modulename": "pytribeam.insertable_devices", "qualname": "device_access", "kind": "function", "doc": "<p>Switch to the upper-left quadrant and assign the electron beam as the active device.</p>\n\n<p>This function switches the view to the upper-left quadrant and assigns the electron beam as the active device, which is the only device with access to insertable devices like the CBS/ABS detector. Other devices, like the ion beam, CCD, or Nav-Cam, do not have CBS/ABS access.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to switch the view and assign the active device.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.ViewQuad\n    The upper-left quadrant view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ViewQuad</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.insert_EBSD", "modulename": "pytribeam.insertable_devices", "qualname": "insert_EBSD", "kind": "function", "doc": "<p>Insert the EBSD camera into the microscope.</p>\n\n<p>This function connects to the EBSD system, checks for potential collisions with other detectors, and inserts the EBSD camera if it is not already inserted. It raises an error if the EBSD camera cannot be inserted.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to insert the EBSD camera.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the EBSD camera is successfully inserted.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If a collision may occur with another detector, if the EBSD camera is in an error state, if the EBSD mapping is not idle, or if the EBSD camera cannot be inserted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.insert_EDS", "modulename": "pytribeam.insertable_devices", "qualname": "insert_EDS", "kind": "function", "doc": "<p>Insert the EDS camera into the microscope.</p>\n\n<p>This function connects to the EDS system, checks for potential collisions with other detectors, and inserts the EDS camera if it is not already inserted. It raises an error if the EDS camera cannot be inserted.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to insert the EDS camera.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the EDS camera is successfully inserted.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If a collision may occur with another detector, if the EDS camera is in an error state, if the EDS mapping is not idle, or if the EDS camera cannot be inserted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.insert_detector", "modulename": "pytribeam.insertable_devices", "qualname": "insert_detector", "kind": "function", "doc": "<p>Insert the selected detector into the microscope.</p>\n\n<p>This function ensures the specified detector is the active one, confirms it is insertable, and inserts it if it is not already inserted. It raises an error if the detector cannot be inserted.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to insert the detector.\ndetector : tbt.DetectorType\n    The type of the detector to insert.\ntime_delay_s : float, optional\n    The time delay in seconds after inserting the detector (default is 0.5 seconds).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the detector is successfully inserted.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the detector is not insertable.\nSystemError\n    If a collision may occur with another detector or if the detector cannot be inserted.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">detector</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DetectorType</span>,</span><span class=\"param\">\t<span class=\"n\">time_delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.retract_all_devices", "modulename": "pytribeam.insertable_devices", "qualname": "retract_all_devices", "kind": "function", "doc": "<p>Retract all insertable devices, including microscope detectors and EBSD/EDS detectors if integrated.</p>\n\n<p>This function retracts all insertable devices, first retracting microscope detectors and then retracting EBSD/EDS detectors if they are integrated and enabled.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for accessing the Autoscript API.\nenable_EBSD : bool\n    Whether to enable retraction of the EBSD detector.\nenable_EDS : bool\n    Whether to enable retraction of the EDS detector.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if all devices are successfully retracted.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">enable_EBSD</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">enable_EDS</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.connect_EBSD", "modulename": "pytribeam.insertable_devices", "qualname": "connect_EBSD", "kind": "function", "doc": "<p>Connect to the EBSD system and retrieve the camera status.</p>\n\n<p>This function attempts to connect to the EBSD system and retrieve the camera status. It raises a ConnectionError if the connection fails.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.RetractableDeviceState\n    The status of the EBSD camera.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ConnectionError\n    If the EBSD control is not connected.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">RetractableDeviceState</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.retract_EBSD", "modulename": "pytribeam.insertable_devices", "qualname": "retract_EBSD", "kind": "function", "doc": "<p>Retract the EBSD camera from the microscope.</p>\n\n<p>This function connects to the EBSD system, checks the camera status, and retracts the EBSD camera if it is not already retracted. It raises an error if the EBSD camera cannot be retracted.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to retract the EBSD camera.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the EBSD camera is successfully retracted.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If the EBSD camera is in an error state, if the EBSD mapping is not completed, or if the EBSD camera retraction fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.connect_EDS", "modulename": "pytribeam.insertable_devices", "qualname": "connect_EDS", "kind": "function", "doc": "<p>Connect to the EDS system and retrieve the camera status.</p>\n\n<p>This function attempts to connect to the EDS system and retrieve the camera status. It raises a ConnectionError if the connection fails.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.RetractableDeviceState\n    The status of the EDS camera.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ConnectionError\n    If the EDS control is not connected.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">RetractableDeviceState</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.retract_EDS", "modulename": "pytribeam.insertable_devices", "qualname": "retract_EDS", "kind": "function", "doc": "<p>Retract the EDS detector from the microscope.</p>\n\n<p>This function connects to the EDS system, checks the camera status, and retracts the EDS camera if it is not already retracted. It raises an error if the EDS camera cannot be retracted.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to retract the EDS camera.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the EDS camera is successfully retracted.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If the EDS camera is in an error state or if the EDS camera retraction fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.retract_device", "modulename": "pytribeam.insertable_devices", "qualname": "retract_device", "kind": "function", "doc": "<p>Retract the specified detector from the microscope.</p>\n\n<p>This function ensures the specified detector is the active one, retracts it, and checks its state. It raises an error if the detector cannot be retracted.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to retract the detector.\ndetector : tbt.DetectorType\n    The type of the detector to retract.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the detector is successfully retracted.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If the detector cannot be retracted.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">detector</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DetectorType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.CCD_pause", "modulename": "pytribeam.insertable_devices", "qualname": "CCD_pause", "kind": "function", "doc": "<p>Pause the CCD camera, typically used after device or stage movement.</p>\n\n<p>This function pauses the CCD camera by switching to the specified quadrant, setting the beam device to the CCD camera, and stopping the acquisition. It restores the initial view afterward.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to pause the CCD camera.\nquad : tbt.ViewQuad, optional\n    The quadrant to switch to before pausing the CCD camera (default is tbt.ViewQuad.LOWER_RIGHT).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the CCD camera is successfully paused.</p>\n\n<h2 id=\"warnings\">Warnings</h2>\n\n<p>UserWarning\n    If the CCD camera is not installed on the microscope.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">quad</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ViewQuad</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ViewQuad</span><span class=\"o\">.</span><span class=\"n\">LOWER_RIGHT</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.CCD_view", "modulename": "pytribeam.insertable_devices", "qualname": "CCD_view", "kind": "function", "doc": "<p>Visualize detector or stage movement for the user using the CCD camera.</p>\n\n<p>This function visualizes detector or stage movement by switching to the specified quadrant, setting the beam device to the CCD camera, and starting the acquisition. It restores the initial view afterward.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to visualize the movement.\nquad : tbt.ViewQuad, optional\n    The quadrant to switch to before visualizing the movement (default is tbt.ViewQuad.LOWER_RIGHT).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the CCD camera is successfully used for visualization.</p>\n\n<h2 id=\"warnings\">Warnings</h2>\n\n<p>UserWarning\n    If the CCD camera is not installed on the microscope.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">quad</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ViewQuad</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ViewQuad</span><span class=\"o\">.</span><span class=\"n\">LOWER_RIGHT</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.insertable_devices.specimen_current", "modulename": "pytribeam.insertable_devices", "qualname": "specimen_current", "kind": "function", "doc": "<p>Measure the specimen current using the electron beam and return the value in nA.</p>\n\n<p>This function sets the beam device to the electron beam, adjusts the horizontal field width (HFW) and detector, starts the acquisition, and measures the specimen current. It then resets the detector and HFW to their initial values.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to measure the specimen current.\nhfw_mm : float, optional\n    The horizontal field width in millimeters (default is Constants.specimen_current_hfw_mm).\ndelay_s : float, optional\n    The delay in seconds before measuring the specimen current (default is Constants.specimen_current_delay_s).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    The measured specimen current in nA.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">hfw_mm</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"o\">=</span><span class=\"mf\">2.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser", "modulename": "pytribeam.laser", "kind": "module", "doc": "<h1 id=\"laser-module\">Laser Module</h1>\n\n<p>This module contains functions for managing and controlling the laser in the microscope, including setting laser parameters, checking laser connections, and performing laser operations.</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>laser_state_to_db(state: tbt.LaserState) -> dict\n    Convert a laser state object into a flattened dictionary.</p>\n\n<p>laser_connected() -> bool\n    Check if the laser is connected.</p>\n\n<p>_device_connections() -> tbt.DeviceStatus\n    Check the connection status of the laser and associated external devices.</p>\n\n<p>pattern_mode(mode: tbt.LaserPatternMode) -> bool\n    Set the laser pattern mode.</p>\n\n<p>pulse_energy_uj(energy_uj: float, energy_tol_uj: float = Constants.laser_energy_tol_uj, delay_s: float = 3.0) -> bool\n    Set the pulse energy on the laser.</p>\n\n<p>pulse_divider(divider: int, delay_s: float = Constants.laser_delay_s) -> bool\n    Set the pulse divider on the laser.</p>\n\n<p>set_wavelength(wavelength: tbt.LaserWavelength, frequency_khz: float = 60, timeout_s: int = 20, num_attempts: int = 2, delay_s: int = 5) -> bool\n    Set the wavelength and frequency of the laser.</p>\n\n<p>read_power(delay_s: float = Constants.laser_delay_s) -> float\n    Measure the laser power in watts.</p>\n\n<p>insert_shutter(microscope: tbt.Microscope) -> bool\n    Insert the laser shutter.</p>\n\n<p>retract_shutter(microscope: tbt.Microscope) -> bool\n    Retract the laser shutter.</p>\n\n<p>pulse_polarization(polarization: tbt.LaserPolarization, wavelength: tbt.LaserWavelength) -> bool\n    Configure the polarization of the laser light.</p>\n\n<p>pulse_settings(pulse: tbt.LaserPulse) -> bool\n    Apply the pulse settings to the laser.</p>\n\n<p>retract_laser_objective() -> bool\n    Retract the laser objective to a safe position.</p>\n\n<p>objective_position(position_mm: float, tolerance_mm=Constants.laser_objective_tolerance_mm) -> bool\n    Move the laser objective to the requested position.</p>\n\n<p>beam_shift(shift_um: tbt.Point, shift_tolerance_um: float = Constants.laser_beam_shift_tolerance_um) -> bool\n    Adjust the laser beam shift to the specified values.</p>\n\n<p>create_pattern(pattern: tbt.LaserPattern) -> bool\n    Create a laser pattern and check that it is set correctly.</p>\n\n<p>apply_laser_settings(image_beam: tbt.Beam, settings: tbt.LaserSettings) -> bool\n    Apply the laser settings to the current patterning.</p>\n\n<p>execute_patterning() -> bool\n    Execute the laser patterning.</p>\n\n<p>mill_region(settings: tbt.LaserSettings) -> bool\n    Perform laser milling on a specified region.</p>\n\n<p>laser_operation(step: tbt.Step, general_settings: tbt.GeneralSettings, slice_number: int) -> bool\n    Perform a laser operation based on the specified step and settings.</p>\n\n<p>map_ebsd() -> bool\n    Start an EBSD map and ensure it takes the minimum expected time.</p>\n\n<p>map_eds() -> bool\n    Start an EDS map and ensure it takes the minimum expected time.</p>\n"}, {"fullname": "pytribeam.laser.laser_state_to_db", "modulename": "pytribeam.laser", "qualname": "laser_state_to_db", "kind": "function", "doc": "<p>This function converts a <code>LaserState</code> object into a flattened dictionary representation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>state : tbt.LaserState\n    The laser state object to convert.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    A flattened dictionary representation of the laser state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserState</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.laser_connected", "modulename": "pytribeam.laser", "qualname": "laser_connected", "kind": "function", "doc": "<p>Check if the laser is connected.</p>\n\n<p>This function tests the connection to the laser and returns True if the connection is successful.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the laser is connected, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.pattern_mode", "modulename": "pytribeam.laser", "qualname": "pattern_mode", "kind": "function", "doc": "<p>Set the laser pattern mode.</p>\n\n<p>This function sets the laser pattern mode and verifies that it has been set correctly.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>mode : tbt.LaserPatternMode\n    The laser pattern mode to set.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the pattern mode is set correctly.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If the pattern mode cannot be set correctly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPatternMode</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.pulse_energy_uj", "modulename": "pytribeam.laser", "qualname": "pulse_energy_uj", "kind": "function", "doc": "<p>Set the pulse energy on the laser.</p>\n\n<p>This function sets the pulse energy on the laser and verifies that it has been set correctly. It should be done after setting the pulse divider.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>energy_uj : float\n    The pulse energy to set in microjoules.\nenergy_tol_uj : float, optional\n    The tolerance for the pulse energy in microjoules (default is Constants.laser_energy_tol_uj).\ndelay_s : float, optional\n    The delay in seconds after setting the pulse energy (default is 3.0 seconds).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the pulse energy is set correctly.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the pulse energy cannot be set correctly.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">energy_uj</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">energy_tol_uj</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.pulse_divider", "modulename": "pytribeam.laser", "qualname": "pulse_divider", "kind": "function", "doc": "<p>Set the pulse divider on the laser.</p>\n\n<p>This function sets the pulse divider on the laser and verifies that it has been set correctly.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>divider : int\n    The pulse divider to set.\ndelay_s : float, optional\n    The delay in seconds after setting the pulse divider (default is Constants.laser_delay_s).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the pulse divider is set correctly.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the pulse divider cannot be set correctly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">divider</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.set_wavelength", "modulename": "pytribeam.laser", "qualname": "set_wavelength", "kind": "function", "doc": "<p>Set the wavelength and frequency of the laser.</p>\n\n<p>This function sets the wavelength and frequency of the laser and verifies that they have been set correctly.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>wavelength : tbt.LaserWavelength\n    The wavelength to set.\nfrequency_khz : float, optional\n    The frequency to set in kHz (default is 60 kHz).\ntimeout_s : int, optional\n    The timeout in seconds for each attempt (default is 20 seconds).\nnum_attempts : int, optional\n    The number of attempts to set the wavelength and frequency (default is 2).\ndelay_s : int, optional\n    The delay in seconds between checks (default is 5 seconds).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the wavelength and frequency are set correctly, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wavelength</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserWavelength</span>,</span><span class=\"param\">\t<span class=\"n\">frequency_khz</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>,</span><span class=\"param\">\t<span class=\"n\">timeout_s</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">num_attempts</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.read_power", "modulename": "pytribeam.laser", "qualname": "read_power", "kind": "function", "doc": "<p>Measure the laser power in watts.</p>\n\n<p>This function measures the laser power using an external power meter.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>delay_s : float, optional\n    The delay in seconds before reading the power (default is Constants.laser_delay_s).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    The measured laser power in watts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.insert_shutter", "modulename": "pytribeam.laser", "qualname": "insert_shutter", "kind": "function", "doc": "<p>Insert the laser shutter.</p>\n\n<p>This function inserts the laser shutter and verifies that it has been inserted correctly.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to insert the laser shutter.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the laser shutter is successfully inserted.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If the laser shutter cannot be inserted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.retract_shutter", "modulename": "pytribeam.laser", "qualname": "retract_shutter", "kind": "function", "doc": "<p>Retract the laser shutter.</p>\n\n<p>This function retracts the laser shutter and verifies that it has been retracted correctly.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to retract the laser shutter.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the laser shutter is successfully retracted.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If the laser shutter cannot be retracted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.pulse_polarization", "modulename": "pytribeam.laser", "qualname": "pulse_polarization", "kind": "function", "doc": "<p>Configure the polarization of the laser light.</p>\n\n<p>This function sets the polarization of the laser light based on the specified polarization and wavelength. The polarization is controlled via \"FlipperConfiguration\", which takes the following values:\n    - Waveplate_None switches to Vert. (P)\n    - Waveplate_1030 switches to Horiz. (S)\n    - Waveplate_515 switches to Horiz. (S)</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>polarization : tbt.LaserPolarization\n    The desired polarization of the laser light.\nwavelength : tbt.LaserWavelength\n    The wavelength of the laser light.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the polarization is set correctly.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If the laser wavelength or pulse polarization is invalid.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">polarization</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPolarization</span>,</span><span class=\"param\">\t<span class=\"n\">wavelength</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserWavelength</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.pulse_settings", "modulename": "pytribeam.laser", "qualname": "pulse_settings", "kind": "function", "doc": "<p>Apply the pulse settings to the laser.</p>\n\n<p>This function applies the specified pulse settings to the laser, including wavelength, pulse divider, pulse energy, and polarization.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>pulse : tbt.LaserPulse\n    The pulse settings to apply.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the pulse settings are applied correctly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pulse</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPulse</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">True</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.retract_laser_objective", "modulename": "pytribeam.laser", "qualname": "retract_laser_objective", "kind": "function", "doc": "<p>Retract the laser objective to a safe position.</p>\n\n<p>This function retracts the laser objective to a predefined safe position.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the laser objective is successfully retracted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.objective_position", "modulename": "pytribeam.laser", "qualname": "objective_position", "kind": "function", "doc": "<p>Move the laser objective to the requested position.</p>\n\n<p>This function moves the laser objective to the specified position and verifies that it has been moved correctly.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>position_mm : float\n    The desired position of the laser objective in millimeters.\ntolerance_mm : float, optional\n    The tolerance for the laser objective position in millimeters (default is Constants.laser_objective_tolerance_mm).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the laser objective is moved to the requested position correctly.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the requested position is out of range.\nSystemError\n    If the laser objective cannot be moved to the requested position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">position_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">tolerance_mm</span><span class=\"o\">=</span><span class=\"mf\">0.005</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.beam_shift", "modulename": "pytribeam.laser", "qualname": "beam_shift", "kind": "function", "doc": "<p>Adjust the laser beam shift to the specified values.</p>\n\n<p>This function adjusts the laser beam shift to the specified x and y values within the given tolerance.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>shift_um : tbt.Point\n    The target beam shift values in micrometers.\nshift_tolerance_um : float, optional\n    The tolerance for the beam shift in micrometers (default is Constants.laser_beam_shift_tolerance_um).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the beam shift is adjusted to the target values correctly.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the beam shift cannot be adjusted to the target values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">shift_um</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Point</span>, </span><span class=\"param\"><span class=\"n\">shift_tolerance_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.create_pattern", "modulename": "pytribeam.laser", "qualname": "create_pattern", "kind": "function", "doc": "<p>Create a laser pattern and check that it is set correctly.</p>\n\n<p>This function creates a laser pattern based on the specified pattern settings and verifies that it has been set correctly.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>pattern : tbt.LaserPattern\n    The laser pattern settings to create.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the pattern is created and set correctly.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the pattern geometry type is unsupported.\nSystemError\n    If the pattern cannot be set correctly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPattern</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.apply_laser_settings", "modulename": "pytribeam.laser", "qualname": "apply_laser_settings", "kind": "function", "doc": "<p>Apply the laser settings to the current patterning.</p>\n\n<p>This function applies the specified laser settings to the current patterning, including beam scan rotation, pulse settings, objective position, beam shift, and patterning settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>image_beam : tbt.Beam\n    The beam settings for the image.\nsettings : tbt.LaserSettings\n    The laser settings to apply.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the laser settings are applied correctly.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserSettings</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.execute_patterning", "modulename": "pytribeam.laser", "qualname": "execute_patterning", "kind": "function", "doc": "<p>Execute the laser patterning.</p>\n\n<p>This function starts the laser patterning process.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the patterning process is started successfully.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.mill_region", "modulename": "pytribeam.laser", "qualname": "mill_region", "kind": "function", "doc": "<p>Perform laser milling on a specified region.</p>\n\n<p>This function performs laser milling on a specified region using the provided laser settings. It checks the laser connection, applies the laser settings, inserts the shutter, executes the patterning, retracts the shutter, and resets the scan rotation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : tbt.LaserSettings\n    The laser settings to use for milling.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the milling process is completed successfully.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If the laser is not connected.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserSettings</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.laser_operation", "modulename": "pytribeam.laser", "qualname": "laser_operation", "kind": "function", "doc": "<p>Perform a laser operation based on the specified step and settings.</p>\n\n<p>This function performs a laser operation using the provided step and general settings. It logs the laser power before and after the operation, and performs the milling process.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>step : tbt.Step\n    The step object containing the operation settings.\ngeneral_settings : tbt.GeneralSettings\n    The general settings object.\nslice_number : int\n    The slice number for the operation.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the laser operation is completed successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Step</span>,</span><span class=\"param\">\t<span class=\"n\">general_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneralSettings</span>,</span><span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.map_ebsd", "modulename": "pytribeam.laser", "qualname": "map_ebsd", "kind": "function", "doc": "<p>Start an EBSD map and ensure it takes the minimum expected time.</p>\n\n<p>This function starts an EBSD map and checks that the mapping process takes at least the minimum expected time. If the mapping process is too short, it raises an error.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the EBSD mapping is completed successfully.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the mapping process does not take the minimum expected time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.laser.map_eds", "modulename": "pytribeam.laser", "qualname": "map_eds", "kind": "function", "doc": "<p>Start an EDS map and ensure it takes the minimum expected time.</p>\n\n<p>This function starts an EDS map and checks that the mapping process takes at least the minimum expected time. If the mapping process is too short, it raises an error.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the EDS mapping is completed successfully.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the mapping process does not take the minimum expected time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.log", "modulename": "pytribeam.log", "kind": "module", "doc": "<h1 id=\"log-module\">Log Module</h1>\n\n<p>This module contains functions for logging various experiment data, including creating log files, extracting YAML configurations, and logging experiment settings, positions, laser power, and specimen current.</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>create_file(path: Path) -> bool\n    Create a log file at the specified path.</p>\n\n<p>yml_from_log(log_path_h5: Path, output_path_yml: Path, row: int, config_field: str = \"Config File\") -> bool\n    Extract YAML configuration from a log file and save it to an output path.</p>\n\n<p>experiment_settings(slice_number: int, step_number: int, log_filepath: Path, yml_path: Path) -> bool\n    Log experiment settings to the log file.</p>\n\n<p>position(step_number: int, step_name: str, slice_number: int, log_filepath: Path, dataset_name: str, current_position: tbt.StagePositionUser) -> bool\n    Log the current position to the log file.</p>\n\n<p>laser_power(step_number: int, step_name: str, slice_number: int, log_filepath: Path, dataset_name: str, power_w: float) -> bool\n    Log the laser power to the log file.</p>\n\n<p>specimen_current(step_number: int, step_name: str, slice_number: int, log_filepath: Path, dataset_name: str, specimen_current_na: float) -> bool\n    Log the specimen current to the log file.</p>\n\n<p>current_time() -> tbt.TimeStamp\n    Get the current time as a timestamp.</p>\n"}, {"fullname": "pytribeam.log.create_file", "modulename": "pytribeam.log", "qualname": "create_file", "kind": "function", "doc": "<p>Create a log file at the specified path.</p>\n\n<p>This function creates a log file at the specified path if it does not already exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>path : Path\n    The path where the log file should be created.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the log file is created successfully.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the log file cannot be created.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.log.current_time", "modulename": "pytribeam.log", "qualname": "current_time", "kind": "function", "doc": "<p>Get the current time as a timestamp.</p>\n\n<p>This function returns the current time as a <code>TimeStamp</code> object, including both human-readable and UNIX time formats.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.TimeStamp\n    The current time as a <code>TimeStamp</code> object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">TimeStamp</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.log.yml_from_log", "modulename": "pytribeam.log", "qualname": "yml_from_log", "kind": "function", "doc": "<p>Extract YAML configuration from a log file and save it to an output path.</p>\n\n<p>This function extracts the YAML configuration from a specified row in the log file and saves it to the output path.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>log_path_h5 : Path\n    The path to the log file.\noutput_path_yml : Path\n    The path to save the extracted YAML configuration.\nrow : int\n    The row number to extract the configuration from.\nconfig_field : str, optional\n    The field name for the configuration in the log file (default is \"Config File\").</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the YAML configuration is extracted and saved successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">log_path_h5</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">output_path_yml</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">config_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Config File&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.log.experiment_settings", "modulename": "pytribeam.log", "qualname": "experiment_settings", "kind": "function", "doc": "<p>Log experiment settings to the log file.</p>\n\n<p>This function logs the experiment settings from a YAML file to the log file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>slice_number : int\n    The slice number for the experiment.\nstep_number : int\n    The step number for the experiment.\nlog_filepath : Path\n    The path to the log file.\nyml_path : Path\n    The path to the YAML file containing the experiment settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the experiment settings are logged successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">step_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">log_filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">yml_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.log.position", "modulename": "pytribeam.log", "qualname": "position", "kind": "function", "doc": "<p>Log the current position to the log file.</p>\n\n<p>This function logs the current position of the stage to the log file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>step_number : int\n    The step number for the experiment.\nstep_name : str\n    The name of the step.\nslice_number : int\n    The slice number for the experiment.\nlog_filepath : Path\n    The path to the log file.\ndataset_name : str\n    The name of the dataset to log the position to.\ncurrent_position : tbt.StagePositionUser\n    The current position of the stage.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the current position is logged successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">step_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">log_filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">current_position</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.log.laser_power", "modulename": "pytribeam.log", "qualname": "laser_power", "kind": "function", "doc": "<p>Log the laser power to the log file.</p>\n\n<p>This function logs the laser power to the log file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>step_number : int\n    The step number for the experiment.\nstep_name : str\n    The name of the step.\nslice_number : int\n    The slice number for the experiment.\nlog_filepath : Path\n    The path to the log file.\ndataset_name : str\n    The name of the dataset to log the laser power to.\npower_w : float\n    The laser power in watts.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the laser power is logged successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">step_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">log_filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">power_w</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.log.specimen_current", "modulename": "pytribeam.log", "qualname": "specimen_current", "kind": "function", "doc": "<p>Log the specimen current to the log file.</p>\n\n<p>This function logs the specimen current to the log file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>step_number : int\n    The step number for the experiment.\nstep_name : str\n    The name of the step.\nslice_number : int\n    The slice number for the experiment.\nlog_filepath : Path\n    The path to the log file.\ndataset_name : str\n    The name of the dataset to log the specimen current to.\nspecimen_current_na : float\n    The specimen current in nanoamperes.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the specimen current is logged successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">step_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">step_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">log_filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">specimen_current_na</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage", "modulename": "pytribeam.stage", "kind": "module", "doc": "<h1 id=\"stage-module\">Stage Module</h1>\n\n<p>This module contains functions for managing and controlling the stage in the microscope, including setting coordinate systems, moving the stage, and checking stage positions.</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>coordinate_system(microscope: tbt.Microscope, mode: tbt.StageCoordinateSystem = tbt.StageCoordinateSystem.RAW) -> bool\n    Set the stage coordinate system mode.</p>\n\n<p>stop(microscope: tbt.Microscope) -> None\n    Immediately stop all stage movement and exit.</p>\n\n<p>encoder_to_user_position(pos: tbt.StagePositionEncoder) -> tbt.StagePositionUser\n    Convert from encoder position (m/radian units) to user position (mm/deg units).</p>\n\n<p>user_to_encoder_position(pos: tbt.StagePositionUser) -> tbt.StagePositionEncoder\n    Convert from user position (mm/deg units) to encoder position (m/radian units).</p>\n\n<p>rotation_side_adjustment(rotation_side: tbt.RotationSide, initial_position_m: float, delta_pos_m: float) -> float\n    Adjust the translation stage destination based on the rotation side.</p>\n\n<p>target_position(stage: tbt.StageSettings, slice_number: int, slice_thickness_um: float) -> tbt.StagePositionUser\n    Calculate the target position for the stage movement.</p>\n\n<p>safe(microscope: tbt.Microscope, position: tbt.StagePositionUser) -> bool\n    Check if the target position is within the stage limits.</p>\n\n<p>axis_translational_in_range(current_pos_mm: float, target_pos_mm: float, stage_tolerance_um: float) -> bool\n    Determine whether the translation axis needs to be moved.</p>\n\n<p>axis_angular_in_range(current_pos_deg: float, target_pos_deg: float, stage_tolerance_deg: float) -> bool\n    Determine whether the angular axis needs to be moved.</p>\n\n<p>axis_in_range(microscope: tbt.Microscope, axis: tbt.StageAxis, target_position: tbt.StagePositionUser, stage_tolerance: tbt.StageTolerance = cs.Constants.default_stage_tolerance) -> bool\n    Check whether the position of the specified axis is within the stage tolerance.</p>\n\n<p>move_axis(microscope: tbt.Microscope, axis: tbt.StageAxis, target_position: tbt.StagePositionUser, num_attempts: int = cs.Constants.stage_move_attempts, stage_delay_s: float = cs.Constants.stage_move_delay_s) -> bool\n    Move the specified stage axis to the requested user target position.</p>\n\n<p>move_stage(microscope: tbt.Microscope, target_position: tbt.StagePositionUser, stage_tolerance: tbt.StageTolerance) -> bool\n    Move the stage axes if they are outside of tolerance.</p>\n\n<p>move_completed(microscope: tbt.Microscope, target_position: tbt.StagePositionUser, stage_tolerance: tbt.StageTolerance) -> bool\n    Check whether the stage is at the target position.</p>\n\n<p>home_stage(microscope: tbt.Microscope, stage_tolerance: tbt.StageTolerance = cs.Constants.default_stage_tolerance) -> bool\n    Move the stage to the home position defined in pytribeam.constants.</p>\n\n<p>move_to_position(microscope: tbt.Microscope, target_position: tbt.StagePositionUser, stage_tolerance: tbt.StageTolerance = cs.Constants.default_stage_tolerance) -> bool\n    Move the stage to the target position with error checking.</p>\n\n<p>_bad_axes_message(target_position: tbt.StagePositionUser, current_position: tbt.StagePositionUser, stage_tolerance: tbt.StageTolerance) -> str\n    Generate an error message for axes that are out of tolerance.</p>\n\n<p>step_start_position(microscope: tbt.Microscope, slice_number: int, operation: tbt.Step, general_settings: tbt.GeneralSettings) -> bool\n    Move the stage to the starting position for the step.</p>\n"}, {"fullname": "pytribeam.stage.coordinate_system", "modulename": "pytribeam.stage", "qualname": "coordinate_system", "kind": "function", "doc": "<p>Set the stage coordinate system mode.</p>\n\n<p>This function sets the stage coordinate system mode. The default mode is \"RAW\", which is recommended.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to set the stage coordinate system mode.\nmode : tbt.StageCoordinateSystem, optional\n    The stage coordinate system mode to set (default is tbt.StageCoordinateSystem.RAW).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the coordinate system mode is set successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageCoordinateSystem</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">StageCoordinateSystem</span><span class=\"o\">.</span><span class=\"n\">RAW</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Raw&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.stop", "modulename": "pytribeam.stage", "qualname": "stop", "kind": "function", "doc": "<p>Immediately stop all stage movement and exit.</p>\n\n<p>This function stops all stage movement and disconnects the microscope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to stop stage movement.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If the stage movement is halted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.encoder_to_user_position", "modulename": "pytribeam.stage", "qualname": "encoder_to_user_position", "kind": "function", "doc": "<p>Convert from encoder position (m/radian units) to user position (mm/deg units).</p>\n\n<p>This function converts a stage position from encoder units to user units.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>pos : tbt.StagePositionEncoder\n    The stage position in encoder units.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.StagePositionUser\n    The stage position in user units.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>TypeError\n    If the provided position is not of type tbt.StagePositionEncoder.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionEncoder</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.user_to_encoder_position", "modulename": "pytribeam.stage", "qualname": "user_to_encoder_position", "kind": "function", "doc": "<p>Convert from user position (mm/deg units) to encoder position (m/radian units).</p>\n\n<p>This function converts a stage position from user units to encoder units.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>pos : tbt.StagePositionUser\n    The stage position in user units.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.StagePositionEncoder\n    The stage position in encoder units.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>TypeError\n    If the provided position is not of type tbt.StagePositionUser.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionEncoder</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.rotation_side_adjustment", "modulename": "pytribeam.stage", "qualname": "rotation_side_adjustment", "kind": "function", "doc": "<p>Adjust the translation stage destination based on the rotation side.</p>\n\n<p>This function adjusts the translation stage destination based on the specified rotation side.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>rotation_side : tbt.RotationSide\n    The rotation side to consider for the adjustment.\ninitial_position_m : float\n    The initial position in meters.\ndelta_pos_m : float\n    The change in position in meters.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    The adjusted target position in meters.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the rotation side is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rotation_side</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">RotationSide</span>,</span><span class=\"param\">\t<span class=\"n\">initial_position_m</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">delta_pos_m</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.target_position", "modulename": "pytribeam.stage", "qualname": "target_position", "kind": "function", "doc": "<p>Calculate the target position for the stage movement.</p>\n\n<p>This function calculates the target position for the stage movement based on the sectioning axis, slice number, and slice thickness.</p>\n\n<p>For Z-axis sectioning:\n    - Z will always incrememnt toward pole piece (positive direction)\n    - Y will increment with slice number if a non-zero pre-tilt is used\n    - Y increment direction depends on rotation of the stage relative to machining operations</p>\n\n<p>For X-axis sectioning (not yet implemented, need to determine rotation_side_adjustment)\nFor Y-axis sectioning (not yet implemented, need to determine rotation_side_adjustment)</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>stage : tbt.StageSettings\n    The stage settings for the experiment.\nslice_number : int\n    The slice number for the experiment.\nslice_thickness_um : float\n    The slice thickness in micrometers.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.StagePositionUser\n    The target position for the stage movement.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the sectioning axis is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageSettings</span>,</span><span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">slice_thickness_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.safe", "modulename": "pytribeam.stage", "qualname": "safe", "kind": "function", "doc": "<p>Check if the target position is within the stage limits.</p>\n\n<p>This function checks if the target position is within the stage limits.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to check the stage limits.\nposition : tbt.StagePositionUser\n    The target position to check.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the target position is within the stage limits, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.axis_translational_in_range", "modulename": "pytribeam.stage", "qualname": "axis_translational_in_range", "kind": "function", "doc": "<p>Determine whether the translation axis needs to be moved.</p>\n\n<p>This function checks if the translation axis is within the specified tolerance.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>current_pos_mm : float\n    The current position of the translation axis in millimeters.\ntarget_pos_mm : float\n    The target position of the translation axis in millimeters.\nstage_tolerance_um : float\n    The tolerance for the translation axis in micrometers.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the translation axis is within the specified tolerance, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">current_pos_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">target_pos_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">stage_tolerance_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.axis_angular_in_range", "modulename": "pytribeam.stage", "qualname": "axis_angular_in_range", "kind": "function", "doc": "<p>Determine whether the angular axis needs to be moved.</p>\n\n<p>This function checks if the angular axis is within the specified tolerance.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>current_pos_deg : float\n    The current position of the angular axis in degrees.\ntarget_pos_deg : float\n    The target position of the angular axis in degrees.\nstage_tolerance_deg : float\n    The tolerance for the angular axis in degrees.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the angular axis is within the specified tolerance, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">current_pos_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">target_pos_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">stage_tolerance_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.axis_in_range", "modulename": "pytribeam.stage", "qualname": "axis_in_range", "kind": "function", "doc": "<p>Check whether the position of the specified axis is within the stage tolerance.</p>\n\n<p>This function checks if the position of the specified axis is within the stage tolerance.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to check the axis position.\naxis : tbt.StageAxis\n    The axis to check.\ntarget_position : tbt.StagePositionUser\n    The target position to check.\nstage_tolerance : tbt.StageTolerance, optional\n    The stage tolerance for the axis (default is cs.Constants.default_stage_tolerance).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the axis position is within the stage tolerance, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">axis</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageAxis</span>,</span><span class=\"param\">\t<span class=\"n\">target_position</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span>,</span><span class=\"param\">\t<span class=\"n\">stage_tolerance</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageTolerance</span> <span class=\"o\">=</span> <span class=\"n\">StageTolerance</span><span class=\"p\">(</span><span class=\"n\">translational_um</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">angular_deg</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.move_axis", "modulename": "pytribeam.stage", "qualname": "move_axis", "kind": "function", "doc": "<p>Move the specified stage axis to the requested user target position.</p>\n\n<p>This function moves the specified stage axis to the requested user target position.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to move the stage axis.\naxis : tbt.StageAxis\n    The stage axis to move.\ntarget_position : tbt.StagePositionUser\n    The target position to move the axis to.\nnum_attempts : int, optional\n    The number of attempts to move the axis (default is cs.Constants.stage_move_attempts).\nstage_delay_s : float, optional\n    The delay in seconds between attempts (default is cs.Constants.stage_move_delay_s).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the axis is moved to the target position successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">axis</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageAxis</span>,</span><span class=\"param\">\t<span class=\"n\">target_position</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span>,</span><span class=\"param\">\t<span class=\"n\">num_attempts</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">stage_delay_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.move_stage", "modulename": "pytribeam.stage", "qualname": "move_stage", "kind": "function", "doc": "<p>Move the stage axes if they are outside of tolerance.</p>\n\n<p>This function moves the stage axes to the target position if they are outside of the specified tolerance. The stage axes are moved one at a time in the following sequence:</p>\n\n<ul>\n<li>R-axis: if needed, tilt will be adjusted to 0 degrees first for safety</li>\n<li>X-axis</li>\n<li>Y-axis</li>\n<li>Z-axis</li>\n<li>T-axis</li>\n</ul>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to move the stage.\ntarget_position : tbt.StagePositionUser\n    The target position to move the stage to.\nstage_tolerance : tbt.StageTolerance\n    The stage tolerance for the movement.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the stage is moved to the target position successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">target_position</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span>,</span><span class=\"param\">\t<span class=\"n\">stage_tolerance</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageTolerance</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.move_completed", "modulename": "pytribeam.stage", "qualname": "move_completed", "kind": "function", "doc": "<p>Check whether the stage is at the target position.</p>\n\n<p>This function checks if the stage is at the target position within the specified tolerance.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to check the stage position.\ntarget_position : tbt.StagePositionUser\n    The target position to check.\nstage_tolerance : tbt.StageTolerance\n    The stage tolerance for the position.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the stage is at the target position, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">target_position</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span>,</span><span class=\"param\">\t<span class=\"n\">stage_tolerance</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageTolerance</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.home_stage", "modulename": "pytribeam.stage", "qualname": "home_stage", "kind": "function", "doc": "<p>Move the stage to the home position defined in pytribeam.constants.</p>\n\n<p>This function moves the stage to the home position defined in pytribeam.constants, which is a special case of the move_to_position function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to move the stage.\nstage_tolerance : tbt.StageTolerance, optional\n    The stage tolerance for the movement (default is cs.Constants.default_stage_tolerance).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the stage is moved to the home position successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">stage_tolerance</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageTolerance</span> <span class=\"o\">=</span> <span class=\"n\">StageTolerance</span><span class=\"p\">(</span><span class=\"n\">translational_um</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">angular_deg</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.move_to_position", "modulename": "pytribeam.stage", "qualname": "move_to_position", "kind": "function", "doc": "<p>Move the stage to the target position with error checking.</p>\n\n<p>This function moves the stage to the target position with error checking.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to move the stage.\ntarget_position : tbt.StagePositionUser\n    The target position to move the stage to.\nstage_tolerance : tbt.StageTolerance, optional\n    The stage tolerance for the movement (default is cs.Constants.default_stage_tolerance).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the stage is moved to the target position successfully.</p>\n\n<p>Raises\nValueError\n    If the target position is unsafe.\nSystemError\n    If the stage move did not execute correctly.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">target_position</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span>,</span><span class=\"param\">\t<span class=\"n\">stage_tolerance</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageTolerance</span> <span class=\"o\">=</span> <span class=\"n\">StageTolerance</span><span class=\"p\">(</span><span class=\"n\">translational_um</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">angular_deg</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.stage.step_start_position", "modulename": "pytribeam.stage", "qualname": "step_start_position", "kind": "function", "doc": "<p>Move the stage to the starting position for the step.</p>\n\n<p>This function moves the stage to the starting position for the step based on the slice number, operation, and general settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object for which to move the stage.\nslice_number : int\n    The slice number for the step.\noperation : tbt.Step\n    The step object containing the operation settings.\ngeneral_settings : tbt.GeneralSettings\n    The general settings object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the stage is moved to the starting position successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Step</span>,</span><span class=\"param\">\t<span class=\"n\">general_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneralSettings</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.types", "modulename": "pytribeam.types", "kind": "module", "doc": "<h1 id=\"types-module\">Types Module</h1>\n\n<p>This module contains classes for internal data types used in the microscope operations, including settings, patterns, and enums.</p>\n\n<h2 id=\"classes\">Classes</h2>\n\n<p>AdornedImage(as_structs.AdornedImage)\n    Adapter class for autoscript AdornedImage.</p>\n\n<p>AngularCorrectionMode(as_enums.AngularCorrectionMode)\n    Adapter class for autoscript AngularCorrectionMode.</p>\n\n<p>Limit(NamedTuple)\n    Limit range for a value.</p>\n\n<p>BeamType(Enum)\n    Specific enumerated beam types.</p>\n\n<p>BeamSettings(NamedTuple)\n    Settings for generic Beam types.</p>\n\n<p>StreamDepth(IntEnum)\n    Bit depth of stream patterns.</p>\n\n<p>ColorDepth(IntEnum)\n    Bit depth of images.</p>\n\n<p>CoordinateReference(Enum)\n    Enum of coordinate reference frames used for laser milling operations.</p>\n\n<p>DetectorMode(Enum)\n    Enum adapter for autoscript DetectorMode enum.</p>\n\n<p>DetectorType(Enum)\n    Enum adapter for autoscript DetectorType enum.</p>\n\n<p>Device(IntEnum)\n    Enum adapter for autoscript ImagingDevice enum.</p>\n\n<p>DummyFile(object)\n    Dummy file to suppress excessive printing.</p>\n\n<p>ExternalDeviceOEM(Enum)\n    Specific EBSD and EDS OEMs supported for collection.</p>\n\n<p>FIBPatternType(Enum)\n    Enum for FIB pattern types.</p>\n\n<p>FIBPatternScanDirection(Enum)\n    Enum for FIB pattern scan directions.</p>\n\n<p>FIBPatternScanType(Enum)\n    Enum for FIB pattern scan types.</p>\n\n<p>FocusPlaneGrid(NamedTuple)\n    Settings for performing a focus grid to fit plane for image tiling.</p>\n\n<p>GrabFrameSettings(as_structs.GrabFrameSettings)\n    Class adapter for autoscript GrabFrameSettings.</p>\n\n<p>ImageFileFormat(Enum)\n    Enum adapter for autoscript ImageFileFormat.</p>\n\n<p>ImageTileSettings(NamedTuple)\n    Settings for image tiling operations.</p>\n\n<p>IntervalType(Enum)\n    Enumerated interval types for limit checking.</p>\n\n<p>LaserPatternMode(Enum)\n    Enum for laser pattern modes.</p>\n\n<p>LaserWavelength(IntEnum)\n    Enum for laser wavelengths.</p>\n\n<p>Point(as_structs.Point)\n    Adapter class for autoscript Point.</p>\n\n<p>ProtectiveShutterMode(as_enums.ProtectiveShutterMode)\n    Adapter class for autoscript ProtectiveShutterMode.</p>\n\n<p>MapStatus(Enum)\n    Map status for EBSD or EDS.</p>\n\n<p>Microscope(SdbMicroscopeClient)\n    Class adapter for autoscript SdbMicroscopeClient.</p>\n\n<p>MicroscopeConnection(NamedTuple)\n    Connection to initialize microscope object.</p>\n\n<p>PretiltAngleDegrees(NamedTuple)\n    Specimen pretilt as measured with regard to the electron beam normal direction.</p>\n\n<p>Resolution(NamedTuple)\n    Arbitrary scan resolution, with limits of (12 &lt;= input &lt;= 65536).</p>\n\n<p>RetractableDeviceState(Enum)\n    Enum adapter for autoscript RetractableDeviceState enum.</p>\n\n<p>DeviceStatus(NamedTuple)\n    Status of connected devices.</p>\n\n<p>RotationSide(Enum)\n    Enum for specific rotation sides.</p>\n\n<p>ScanArea(NamedTuple)\n    Reduced scan area box, coordinate range in [0,1] from top left corner.</p>\n\n<p>ScanMode(IntEnum)\n    Enum adapter for autoscript ScanningMode enum.</p>\n\n<p>SectioningAxis(Enum)\n    Specific sectioning directions supported for 3D collection.</p>\n\n<p>StageAxis(as_enums.StageAxis)\n    Class adapter for autoscript StageAxis enum.</p>\n\n<p>StageCoordinateSystem(Enum)\n    Adapter enum class for autoscript CoordinateSystem.</p>\n\n<p>StageMovementMode(Enum)\n    Movement mode of the stage.</p>\n\n<p>StagePositionEncoder(as_structs.StagePosition)\n    Class adapter for autoscript StagePosition.</p>\n\n<p>StagePositionUser(NamedTuple)\n    Stage object with axis positions in units of mm and degrees.</p>\n\n<p>StageLimits(NamedTuple)\n    Limits for stage positions as determined by autoscript.</p>\n\n<p>StageTolerance(NamedTuple)\n    Tolerance for stage positions.</p>\n\n<p>StepType(Enum)\n    Specific step types supported for data collection.</p>\n\n<p>StreamPatternDefinition(as_structs.StreamPatternDefinition)\n    Adapter class for autoscript StreamPatternDefinition.</p>\n\n<p>TimeStamp(NamedTuple)\n    Timestamp with human-readable and UNIX time formats.</p>\n\n<p>ViewQuad(IntEnum)\n    Quadrant in xTUI to select for viewing/imaging.</p>\n\n<p>VacuumState(Enum)\n    Enum adapter for autoscript VacuumState enum.</p>\n\n<p>Beam(NamedTuple)\n    A generic Beam type, used as a template for concrete beam types.</p>\n\n<p>BeamLimits(NamedTuple)\n    Limits for beam settings as determined by autoscript.</p>\n\n<p>ElectronBeam(Beam)\n    The specific beam type 'electron'.</p>\n\n<p>GeneralSettings(NamedTuple)\n    General settings object.</p>\n\n<p>IonBeam(Beam)\n    The specific beam type 'ion'.</p>\n\n<p>Detector(NamedTuple)\n    Generic detector settings.</p>\n\n<p>PresetResolution(Resolution, Enum)\n    Enum adapter for autoscript ScanningResolution enum.</p>\n\n<p>Scan(NamedTuple)\n    Generic scan settings.</p>\n\n<p>ImageSettings(NamedTuple)\n    Image settings for the microscope.</p>\n\n<p>StageSettings(NamedTuple)\n    Settings for high-level stage movement operation.</p>\n\n<p>ScanLimits(NamedTuple)\n    Limits for beam scan settings as determined by autoscript.</p>\n\n<p>CustomSettings(NamedTuple)\n    Custom settings for running scripts.</p>\n\n<p>RectanglePattern(as_dynamics.RectanglePattern)\n    Adapter class for autoscript RectanglePattern.</p>\n\n<p>CleaningCrossSectionPattern(as_dynamics.CleaningCrossSectionPattern)\n    Adapter class for autoscript CleaningCrossSectionPattern.</p>\n\n<p>RegularCrossSectionPattern(as_dynamics.RegularCrossSectionPattern)\n    Adapter class for autoscript RegularCrossSectionPattern.</p>\n\n<p>StreamPattern(as_dynamics.StreamPattern)\n    Adapter class for autoscript StreamPattern.</p>\n\n<p>FIBBoxPattern(NamedTuple)\n    FIB box pattern settings.</p>\n\n<p>FIBRectanglePattern(FIBBoxPattern)\n    FIB rectangle pattern settings.</p>\n\n<p>FIBRegularCrossSection(FIBBoxPattern)\n    FIB regular cross-section pattern settings.</p>\n\n<p>FIBCleaningCrossSection(FIBBoxPattern)\n    FIB cleaning cross-section pattern settings.</p>\n\n<p>FIBStreamPattern(NamedTuple)\n    FIB stream pattern settings.</p>\n\n<p>FIBPattern(NamedTuple)\n    FIB pattern settings.</p>\n\n<p>FIBSettings(NamedTuple)\n    FIB settings for the microscope.</p>\n\n<p>EBSDGridType(IntEnum)\n    Enum for EBSD grid types.</p>\n\n<p>EBSDSettings(NamedTuple)\n    EBSD settings for the microscope.</p>\n\n<p>EDSSettings(NamedTuple)\n    EDS settings for the microscope.</p>\n\n<p>LaserPolarization(Enum)\n    Enum for laser polarization.</p>\n\n<p>LaserPulse(NamedTuple)\n    Laser pulse settings.</p>\n\n<p>LaserScanType(Enum)\n    Enum for laser scan types.</p>\n\n<p>LaserPatternType(Enum)\n    Enum for laser pattern types.</p>\n\n<p>LaserBoxPattern(NamedTuple)\n    Laser box pattern settings.</p>\n\n<p>LaserLinePattern(NamedTuple)\n    Laser line pattern settings.</p>\n\n<p>LaserPattern(NamedTuple)\n    Laser pattern settings.</p>\n\n<p>LaserState(NamedTuple)\n    Settings for all readable values from TFS Laser Control.</p>\n\n<p>LaserSettings(NamedTuple)\n    Laser settings for the microscope.</p>\n\n<p>Step(NamedTuple)\n    Step settings for the experiment.</p>\n\n<p>ExperimentSettings(NamedTuple)\n    Experiment settings for the experiment.</p>\n\n<p>YMLFormat(NamedTuple)\n    YAML format settings.</p>\n\n<p>YMLFormatVersion(YMLFormat, Enum)\n    Enum for YAML format versions.</p>\n"}, {"fullname": "pytribeam.types.AdornedImage", "modulename": "pytribeam.types", "qualname": "AdornedImage", "kind": "class", "doc": "<p>Adapter class for autoscript AdornedImage.</p>\n", "bases": "autoscript_sdb_microscope_client._structures_adorned_image.AdornedImage"}, {"fullname": "pytribeam.types.AngularCorrectionMode", "modulename": "pytribeam.types", "qualname": "AngularCorrectionMode", "kind": "class", "doc": "<p>Adapter class for autoscript AngularCorrectionMode.</p>\n", "bases": "autoscript_sdb_microscope_client.enumerations.AngularCorrectionMode"}, {"fullname": "pytribeam.types.Limit", "modulename": "pytribeam.types", "qualname": "Limit", "kind": "class", "doc": "<p>Limit range for a value.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>min : float\n    The minimum value of the limit.\nmax : float\n    The maximum value of the limit.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.Limit.__init__", "modulename": "pytribeam.types", "qualname": "Limit.__init__", "kind": "function", "doc": "<p>Create new instance of Limit(min, max)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">min</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"nb\">max</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "pytribeam.types.Limit.min", "modulename": "pytribeam.types", "qualname": "Limit.min", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.Limit.max", "modulename": "pytribeam.types", "qualname": "Limit.max", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.BeamType", "modulename": "pytribeam.types", "qualname": "BeamType", "kind": "class", "doc": "<p>Specific enumerated beam types.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>ELECTRON : str\n    Electron beam type.\nION : str\n    Ion beam type.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.BeamType.ELECTRON", "modulename": "pytribeam.types", "qualname": "BeamType.ELECTRON", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;BeamType.ELECTRON: &#x27;electron&#x27;&gt;"}, {"fullname": "pytribeam.types.BeamType.ION", "modulename": "pytribeam.types", "qualname": "BeamType.ION", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;BeamType.ION: &#x27;ion&#x27;&gt;"}, {"fullname": "pytribeam.types.BeamSettings", "modulename": "pytribeam.types", "qualname": "BeamSettings", "kind": "class", "doc": "<p>Settings for generic Beam types.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>voltage_kv : float\n    The voltage in kV.\ncurrent_na : float\n    The current in nA.\nhfw_mm : float\n    The horizontal field width in mm.\nworking_dist_mm : float\n    The working distance in mm.\nvoltage_tol_kv : float\n    The voltage tolerance in kV.\ncurrent_tol_na : float\n    The current tolerance in nA.\ndynamic_focus : bool\n    Whether dynamic focus is enabled (ebeam only).\ntilt_correction : bool\n    Whether tilt correction is enabled (ebeam only).</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.BeamSettings.__init__", "modulename": "pytribeam.types", "qualname": "BeamSettings.__init__", "kind": "function", "doc": "<p>Create new instance of BeamSettings(voltage_kv, current_na, hfw_mm, working_dist_mm, voltage_tol_kv, current_tol_na, dynamic_focus, tilt_correction)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">voltage_kv</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">current_na</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hfw_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">working_dist_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">voltage_tol_kv</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">current_tol_na</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dynamic_focus</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tilt_correction</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pytribeam.types.BeamSettings.voltage_kv", "modulename": "pytribeam.types", "qualname": "BeamSettings.voltage_kv", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.BeamSettings.current_na", "modulename": "pytribeam.types", "qualname": "BeamSettings.current_na", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.BeamSettings.hfw_mm", "modulename": "pytribeam.types", "qualname": "BeamSettings.hfw_mm", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.BeamSettings.working_dist_mm", "modulename": "pytribeam.types", "qualname": "BeamSettings.working_dist_mm", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.BeamSettings.voltage_tol_kv", "modulename": "pytribeam.types", "qualname": "BeamSettings.voltage_tol_kv", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.BeamSettings.current_tol_na", "modulename": "pytribeam.types", "qualname": "BeamSettings.current_tol_na", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.BeamSettings.dynamic_focus", "modulename": "pytribeam.types", "qualname": "BeamSettings.dynamic_focus", "kind": "variable", "doc": "<p>Alias for field number 6</p>\n", "annotation": ": bool"}, {"fullname": "pytribeam.types.BeamSettings.tilt_correction", "modulename": "pytribeam.types", "qualname": "BeamSettings.tilt_correction", "kind": "variable", "doc": "<p>Alias for field number 7</p>\n", "annotation": ": bool"}, {"fullname": "pytribeam.types.StreamDepth", "modulename": "pytribeam.types", "qualname": "StreamDepth", "kind": "class", "doc": "<p>Bit depth of stream patterns.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>BITS_16 : int\n    16-bit depth.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "pytribeam.types.StreamDepth.BITS_16", "modulename": "pytribeam.types", "qualname": "StreamDepth.BITS_16", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamDepth.BITS_16: 16&gt;"}, {"fullname": "pytribeam.types.ColorDepth", "modulename": "pytribeam.types", "qualname": "ColorDepth", "kind": "class", "doc": "<p>Bit depth of images.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>BITS_8 : int\n    8-bit depth.\nBITS_16 : int\n    16-bit depth.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "pytribeam.types.ColorDepth.BITS_8", "modulename": "pytribeam.types", "qualname": "ColorDepth.BITS_8", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ColorDepth.BITS_8: 8&gt;"}, {"fullname": "pytribeam.types.ColorDepth.BITS_16", "modulename": "pytribeam.types", "qualname": "ColorDepth.BITS_16", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ColorDepth.BITS_16: 16&gt;"}, {"fullname": "pytribeam.types.CoordinateReference", "modulename": "pytribeam.types", "qualname": "CoordinateReference", "kind": "class", "doc": "<p>Enum of coordinate reference frames used for laser milling operations.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>CENTER : str\n    Center coordinate reference.\nUPPER_CENTER : str\n    Upper center coordinate reference.\nUPPER_LEFT : str\n    Upper left coordinate reference.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.CoordinateReference.CENTER", "modulename": "pytribeam.types", "qualname": "CoordinateReference.CENTER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;CoordinateReference.CENTER: &#x27;center&#x27;&gt;"}, {"fullname": "pytribeam.types.CoordinateReference.UPPER_CENTER", "modulename": "pytribeam.types", "qualname": "CoordinateReference.UPPER_CENTER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;CoordinateReference.UPPER_CENTER: &#x27;uppercenter&#x27;&gt;"}, {"fullname": "pytribeam.types.CoordinateReference.UPPER_LEFT", "modulename": "pytribeam.types", "qualname": "CoordinateReference.UPPER_LEFT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;CoordinateReference.UPPER_LEFT: &#x27;upperleft&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode", "modulename": "pytribeam.types", "qualname": "DetectorMode", "kind": "class", "doc": "<p>Enum adapter for autoscript DetectorMode enum.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>ALL : str\n    All detector mode.\nA_MINUS_B : str\n    A minus B detector mode.\nANGULAR : str\n    Angular detector mode.\nANGULAR_PARTIAL : str\n    Angular partial detector mode.\nANGULAR_PARTIAL_COMPLEMENT : str\n    Angular partial complement detector mode.\nANULAR_A : str\n    Anular A detector mode.\nANULAR_B : str\n    Anular B detector mode.\nANULAR_C : str\n    Anular C detector mode.\nANULAR_D : str\n    Anular D detector mode.\nA_PLUS_B : str\n    A plus B detector mode.\nBACKSCATTER_ELECTRONS : str\n    Backscatter electrons detector mode.\nBEAM_DECELERATION : str\n    Beam deceleration detector mode.\nBRIGHT_FIELD : str\n    Bright field detector mode.\nCATHODO_LUMINESCENCE : str\n    Cathodo luminescence detector mode.\nCHARGE_NEUTRALIZATION : str\n    Charge neutralization detector mode.\nCUSTOM : str\n    Custom detector mode.\nCUSTOM2 : str\n    Custom2 detector mode.\nCUSTOM3 : str\n    Custom3 detector mode.\nCUSTOM4 : str\n    Custom4 detector mode.\nCUSTOM5 : str\n    Custom5 detector mode.\nDARK_FIELD : str\n    Dark field detector mode.\nDARK_FIELD1 : str\n    Dark field1 detector mode.\nDARK_FIELD2 : str\n    Dark field2 detector mode.\nDARK_FIELD3 : str\n    Dark field3 detector mode.\nDARK_FIELD4 : str\n    Dark field4 detector mode.\nDOWN_HOLE_VISIBILITY : str\n    Down hole visibility detector mode.\nHIGH_ANGLE : str\n    High angle detector mode.\nINNER_MINUS_OUTER : str\n    Inner minus outer detector mode.\nLOW_ANGLE : str\n    Low angle detector mode.\nMIX : str\n    Mix detector mode.\nNONE : str\n    None detector mode.\nSCINTILLATION : str\n    Scintillation detector mode.\nSECONDARY_ELECTRONS : str\n    Secondary electrons detector mode.\nSECONDARY_IONS : str\n    Secondary ions detector mode.\nSEGMENT_A : str\n    Segment A detector mode.\nSEGMENT_B : str\n    Segment B detector mode.\nTOPOGRAPHY : str\n    Topography detector mode.\nZ_CONTRAST : str\n    Z contrast detector mode.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.DetectorMode.ALL", "modulename": "pytribeam.types", "qualname": "DetectorMode.ALL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.ALL: &#x27;All&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.A_MINUS_B", "modulename": "pytribeam.types", "qualname": "DetectorMode.A_MINUS_B", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.A_MINUS_B: &#x27;AminusB&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.ANGULAR", "modulename": "pytribeam.types", "qualname": "DetectorMode.ANGULAR", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.ANGULAR: &#x27;Angular&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.ANGULAR_PARTIAL", "modulename": "pytribeam.types", "qualname": "DetectorMode.ANGULAR_PARTIAL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.ANGULAR_PARTIAL: &#x27;AngularPartial&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.ANGULAR_PARTIAL_COMPLEMENT", "modulename": "pytribeam.types", "qualname": "DetectorMode.ANGULAR_PARTIAL_COMPLEMENT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.ANGULAR_PARTIAL_COMPLEMENT: &#x27;AngularPartialComplement&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.ANULAR_A", "modulename": "pytribeam.types", "qualname": "DetectorMode.ANULAR_A", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.ANULAR_A: &#x27;AnularA&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.ANULAR_B", "modulename": "pytribeam.types", "qualname": "DetectorMode.ANULAR_B", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.ANULAR_B: &#x27;AnularB&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.ANULAR_C", "modulename": "pytribeam.types", "qualname": "DetectorMode.ANULAR_C", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.ANULAR_C: &#x27;AnularC&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.ANULAR_D", "modulename": "pytribeam.types", "qualname": "DetectorMode.ANULAR_D", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.ANULAR_D: &#x27;AnularD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.A_PLUS_B", "modulename": "pytribeam.types", "qualname": "DetectorMode.A_PLUS_B", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.A_PLUS_B: &#x27;AplusB&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.BACKSCATTER_ELECTRONS", "modulename": "pytribeam.types", "qualname": "DetectorMode.BACKSCATTER_ELECTRONS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.BACKSCATTER_ELECTRONS: &#x27;BackscatterElectrons&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.BEAM_DECELERATION", "modulename": "pytribeam.types", "qualname": "DetectorMode.BEAM_DECELERATION", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.BEAM_DECELERATION: &#x27;BeamDeceleration&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.BRIGHT_FIELD", "modulename": "pytribeam.types", "qualname": "DetectorMode.BRIGHT_FIELD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.BRIGHT_FIELD: &#x27;BrightField&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.CATHODO_LUMINESCENCE", "modulename": "pytribeam.types", "qualname": "DetectorMode.CATHODO_LUMINESCENCE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.CATHODO_LUMINESCENCE: &#x27;CathodoLuminescence&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.CHARGE_NEUTRALIZATION", "modulename": "pytribeam.types", "qualname": "DetectorMode.CHARGE_NEUTRALIZATION", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.CHARGE_NEUTRALIZATION: &#x27;ChargeNeutralization&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.CUSTOM", "modulename": "pytribeam.types", "qualname": "DetectorMode.CUSTOM", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.CUSTOM: &#x27;Custom&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.CUSTOM2", "modulename": "pytribeam.types", "qualname": "DetectorMode.CUSTOM2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.CUSTOM2: &#x27;Custom2&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.CUSTOM3", "modulename": "pytribeam.types", "qualname": "DetectorMode.CUSTOM3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.CUSTOM3: &#x27;Custom3&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.CUSTOM4", "modulename": "pytribeam.types", "qualname": "DetectorMode.CUSTOM4", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.CUSTOM4: &#x27;Custom4&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.CUSTOM5", "modulename": "pytribeam.types", "qualname": "DetectorMode.CUSTOM5", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.CUSTOM5: &#x27;Custom5&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.DARK_FIELD", "modulename": "pytribeam.types", "qualname": "DetectorMode.DARK_FIELD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.DARK_FIELD: &#x27;DarkField&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.DARK_FIELD1", "modulename": "pytribeam.types", "qualname": "DetectorMode.DARK_FIELD1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.DARK_FIELD1: &#x27;DarkField1&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.DARK_FIELD2", "modulename": "pytribeam.types", "qualname": "DetectorMode.DARK_FIELD2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.DARK_FIELD2: &#x27;DarkField2&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.DARK_FIELD3", "modulename": "pytribeam.types", "qualname": "DetectorMode.DARK_FIELD3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.DARK_FIELD3: &#x27;DarkField3&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.DARK_FIELD4", "modulename": "pytribeam.types", "qualname": "DetectorMode.DARK_FIELD4", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.DARK_FIELD4: &#x27;DarkField4&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.DOWN_HOLE_VISIBILITY", "modulename": "pytribeam.types", "qualname": "DetectorMode.DOWN_HOLE_VISIBILITY", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.DOWN_HOLE_VISIBILITY: &#x27;DownHoleVisibility&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.HIGH_ANGLE", "modulename": "pytribeam.types", "qualname": "DetectorMode.HIGH_ANGLE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.HIGH_ANGLE: &#x27;HighAngle&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.INNER_MINUS_OUTER", "modulename": "pytribeam.types", "qualname": "DetectorMode.INNER_MINUS_OUTER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.INNER_MINUS_OUTER: &#x27;InnerMinusOuter&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.LOW_ANGLE", "modulename": "pytribeam.types", "qualname": "DetectorMode.LOW_ANGLE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.LOW_ANGLE: &#x27;LowAngle&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.MIX", "modulename": "pytribeam.types", "qualname": "DetectorMode.MIX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.MIX: &#x27;Mix&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.NONE", "modulename": "pytribeam.types", "qualname": "DetectorMode.NONE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.NONE: &#x27;None&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.SCINTILLATION", "modulename": "pytribeam.types", "qualname": "DetectorMode.SCINTILLATION", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.SCINTILLATION: &#x27;Scintillation&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.SECONDARY_ELECTRONS", "modulename": "pytribeam.types", "qualname": "DetectorMode.SECONDARY_ELECTRONS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.SECONDARY_ELECTRONS: &#x27;SecondaryElectrons&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.SECONDARY_IONS", "modulename": "pytribeam.types", "qualname": "DetectorMode.SECONDARY_IONS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.SECONDARY_IONS: &#x27;SecondaryIons&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.SEGMENT_A", "modulename": "pytribeam.types", "qualname": "DetectorMode.SEGMENT_A", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.SEGMENT_A: &#x27;SegmentA&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.SEGMENT_B", "modulename": "pytribeam.types", "qualname": "DetectorMode.SEGMENT_B", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.SEGMENT_B: &#x27;SegmentB&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.TOPOGRAPHY", "modulename": "pytribeam.types", "qualname": "DetectorMode.TOPOGRAPHY", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.TOPOGRAPHY: &#x27;Topography&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorMode.Z_CONTRAST", "modulename": "pytribeam.types", "qualname": "DetectorMode.Z_CONTRAST", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorMode.Z_CONTRAST: &#x27;ZContrast&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType", "modulename": "pytribeam.types", "qualname": "DetectorType", "kind": "class", "doc": "<p>Enum adapter for autoscript DetectorType enum.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>ABS : str\n    ABS detector type.\nBSD : str\n    BSD detector type.\nCBS : str\n    CBS detector type.\nCDEM : str\n    CDEM detector type.\nCRD : str\n    CRD detector type.\nDUAL_BSD : str\n    Dual BSD detector type.\nEBSD : str\n    EBSD detector type.\nEDS : str\n    EDS detector type.\nECD : str\n    ECD detector type.\nETD : str\n    ETD detector type.\nEXTERNAL : str\n    External detector type.\nGAS : str\n    GAD detector type.\nGBSD : str\n    GBSD detector type.\nGSED : str\n    GSED detector type.\nHIRES_OPTICAL : str\n    HiRes Optical detector type.\nHIRES_OPTICAL_LO_MAG : str\n    HiRes Optical Low Mag detector type.\nICE : str\n    ICE detector type.\nIN_COLUMN_BSD : str\n    In Column BSD detector type.\nIR : str\n    IR detector type.\nIR2 : str\n    IR2 detector type.\nIR_CAMERA : str\n    IR Camera detector type.\nLFD : str\n    LFD detector type.\nLVD : str\n    LVD detector type.\nLVSED : str\n    LVSED detector type.\nMD : str\n    MD detector type.\nMIX : str\n    Mix detector type.\nNONE : str\n    None detector type.\nPMT : str\n    PMT detector type.\nQUAD_BSD : str\n    Quad BSD detector type.\nSED : str\n    SED detector type.\nSINGLE_BSD : str\n    Single BSD detector type.\nSTEM3 : str\n    STEM3 detector type.\nSTEM3_PLUS : str\n    STEM3 Plus detector type.\nSTEM4 : str\n    STEM4 detector type.\nT1 : str\n    T1 detector type.\nT2 : str\n    T2 detector type.\nT3 : str\n    T3 detector type.\nTLD : str\n    TLD detector type.\nTLD2 : str\n    TLD2 detector type.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.DetectorType.ABS", "modulename": "pytribeam.types", "qualname": "DetectorType.ABS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.ABS: &#x27;ABS&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.BSD", "modulename": "pytribeam.types", "qualname": "DetectorType.BSD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.BSD: &#x27;BSD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.CBS", "modulename": "pytribeam.types", "qualname": "DetectorType.CBS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.CBS: &#x27;CBS&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.CDEM", "modulename": "pytribeam.types", "qualname": "DetectorType.CDEM", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.CDEM: &#x27;CDEM&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.CRD", "modulename": "pytribeam.types", "qualname": "DetectorType.CRD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.CRD: &#x27;CRD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.DUAL_BSD", "modulename": "pytribeam.types", "qualname": "DetectorType.DUAL_BSD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.DUAL_BSD: &#x27;DualBSD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.EBSD", "modulename": "pytribeam.types", "qualname": "DetectorType.EBSD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.EBSD: &#x27;EBSD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.EDS", "modulename": "pytribeam.types", "qualname": "DetectorType.EDS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.EDS: &#x27;EDS&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.ECD", "modulename": "pytribeam.types", "qualname": "DetectorType.ECD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.ECD: &#x27;ECD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.ETD", "modulename": "pytribeam.types", "qualname": "DetectorType.ETD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.ETD: &#x27;ETD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.EXTERNAL", "modulename": "pytribeam.types", "qualname": "DetectorType.EXTERNAL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.EXTERNAL: &#x27;External&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.GAS", "modulename": "pytribeam.types", "qualname": "DetectorType.GAS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.GAS: &#x27;GAD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.GBSD", "modulename": "pytribeam.types", "qualname": "DetectorType.GBSD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.GBSD: &#x27;GBSD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.GSED", "modulename": "pytribeam.types", "qualname": "DetectorType.GSED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.GSED: &#x27;GSED&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.HIRES_OPTICAL", "modulename": "pytribeam.types", "qualname": "DetectorType.HIRES_OPTICAL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.HIRES_OPTICAL: &#x27;HiResOptical&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.HIRES_OPTICAL_LO_MAG", "modulename": "pytribeam.types", "qualname": "DetectorType.HIRES_OPTICAL_LO_MAG", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.HIRES_OPTICAL_LO_MAG: &#x27;HiResOpticalLowMag&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.ICE", "modulename": "pytribeam.types", "qualname": "DetectorType.ICE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.ICE: &#x27;ICE&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.IN_COLUMN_BSD", "modulename": "pytribeam.types", "qualname": "DetectorType.IN_COLUMN_BSD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.IN_COLUMN_BSD: &#x27;InColumnBSD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.IR", "modulename": "pytribeam.types", "qualname": "DetectorType.IR", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.IR: &#x27;IR&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.IR2", "modulename": "pytribeam.types", "qualname": "DetectorType.IR2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.IR2: &#x27;IR2&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.IR_CAMERA", "modulename": "pytribeam.types", "qualname": "DetectorType.IR_CAMERA", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.IR_CAMERA: &#x27;IRCameraDetector&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.LFD", "modulename": "pytribeam.types", "qualname": "DetectorType.LFD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.LFD: &#x27;LFD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.LVD", "modulename": "pytribeam.types", "qualname": "DetectorType.LVD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.LVD: &#x27;LVD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.LVSED", "modulename": "pytribeam.types", "qualname": "DetectorType.LVSED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.LVSED: &#x27;LVSED&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.MD", "modulename": "pytribeam.types", "qualname": "DetectorType.MD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.MD: &#x27;Mirror&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.MIX", "modulename": "pytribeam.types", "qualname": "DetectorType.MIX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.MIX: &#x27;Mix&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.NONE", "modulename": "pytribeam.types", "qualname": "DetectorType.NONE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.NONE: &#x27;None&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.PMT", "modulename": "pytribeam.types", "qualname": "DetectorType.PMT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.PMT: &#x27;PMT&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.QUAD_BSD", "modulename": "pytribeam.types", "qualname": "DetectorType.QUAD_BSD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.QUAD_BSD: &#x27;QuadBSD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.SED", "modulename": "pytribeam.types", "qualname": "DetectorType.SED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.SED: &#x27;SED&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.SINGLE_BSD", "modulename": "pytribeam.types", "qualname": "DetectorType.SINGLE_BSD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.SINGLE_BSD: &#x27;SingleBSD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.STEM3", "modulename": "pytribeam.types", "qualname": "DetectorType.STEM3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.STEM3: &#x27;STEM3&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.STEM3_PLUS", "modulename": "pytribeam.types", "qualname": "DetectorType.STEM3_PLUS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.STEM3_PLUS: &#x27;STEM3_GMode&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.STEM4", "modulename": "pytribeam.types", "qualname": "DetectorType.STEM4", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.STEM4: &#x27;STEM4&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.T1", "modulename": "pytribeam.types", "qualname": "DetectorType.T1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.T1: &#x27;T1&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.T2", "modulename": "pytribeam.types", "qualname": "DetectorType.T2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.T2: &#x27;T2&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.T3", "modulename": "pytribeam.types", "qualname": "DetectorType.T3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.T3: &#x27;T3&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.TLD", "modulename": "pytribeam.types", "qualname": "DetectorType.TLD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.TLD: &#x27;TLD&#x27;&gt;"}, {"fullname": "pytribeam.types.DetectorType.TLD2", "modulename": "pytribeam.types", "qualname": "DetectorType.TLD2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;DetectorType.TLD2: &#x27;TLD2&#x27;&gt;"}, {"fullname": "pytribeam.types.Device", "modulename": "pytribeam.types", "qualname": "Device", "kind": "class", "doc": "<p>Enum adapter for autoscript ImagingDevice enum.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>ELECTRON_BEAM : int\n    Electron beam device.\nION_BEAM : int\n    Ion beam device.\nCCD_CAMERA : int\n    CCD camera device.\nIR_CAMERA : int\n    IR camera device.\nNAV_CAM : int\n    Navigation camera device.\nOPTICAL_MICROSCOPE : int\n    Optical microscope device.\nVOLUMESCOPE_APPROACH_CAMERA : int\n    Volumescope approach camera device.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "pytribeam.types.Device.ELECTRON_BEAM", "modulename": "pytribeam.types", "qualname": "Device.ELECTRON_BEAM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Device.ELECTRON_BEAM: 1&gt;"}, {"fullname": "pytribeam.types.Device.ION_BEAM", "modulename": "pytribeam.types", "qualname": "Device.ION_BEAM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Device.ION_BEAM: 2&gt;"}, {"fullname": "pytribeam.types.Device.CCD_CAMERA", "modulename": "pytribeam.types", "qualname": "Device.CCD_CAMERA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Device.CCD_CAMERA: 3&gt;"}, {"fullname": "pytribeam.types.Device.IR_CAMERA", "modulename": "pytribeam.types", "qualname": "Device.IR_CAMERA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Device.IR_CAMERA: 5&gt;"}, {"fullname": "pytribeam.types.Device.NAV_CAM", "modulename": "pytribeam.types", "qualname": "Device.NAV_CAM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Device.NAV_CAM: 4&gt;"}, {"fullname": "pytribeam.types.Device.OPTICAL_MICROSCOPE", "modulename": "pytribeam.types", "qualname": "Device.OPTICAL_MICROSCOPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Device.OPTICAL_MICROSCOPE: 6&gt;"}, {"fullname": "pytribeam.types.Device.VOLUMESCOPE_APPROACH_CAMERA", "modulename": "pytribeam.types", "qualname": "Device.VOLUMESCOPE_APPROACH_CAMERA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Device.VOLUMESCOPE_APPROACH_CAMERA: 7&gt;"}, {"fullname": "pytribeam.types.DummyFile", "modulename": "pytribeam.types", "qualname": "DummyFile", "kind": "class", "doc": "<p>Dummy file to suppress excessive printing.</p>\n"}, {"fullname": "pytribeam.types.DummyFile.write", "modulename": "pytribeam.types", "qualname": "DummyFile.write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selfself</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.types.ExternalDeviceOEM", "modulename": "pytribeam.types", "qualname": "ExternalDeviceOEM", "kind": "class", "doc": "<p>Specific EBSD and EDS OEMs supported for collection.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>OXFORD : str\n    Oxford OEM.\nEDAX : str\n    EDAX OEM.\nNONE : str\n    No OEM.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.ExternalDeviceOEM.OXFORD", "modulename": "pytribeam.types", "qualname": "ExternalDeviceOEM.OXFORD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;ExternalDeviceOEM.OXFORD: &#x27;Oxford&#x27;&gt;"}, {"fullname": "pytribeam.types.ExternalDeviceOEM.EDAX", "modulename": "pytribeam.types", "qualname": "ExternalDeviceOEM.EDAX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;ExternalDeviceOEM.EDAX: &#x27;EDAX&#x27;&gt;"}, {"fullname": "pytribeam.types.ExternalDeviceOEM.NONE", "modulename": "pytribeam.types", "qualname": "ExternalDeviceOEM.NONE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;ExternalDeviceOEM.NONE: None&gt;"}, {"fullname": "pytribeam.types.FIBPatternType", "modulename": "pytribeam.types", "qualname": "FIBPatternType", "kind": "class", "doc": "<p>Enum for FIB pattern types.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>RECTANGLE : str\n    Rectangle pattern type.\nREGULAR_CROSS_SECTION : str\n    Regular cross-section pattern type.\nCLEANING_CROSS_SECTION : str\n    Cleaning cross-section pattern type.\nSELECTED_AREA : str\n    Selected area pattern type.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.FIBPatternType.RECTANGLE", "modulename": "pytribeam.types", "qualname": "FIBPatternType.RECTANGLE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternType.RECTANGLE: &#x27;rectangle&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternType.REGULAR_CROSS_SECTION", "modulename": "pytribeam.types", "qualname": "FIBPatternType.REGULAR_CROSS_SECTION", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternType.REGULAR_CROSS_SECTION: &#x27;regular_cross_section&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternType.CLEANING_CROSS_SECTION", "modulename": "pytribeam.types", "qualname": "FIBPatternType.CLEANING_CROSS_SECTION", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternType.CLEANING_CROSS_SECTION: &#x27;cleaning_cross_section&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternType.SELECTED_AREA", "modulename": "pytribeam.types", "qualname": "FIBPatternType.SELECTED_AREA", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternType.SELECTED_AREA: &#x27;selected_area&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection", "kind": "class", "doc": "<p>Enum for FIB pattern scan directions.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>BOTTOM_TO_TOP : str\n    Bottom to top scan direction.\nDYNAMIC_ALL_DIRECTIONS : str\n    Dynamic all directions scan direction.\nDYNAMIC_INNER_TO_OUTER : str\n    Dynamic inner to outer scan direction.\nDYNAMIC_LEFT_TO_RIGHT : str\n    Dynamic left to right scan direction.\nDYNAMIC_TOP_TO_BOTTOM : str\n    Dynamic top to bottom scan direction.\nINNER_TO_OUTER : str\n    Inner to outer scan direction.\nLEFT_TO_RIGHT : str\n    Left to right scan direction.\nOUTER_TO_INNER : str\n    Outer to inner scan direction.\nRIGHT_TO_LEFT : str\n    Right to left scan direction.\nTOP_TO_BOTTOM : str\n    Top to bottom scan direction.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.BOTTOM_TO_TOP", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.BOTTOM_TO_TOP", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.BOTTOM_TO_TOP: &#x27;BottomToTop&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.DYNAMIC_ALL_DIRECTIONS", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.DYNAMIC_ALL_DIRECTIONS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.DYNAMIC_ALL_DIRECTIONS: &#x27;DynamicAllDirections&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.DYNAMIC_INNER_TO_OUTER", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.DYNAMIC_INNER_TO_OUTER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.DYNAMIC_INNER_TO_OUTER: &#x27;DynamicInnerToOuter&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.DYNAMIC_LEFT_TO_RIGHT", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.DYNAMIC_LEFT_TO_RIGHT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.DYNAMIC_LEFT_TO_RIGHT: &#x27;DynamicLeftToRight&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.DYNAMIC_TOP_TO_BOTTOM", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.DYNAMIC_TOP_TO_BOTTOM", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.DYNAMIC_TOP_TO_BOTTOM: &#x27;DynamicTopToBottom&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.INNER_TO_OUTER", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.INNER_TO_OUTER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.INNER_TO_OUTER: &#x27;InnerToOuter&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.LEFT_TO_RIGHT", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.LEFT_TO_RIGHT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.LEFT_TO_RIGHT: &#x27;LeftToRight&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.OUTER_TO_INNER", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.OUTER_TO_INNER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.OUTER_TO_INNER: &#x27;OuterToInner&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.RIGHT_TO_LEFT", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.RIGHT_TO_LEFT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.RIGHT_TO_LEFT: &#x27;RightToLeft&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanDirection.TOP_TO_BOTTOM", "modulename": "pytribeam.types", "qualname": "FIBPatternScanDirection.TOP_TO_BOTTOM", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanDirection.TOP_TO_BOTTOM: &#x27;TopToBottom&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanType", "modulename": "pytribeam.types", "qualname": "FIBPatternScanType", "kind": "class", "doc": "<p>Enum for FIB pattern scan types.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>RASTER : str\n    Raster scan type.\nSERPENTINE : str\n    Serpentine scan type.\nCIRCULAR : str\n    Circular scan type (not yet supported by pyTriBeam).</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.FIBPatternScanType.RASTER", "modulename": "pytribeam.types", "qualname": "FIBPatternScanType.RASTER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanType.RASTER: &#x27;Raster&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanType.SERPENTINE", "modulename": "pytribeam.types", "qualname": "FIBPatternScanType.SERPENTINE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanType.SERPENTINE: &#x27;Serpentine&#x27;&gt;"}, {"fullname": "pytribeam.types.FIBPatternScanType.CIRCULAR", "modulename": "pytribeam.types", "qualname": "FIBPatternScanType.CIRCULAR", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;FIBPatternScanType.CIRCULAR: &#x27;Circular&#x27;&gt;"}, {"fullname": "pytribeam.types.FocusPlaneGrid", "modulename": "pytribeam.types", "qualname": "FocusPlaneGrid", "kind": "class", "doc": "<p>Settings for performing a focus grid to fit plane for image tiling.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>num_grid_points_x : int\n    Number of grid points in the x direction.\nnum_grid_points_y : int\n    Number of grid points in the y direction.\ngrid_dx_um : float\n    Grid spacing in the x direction in micrometers.\ngrid_dy_um : float\n    Grid spacing in the y direction in micrometers.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.FocusPlaneGrid.__init__", "modulename": "pytribeam.types", "qualname": "FocusPlaneGrid.__init__", "kind": "function", "doc": "<p>Create new instance of FocusPlaneGrid(num_grid_points_x, num_grid_points_y, grid_dx_um, grid_dy_um)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_grid_points_x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_grid_points_y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">grid_dx_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">grid_dy_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "pytribeam.types.FocusPlaneGrid.num_grid_points_x", "modulename": "pytribeam.types", "qualname": "FocusPlaneGrid.num_grid_points_x", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.FocusPlaneGrid.num_grid_points_y", "modulename": "pytribeam.types", "qualname": "FocusPlaneGrid.num_grid_points_y", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.FocusPlaneGrid.grid_dx_um", "modulename": "pytribeam.types", "qualname": "FocusPlaneGrid.grid_dx_um", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.FocusPlaneGrid.grid_dy_um", "modulename": "pytribeam.types", "qualname": "FocusPlaneGrid.grid_dy_um", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.GrabFrameSettings", "modulename": "pytribeam.types", "qualname": "GrabFrameSettings", "kind": "class", "doc": "<p>Adapter Class for autoscript GrabFrameSettings.</p>\n", "bases": "autoscript_sdb_microscope_client.structures.GrabFrameSettings"}, {"fullname": "pytribeam.types.ImageFileFormat", "modulename": "pytribeam.types", "qualname": "ImageFileFormat", "kind": "class", "doc": "<p>Enum adapter for autoscript ImageFileFormat.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>RAW : str\n    RAW image file format.\nTIFF : str\n    TIFF image file format.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.ImageFileFormat.RAW", "modulename": "pytribeam.types", "qualname": "ImageFileFormat.RAW", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;ImageFileFormat.RAW: &#x27;raw&#x27;&gt;"}, {"fullname": "pytribeam.types.ImageFileFormat.TIFF", "modulename": "pytribeam.types", "qualname": "ImageFileFormat.TIFF", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;ImageFileFormat.TIFF: &#x27;tiff&#x27;&gt;"}, {"fullname": "pytribeam.types.ImageTileSettings", "modulename": "pytribeam.types", "qualname": "ImageTileSettings", "kind": "class", "doc": "<p>Settings for image tiling operations.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>tile_origin : CoordinateReference\n    The origin of the tile.\nlength_x_mm : float\n    The length of the tile in the x direction in millimeters.\nlength_y_mm : float\n    The length of the tile in the y direction in millimeters.\noverlap_frac_x : float\n    The overlap fraction in the x direction.\noverlap_frac_y : float\n    The overlap fraction in the y direction.\nfocus_plane_grid : FocusPlaneGrid\n    The focus plane grid settings.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.ImageTileSettings.__init__", "modulename": "pytribeam.types", "qualname": "ImageTileSettings.__init__", "kind": "function", "doc": "<p>Create new instance of ImageTileSettings(tile_origin, length_x_mm, length_y_mm, overlap_frac_x, overlap_frac_y, focus_plane_grid)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tile_origin</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">CoordinateReference</span>,</span><span class=\"param\">\t<span class=\"n\">length_x_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">length_y_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">overlap_frac_x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">overlap_frac_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">focus_plane_grid</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FocusPlaneGrid</span></span>)</span>"}, {"fullname": "pytribeam.types.ImageTileSettings.tile_origin", "modulename": "pytribeam.types", "qualname": "ImageTileSettings.tile_origin", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.CoordinateReference"}, {"fullname": "pytribeam.types.ImageTileSettings.length_x_mm", "modulename": "pytribeam.types", "qualname": "ImageTileSettings.length_x_mm", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.ImageTileSettings.length_y_mm", "modulename": "pytribeam.types", "qualname": "ImageTileSettings.length_y_mm", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.ImageTileSettings.overlap_frac_x", "modulename": "pytribeam.types", "qualname": "ImageTileSettings.overlap_frac_x", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.ImageTileSettings.overlap_frac_y", "modulename": "pytribeam.types", "qualname": "ImageTileSettings.overlap_frac_y", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.ImageTileSettings.focus_plane_grid", "modulename": "pytribeam.types", "qualname": "ImageTileSettings.focus_plane_grid", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": pytribeam.types.FocusPlaneGrid"}, {"fullname": "pytribeam.types.IntervalType", "modulename": "pytribeam.types", "qualname": "IntervalType", "kind": "class", "doc": "<p>Enumerated interval types for limit checking.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>OPEN : str\n    Fully-open interval (a,b), does not include endpoints.\nCLOSED : str\n    Fully-closed interval [a,b], includes both endpoints.\nLEFT_OPEN : str\n    Half-open interval on left side (a,b], does not include 'a'.\nRIGHT_OPEN : str\n    Half-open interval on right side [a,b), does not include 'b'.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.IntervalType.OPEN", "modulename": "pytribeam.types", "qualname": "IntervalType.OPEN", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;IntervalType.OPEN: &#x27;open&#x27;&gt;"}, {"fullname": "pytribeam.types.IntervalType.CLOSED", "modulename": "pytribeam.types", "qualname": "IntervalType.CLOSED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;IntervalType.CLOSED: &#x27;closed&#x27;&gt;"}, {"fullname": "pytribeam.types.IntervalType.LEFT_OPEN", "modulename": "pytribeam.types", "qualname": "IntervalType.LEFT_OPEN", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;IntervalType.LEFT_OPEN: &#x27;left_open&#x27;&gt;"}, {"fullname": "pytribeam.types.IntervalType.RIGHT_OPEN", "modulename": "pytribeam.types", "qualname": "IntervalType.RIGHT_OPEN", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;IntervalType.RIGHT_OPEN: &#x27;right_open&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserPatternMode", "modulename": "pytribeam.types", "qualname": "LaserPatternMode", "kind": "class", "doc": "<p>Enum for laser pattern modes.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>COARSE : str\n    Coarse pattern mode.\nFINE : str\n    Fine pattern mode.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.LaserPatternMode.COARSE", "modulename": "pytribeam.types", "qualname": "LaserPatternMode.COARSE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserPatternMode.COARSE: &#x27;coarse&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserPatternMode.FINE", "modulename": "pytribeam.types", "qualname": "LaserPatternMode.FINE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserPatternMode.FINE: &#x27;fine&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserWavelength", "modulename": "pytribeam.types", "qualname": "LaserWavelength", "kind": "class", "doc": "<p>Enum for laser wavelengths.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>NM_515 : int\n    515 nm wavelength.\nNM_1030 : int\n    1030 nm wavelength.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "pytribeam.types.LaserWavelength.NM_515", "modulename": "pytribeam.types", "qualname": "LaserWavelength.NM_515", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;LaserWavelength.NM_515: 515&gt;"}, {"fullname": "pytribeam.types.LaserWavelength.NM_1030", "modulename": "pytribeam.types", "qualname": "LaserWavelength.NM_1030", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;LaserWavelength.NM_1030: 1030&gt;"}, {"fullname": "pytribeam.types.Point", "modulename": "pytribeam.types", "qualname": "Point", "kind": "class", "doc": "<p>Adapter class for autoscript Point.</p>\n", "bases": "autoscript_sdb_microscope_client._structures_primitives.Point"}, {"fullname": "pytribeam.types.ProtectiveShutterMode", "modulename": "pytribeam.types", "qualname": "ProtectiveShutterMode", "kind": "class", "doc": "<p>Adapter class for autoscript ProtectiveShutterMode.</p>\n", "bases": "autoscript_sdb_microscope_client.enumerations.ProtectiveShutterMode"}, {"fullname": "pytribeam.types.MapStatus", "modulename": "pytribeam.types", "qualname": "MapStatus", "kind": "class", "doc": "<p>Map status for EBSD or EDS.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>ACTIVE : str\n    Active map status.\nIDLE : str\n    Idle map status.\nERROR : str\n    Error map status.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.MapStatus.ACTIVE", "modulename": "pytribeam.types", "qualname": "MapStatus.ACTIVE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MapStatus.ACTIVE: &#x27;Active&#x27;&gt;"}, {"fullname": "pytribeam.types.MapStatus.IDLE", "modulename": "pytribeam.types", "qualname": "MapStatus.IDLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MapStatus.IDLE: &#x27;Idle&#x27;&gt;"}, {"fullname": "pytribeam.types.MapStatus.ERROR", "modulename": "pytribeam.types", "qualname": "MapStatus.ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MapStatus.ERROR: &#x27;Error&#x27;&gt;"}, {"fullname": "pytribeam.types.Microscope", "modulename": "pytribeam.types", "qualname": "Microscope", "kind": "class", "doc": "<p>Class adapter for autoscript SdbMicroscopeClient.</p>\n\n<p>Can add functionality with inheritance and super() in init, commented out below.</p>\n", "bases": "autoscript_sdb_microscope_client.sdb_microscope_client.SdbMicroscopeClient"}, {"fullname": "pytribeam.types.MicroscopeConnection", "modulename": "pytribeam.types", "qualname": "MicroscopeConnection", "kind": "class", "doc": "<p>Connection to initialize microscope object.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>host : str\n    The host for the microscope connection.\nport : int, optional\n    The port for the microscope connection (default is None).</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.MicroscopeConnection.__init__", "modulename": "pytribeam.types", "qualname": "MicroscopeConnection.__init__", "kind": "function", "doc": "<p>Create new instance of MicroscopeConnection(host, port)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pytribeam.types.MicroscopeConnection.host", "modulename": "pytribeam.types", "qualname": "MicroscopeConnection.host", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.MicroscopeConnection.port", "modulename": "pytribeam.types", "qualname": "MicroscopeConnection.port", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.PretiltAngleDegrees", "modulename": "pytribeam.types", "qualname": "PretiltAngleDegrees", "kind": "class", "doc": "<p>Specimen pretilt as measured with regard to the electron beam normal direction.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>value : float\n    The pretilt angle in degrees.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.PretiltAngleDegrees.__init__", "modulename": "pytribeam.types", "qualname": "PretiltAngleDegrees.__init__", "kind": "function", "doc": "<p>Create new instance of PretiltAngleDegrees(value,)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "pytribeam.types.PretiltAngleDegrees.value", "modulename": "pytribeam.types", "qualname": "PretiltAngleDegrees.value", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.Resolution", "modulename": "pytribeam.types", "qualname": "Resolution", "kind": "class", "doc": "<p>Arbitrary scan resolution, with limits of (12 &lt;= input &lt;= 65536).</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>width : int\n    The width of the resolution.\nheight : int\n    The height of the resolution.</p>\n\n<h2 id=\"properties\">Properties</h2>\n\n<p>value : str\n    The resolution as a string in the format \"widthxheight\".</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.Resolution.__init__", "modulename": "pytribeam.types", "qualname": "Resolution.__init__", "kind": "function", "doc": "<p>Create new instance of Resolution(width, height)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "pytribeam.types.Resolution.width", "modulename": "pytribeam.types", "qualname": "Resolution.width", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.Resolution.height", "modulename": "pytribeam.types", "qualname": "Resolution.height", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.Resolution.value", "modulename": "pytribeam.types", "qualname": "Resolution.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.RetractableDeviceState", "modulename": "pytribeam.types", "qualname": "RetractableDeviceState", "kind": "class", "doc": "<p>Enum adapter for autoscript RetractableDeviceState enum.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>BUSY : str\n    Busy state.\nERROR : str\n    Error state.\nINSERTED : str\n    Inserted state.\nOTHER : str\n    Other state.\nRETRACTED : str\n    Retracted state.\nINDERTERMINATE : str\n    Indeterminate state (for Oxford EBSD and EDS detectors).\nCONNECTED : str\n    Connected state (for laser status).</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.RetractableDeviceState.BUSY", "modulename": "pytribeam.types", "qualname": "RetractableDeviceState.BUSY", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RetractableDeviceState.BUSY: &#x27;Busy&#x27;&gt;"}, {"fullname": "pytribeam.types.RetractableDeviceState.ERROR", "modulename": "pytribeam.types", "qualname": "RetractableDeviceState.ERROR", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RetractableDeviceState.ERROR: &#x27;Error&#x27;&gt;"}, {"fullname": "pytribeam.types.RetractableDeviceState.INSERTED", "modulename": "pytribeam.types", "qualname": "RetractableDeviceState.INSERTED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RetractableDeviceState.INSERTED: &#x27;Inserted&#x27;&gt;"}, {"fullname": "pytribeam.types.RetractableDeviceState.OTHER", "modulename": "pytribeam.types", "qualname": "RetractableDeviceState.OTHER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RetractableDeviceState.OTHER: &#x27;Other&#x27;&gt;"}, {"fullname": "pytribeam.types.RetractableDeviceState.RETRACTED", "modulename": "pytribeam.types", "qualname": "RetractableDeviceState.RETRACTED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RetractableDeviceState.RETRACTED: &#x27;Retracted&#x27;&gt;"}, {"fullname": "pytribeam.types.RetractableDeviceState.INDERTERMINATE", "modulename": "pytribeam.types", "qualname": "RetractableDeviceState.INDERTERMINATE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RetractableDeviceState.INDERTERMINATE: &#x27;Indeterminate&#x27;&gt;"}, {"fullname": "pytribeam.types.RetractableDeviceState.CONNECTED", "modulename": "pytribeam.types", "qualname": "RetractableDeviceState.CONNECTED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RetractableDeviceState.CONNECTED: &#x27;Connected&#x27;&gt;"}, {"fullname": "pytribeam.types.DeviceStatus", "modulename": "pytribeam.types", "qualname": "DeviceStatus", "kind": "class", "doc": "<p>Status of connected devices.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>laser : RetractableDeviceState\n    The status of the laser.\nebsd : RetractableDeviceState\n    The status of the EBSD detector.\neds : RetractableDeviceState\n    The status of the EDS detector.</p>\n\n<h2 id=\"methods\">Methods</h2>\n\n<p>__str__():\n    Return a string representation of the device status.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.DeviceStatus.__init__", "modulename": "pytribeam.types", "qualname": "DeviceStatus.__init__", "kind": "function", "doc": "<p>Create new instance of DeviceStatus(laser, ebsd, eds)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">laser</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">RetractableDeviceState</span>,</span><span class=\"param\">\t<span class=\"n\">ebsd</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">RetractableDeviceState</span>,</span><span class=\"param\">\t<span class=\"n\">eds</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">RetractableDeviceState</span></span>)</span>"}, {"fullname": "pytribeam.types.DeviceStatus.laser", "modulename": "pytribeam.types", "qualname": "DeviceStatus.laser", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.RetractableDeviceState"}, {"fullname": "pytribeam.types.DeviceStatus.ebsd", "modulename": "pytribeam.types", "qualname": "DeviceStatus.ebsd", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.RetractableDeviceState"}, {"fullname": "pytribeam.types.DeviceStatus.eds", "modulename": "pytribeam.types", "qualname": "DeviceStatus.eds", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": pytribeam.types.RetractableDeviceState"}, {"fullname": "pytribeam.types.RotationSide", "modulename": "pytribeam.types", "qualname": "RotationSide", "kind": "class", "doc": "<p>Enum for specific rotation sides.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>FSL_MILL : str\n    FSL mill side.\nFIB_MILL : str\n    FIB mill side.\nEBEAM_NORMAL : str\n    E-beam normal side.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.RotationSide.FSL_MILL", "modulename": "pytribeam.types", "qualname": "RotationSide.FSL_MILL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RotationSide.FSL_MILL: &#x27;fsl_mill&#x27;&gt;"}, {"fullname": "pytribeam.types.RotationSide.FIB_MILL", "modulename": "pytribeam.types", "qualname": "RotationSide.FIB_MILL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RotationSide.FIB_MILL: &#x27;fib_mill&#x27;&gt;"}, {"fullname": "pytribeam.types.RotationSide.EBEAM_NORMAL", "modulename": "pytribeam.types", "qualname": "RotationSide.EBEAM_NORMAL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;RotationSide.EBEAM_NORMAL: &#x27;ebeam_normal&#x27;&gt;"}, {"fullname": "pytribeam.types.ScanArea", "modulename": "pytribeam.types", "qualname": "ScanArea", "kind": "class", "doc": "<p>Reduced scan area box, coordinate range in [0,1] from top left corner.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>left : float\n    The left coordinate of the scan area.\ntop : float\n    The top coordinate of the scan area.\nwidth : float\n    The width of the scan area.\nheight : float\n    The height of the scan area.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.ScanArea.__init__", "modulename": "pytribeam.types", "qualname": "ScanArea.__init__", "kind": "function", "doc": "<p>Create new instance of ScanArea(left, top, width, height)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">top</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "pytribeam.types.ScanArea.left", "modulename": "pytribeam.types", "qualname": "ScanArea.left", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.ScanArea.top", "modulename": "pytribeam.types", "qualname": "ScanArea.top", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.ScanArea.width", "modulename": "pytribeam.types", "qualname": "ScanArea.width", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.ScanArea.height", "modulename": "pytribeam.types", "qualname": "ScanArea.height", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.ScanMode", "modulename": "pytribeam.types", "qualname": "ScanMode", "kind": "class", "doc": "<p>Enum adapter for autoscript ScanningMode enum.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>FULL_FRAME : int\n    Full frame scan mode.\nLINE : int\n    Line scan mode.\nSPOT : int\n    Spot scan mode.\nREDUCED_AREA : int\n    Reduced area scan mode.\nEXTERNAL : int\n    External scan mode.\nCROSSOVER : int\n    Crossover scan mode.\nOTHER : int\n    Other scan mode.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "pytribeam.types.ScanMode.FULL_FRAME", "modulename": "pytribeam.types", "qualname": "ScanMode.FULL_FRAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanMode.FULL_FRAME: 1&gt;"}, {"fullname": "pytribeam.types.ScanMode.LINE", "modulename": "pytribeam.types", "qualname": "ScanMode.LINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanMode.LINE: 2&gt;"}, {"fullname": "pytribeam.types.ScanMode.SPOT", "modulename": "pytribeam.types", "qualname": "ScanMode.SPOT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanMode.SPOT: 3&gt;"}, {"fullname": "pytribeam.types.ScanMode.REDUCED_AREA", "modulename": "pytribeam.types", "qualname": "ScanMode.REDUCED_AREA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanMode.REDUCED_AREA: 4&gt;"}, {"fullname": "pytribeam.types.ScanMode.EXTERNAL", "modulename": "pytribeam.types", "qualname": "ScanMode.EXTERNAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanMode.EXTERNAL: 5&gt;"}, {"fullname": "pytribeam.types.ScanMode.CROSSOVER", "modulename": "pytribeam.types", "qualname": "ScanMode.CROSSOVER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanMode.CROSSOVER: 7&gt;"}, {"fullname": "pytribeam.types.ScanMode.OTHER", "modulename": "pytribeam.types", "qualname": "ScanMode.OTHER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ScanMode.OTHER: 6&gt;"}, {"fullname": "pytribeam.types.SectioningAxis", "modulename": "pytribeam.types", "qualname": "SectioningAxis", "kind": "class", "doc": "<p>Specific sectioning directions supported for 3D collection.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>X_POS : str\n    Positive X direction.\nX_NEG : str\n    Negative X direction.\nY_POS : str\n    Positive Y direction.\nY_NEG : str\n    Negative Y direction.\nZ : str\n    Z direction.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.SectioningAxis.X_POS", "modulename": "pytribeam.types", "qualname": "SectioningAxis.X_POS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;SectioningAxis.X_POS: &#x27;X+&#x27;&gt;"}, {"fullname": "pytribeam.types.SectioningAxis.X_NEG", "modulename": "pytribeam.types", "qualname": "SectioningAxis.X_NEG", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;SectioningAxis.X_NEG: &#x27;X-&#x27;&gt;"}, {"fullname": "pytribeam.types.SectioningAxis.Y_POS", "modulename": "pytribeam.types", "qualname": "SectioningAxis.Y_POS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;SectioningAxis.Y_POS: &#x27;Y+&#x27;&gt;"}, {"fullname": "pytribeam.types.SectioningAxis.Y_NEG", "modulename": "pytribeam.types", "qualname": "SectioningAxis.Y_NEG", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;SectioningAxis.Y_NEG: &#x27;Y-&#x27;&gt;"}, {"fullname": "pytribeam.types.SectioningAxis.Z", "modulename": "pytribeam.types", "qualname": "SectioningAxis.Z", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;SectioningAxis.Z: &#x27;Z&#x27;&gt;"}, {"fullname": "pytribeam.types.StageAxis", "modulename": "pytribeam.types", "qualname": "StageAxis", "kind": "class", "doc": "<p>Class adapter for autoscript StageAxis enum.</p>\n", "bases": "autoscript_sdb_microscope_client.enumerations.StageAxis"}, {"fullname": "pytribeam.types.StageCoordinateSystem", "modulename": "pytribeam.types", "qualname": "StageCoordinateSystem", "kind": "class", "doc": "<p>Adapter enum class for autoscript CoordinateSystem.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>RAW : str\n    RAW coordinate system.\nSPECIMEN : str\n    Specimen coordinate system.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.StageCoordinateSystem.RAW", "modulename": "pytribeam.types", "qualname": "StageCoordinateSystem.RAW", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StageCoordinateSystem.RAW: &#x27;Raw&#x27;&gt;"}, {"fullname": "pytribeam.types.StageCoordinateSystem.SPECIMEN", "modulename": "pytribeam.types", "qualname": "StageCoordinateSystem.SPECIMEN", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StageCoordinateSystem.SPECIMEN: &#x27;Specimen&#x27;&gt;"}, {"fullname": "pytribeam.types.StageMovementMode", "modulename": "pytribeam.types", "qualname": "StageMovementMode", "kind": "class", "doc": "<p>Movement mode of the stage.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>IN_PLANE : str\n    In-plane movement mode (for tiling operations).\nOUT_OF_PLANE : str\n    Out-of-plane movement mode (for sectioning operations).</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.StageMovementMode.IN_PLANE", "modulename": "pytribeam.types", "qualname": "StageMovementMode.IN_PLANE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StageMovementMode.IN_PLANE: &#x27;in_plane&#x27;&gt;"}, {"fullname": "pytribeam.types.StageMovementMode.OUT_OF_PLANE", "modulename": "pytribeam.types", "qualname": "StageMovementMode.OUT_OF_PLANE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StageMovementMode.OUT_OF_PLANE: &#x27;out_of_plane&#x27;&gt;"}, {"fullname": "pytribeam.types.StagePositionEncoder", "modulename": "pytribeam.types", "qualname": "StagePositionEncoder", "kind": "class", "doc": "<p>Class adapter for autoscript StagePosition.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>x : float\n    The x position in meters.\ny : float\n    The y position in meters.\nz : float\n    The z position in meters.\nr : float\n    The r position in radians.\nt : float\n    The t position in radians.\ncoordinate_system : str\n    The coordinate system.</p>\n", "bases": "autoscript_sdb_microscope_client._structures_positions.StagePosition"}, {"fullname": "pytribeam.types.StagePositionUser", "modulename": "pytribeam.types", "qualname": "StagePositionUser", "kind": "class", "doc": "<p>Stage object with axis positions in units of mm and degrees.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>x_mm : float\n    The x position in millimeters.\ny_mm : float\n    The y position in millimeters.\nz_mm : float\n    The z position in millimeters.\nr_deg : float\n    The r position in degrees.\nt_deg : float\n    The t position in degrees.\ncoordinate_system : StageCoordinateSystem\n    The coordinate system (default is StageCoordinateSystem.RAW).</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.StagePositionUser.__init__", "modulename": "pytribeam.types", "qualname": "StagePositionUser.__init__", "kind": "function", "doc": "<p>Create new instance of StagePositionUser(x_mm, y_mm, z_mm, r_deg, t_deg, coordinate_system)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">z_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">r_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">t_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">coordinate_system</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageCoordinateSystem</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">StageCoordinateSystem</span><span class=\"o\">.</span><span class=\"n\">RAW</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Raw&#39;</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "pytribeam.types.StagePositionUser.x_mm", "modulename": "pytribeam.types", "qualname": "StagePositionUser.x_mm", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.StagePositionUser.y_mm", "modulename": "pytribeam.types", "qualname": "StagePositionUser.y_mm", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.StagePositionUser.z_mm", "modulename": "pytribeam.types", "qualname": "StagePositionUser.z_mm", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.StagePositionUser.r_deg", "modulename": "pytribeam.types", "qualname": "StagePositionUser.r_deg", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.StagePositionUser.t_deg", "modulename": "pytribeam.types", "qualname": "StagePositionUser.t_deg", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.StagePositionUser.coordinate_system", "modulename": "pytribeam.types", "qualname": "StagePositionUser.coordinate_system", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": pytribeam.types.StageCoordinateSystem"}, {"fullname": "pytribeam.types.StageLimits", "modulename": "pytribeam.types", "qualname": "StageLimits", "kind": "class", "doc": "<p>Limits for stage positions as determined by autoscript.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>x_mm : Limit\n    The x position limit in millimeters.\ny_mm : Limit\n    The y position limit in millimeters.\nz_mm : Limit\n    The z position limit in millimeters.\nr_deg : Limit\n    The r position limit in degrees.\nt_deg : Limit\n    The t position limit in degrees.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.StageLimits.__init__", "modulename": "pytribeam.types", "qualname": "StageLimits.__init__", "kind": "function", "doc": "<p>Create new instance of StageLimits(x_mm, y_mm, z_mm, r_deg, t_deg)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_mm</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span>,</span><span class=\"param\">\t<span class=\"n\">y_mm</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span>,</span><span class=\"param\">\t<span class=\"n\">z_mm</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span>,</span><span class=\"param\">\t<span class=\"n\">r_deg</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span>,</span><span class=\"param\">\t<span class=\"n\">t_deg</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span></span>)</span>"}, {"fullname": "pytribeam.types.StageLimits.x_mm", "modulename": "pytribeam.types", "qualname": "StageLimits.x_mm", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.StageLimits.y_mm", "modulename": "pytribeam.types", "qualname": "StageLimits.y_mm", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.StageLimits.z_mm", "modulename": "pytribeam.types", "qualname": "StageLimits.z_mm", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.StageLimits.r_deg", "modulename": "pytribeam.types", "qualname": "StageLimits.r_deg", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.StageLimits.t_deg", "modulename": "pytribeam.types", "qualname": "StageLimits.t_deg", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.StageTolerance", "modulename": "pytribeam.types", "qualname": "StageTolerance", "kind": "class", "doc": "<p>Tolerance for stage positions.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>translational_um : float\n    The translational tolerance in micrometers.\nangular_deg : float\n    The angular tolerance in degrees.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.StageTolerance.__init__", "modulename": "pytribeam.types", "qualname": "StageTolerance.__init__", "kind": "function", "doc": "<p>Create new instance of StageTolerance(translational_um, angular_deg)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">translational_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">angular_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "pytribeam.types.StageTolerance.translational_um", "modulename": "pytribeam.types", "qualname": "StageTolerance.translational_um", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.StageTolerance.angular_deg", "modulename": "pytribeam.types", "qualname": "StageTolerance.angular_deg", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.StepType", "modulename": "pytribeam.types", "qualname": "StepType", "kind": "class", "doc": "<p>Specific step types supported for data collection.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>LASER : str\n    Laser step type.\nIMAGE : str\n    Image step type.\nFIB : str\n    FIB step type.\nEDS : str\n    EDS step type.\nEBSD : str\n    EBSD step type.\nCUSTOM : str\n    Custom step type.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.StepType.LASER", "modulename": "pytribeam.types", "qualname": "StepType.LASER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StepType.LASER: &#x27;laser&#x27;&gt;"}, {"fullname": "pytribeam.types.StepType.IMAGE", "modulename": "pytribeam.types", "qualname": "StepType.IMAGE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StepType.IMAGE: &#x27;image&#x27;&gt;"}, {"fullname": "pytribeam.types.StepType.FIB", "modulename": "pytribeam.types", "qualname": "StepType.FIB", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StepType.FIB: &#x27;fib&#x27;&gt;"}, {"fullname": "pytribeam.types.StepType.EDS", "modulename": "pytribeam.types", "qualname": "StepType.EDS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StepType.EDS: &#x27;eds&#x27;&gt;"}, {"fullname": "pytribeam.types.StepType.EBSD", "modulename": "pytribeam.types", "qualname": "StepType.EBSD", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StepType.EBSD: &#x27;ebsd&#x27;&gt;"}, {"fullname": "pytribeam.types.StepType.CUSTOM", "modulename": "pytribeam.types", "qualname": "StepType.CUSTOM", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;StepType.CUSTOM: &#x27;custom&#x27;&gt;"}, {"fullname": "pytribeam.types.StreamPatternDefinition", "modulename": "pytribeam.types", "qualname": "StreamPatternDefinition", "kind": "class", "doc": "<p>Adapter class for autoscript StreamPatternDefinition.</p>\n", "bases": "autoscript_sdb_microscope_client._structures_stream_pattern.StreamPatternDefinition"}, {"fullname": "pytribeam.types.TimeStamp", "modulename": "pytribeam.types", "qualname": "TimeStamp", "kind": "class", "doc": "<p>Timestamp with human-readable and UNIX time formats.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>human_readable : str\n    The human-readable timestamp.\nunix : int\n    The UNIX timestamp.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.TimeStamp.__init__", "modulename": "pytribeam.types", "qualname": "TimeStamp.__init__", "kind": "function", "doc": "<p>Create new instance of TimeStamp(human_readable, unix)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">human_readable</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">unix</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "pytribeam.types.TimeStamp.human_readable", "modulename": "pytribeam.types", "qualname": "TimeStamp.human_readable", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.TimeStamp.unix", "modulename": "pytribeam.types", "qualname": "TimeStamp.unix", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.ViewQuad", "modulename": "pytribeam.types", "qualname": "ViewQuad", "kind": "class", "doc": "<p>Quadrant in xTUI to select for viewing/imaging.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>UPPER_LEFT : int\n    Upper left quadrant.\nUPPER_RIGHT : int\n    Upper right quadrant.\nLOWER_LEFT : int\n    Lower left quadrant.\nLOWER_RIGHT : int\n    Lower right quadrant.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "pytribeam.types.ViewQuad.UPPER_LEFT", "modulename": "pytribeam.types", "qualname": "ViewQuad.UPPER_LEFT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ViewQuad.UPPER_LEFT: 1&gt;"}, {"fullname": "pytribeam.types.ViewQuad.UPPER_RIGHT", "modulename": "pytribeam.types", "qualname": "ViewQuad.UPPER_RIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ViewQuad.UPPER_RIGHT: 2&gt;"}, {"fullname": "pytribeam.types.ViewQuad.LOWER_LEFT", "modulename": "pytribeam.types", "qualname": "ViewQuad.LOWER_LEFT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ViewQuad.LOWER_LEFT: 3&gt;"}, {"fullname": "pytribeam.types.ViewQuad.LOWER_RIGHT", "modulename": "pytribeam.types", "qualname": "ViewQuad.LOWER_RIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ViewQuad.LOWER_RIGHT: 4&gt;"}, {"fullname": "pytribeam.types.VacuumState", "modulename": "pytribeam.types", "qualname": "VacuumState", "kind": "class", "doc": "<p>Enum adapter for autoscript VacuumState enum.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>ERROR : str\n    Error state.\nPUMPED : str\n    Pumped state.\nPUMPED_FOR_WAFER_EXCHANGE : str\n    Pumped for wafer exchange state.\nPUMPING : str\n    Pumping state.\nUNKNOWN : str\n    Unknown state.\nVENTED : str\n    Vented state.\nVENTING : str\n    Venting state.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.VacuumState.ERROR", "modulename": "pytribeam.types", "qualname": "VacuumState.ERROR", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;VacuumState.ERROR: &#x27;Error&#x27;&gt;"}, {"fullname": "pytribeam.types.VacuumState.PUMPED", "modulename": "pytribeam.types", "qualname": "VacuumState.PUMPED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;VacuumState.PUMPED: &#x27;Pumped&#x27;&gt;"}, {"fullname": "pytribeam.types.VacuumState.PUMPED_FOR_WAFER_EXCHANGE", "modulename": "pytribeam.types", "qualname": "VacuumState.PUMPED_FOR_WAFER_EXCHANGE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;VacuumState.PUMPED_FOR_WAFER_EXCHANGE: &#x27;PumpedForWaferExchange&#x27;&gt;"}, {"fullname": "pytribeam.types.VacuumState.PUMPING", "modulename": "pytribeam.types", "qualname": "VacuumState.PUMPING", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;VacuumState.PUMPING: &#x27;Pumping&#x27;&gt;"}, {"fullname": "pytribeam.types.VacuumState.UNKNOWN", "modulename": "pytribeam.types", "qualname": "VacuumState.UNKNOWN", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;VacuumState.UNKNOWN: &#x27;Unknown&#x27;&gt;"}, {"fullname": "pytribeam.types.VacuumState.VENTED", "modulename": "pytribeam.types", "qualname": "VacuumState.VENTED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;VacuumState.VENTED: &#x27;Vented&#x27;&gt;"}, {"fullname": "pytribeam.types.VacuumState.VENTING", "modulename": "pytribeam.types", "qualname": "VacuumState.VENTING", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;VacuumState.VENTING: &#x27;Venting&#x27;&gt;"}, {"fullname": "pytribeam.types.Beam", "modulename": "pytribeam.types", "qualname": "Beam", "kind": "class", "doc": "<p>A generic Beam type, used as a template for concrete beam types.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>settings : BeamSettings\n    The beam settings.\ntype : BeamType\n    The beam type.\ndefault_view : ViewQuad\n    The default view quadrant.\ndevice : Device\n    The beam device.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.Beam.__init__", "modulename": "pytribeam.types", "qualname": "Beam.__init__", "kind": "function", "doc": "<p>Create new instance of Beam(settings, type, default_view, device)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamSettings</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamType</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_view</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ViewQuad</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Device</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pytribeam.types.Beam.settings", "modulename": "pytribeam.types", "qualname": "Beam.settings", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.BeamSettings"}, {"fullname": "pytribeam.types.Beam.type", "modulename": "pytribeam.types", "qualname": "Beam.type", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.BeamType"}, {"fullname": "pytribeam.types.Beam.default_view", "modulename": "pytribeam.types", "qualname": "Beam.default_view", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": pytribeam.types.ViewQuad"}, {"fullname": "pytribeam.types.Beam.device", "modulename": "pytribeam.types", "qualname": "Beam.device", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pytribeam.types.Device"}, {"fullname": "pytribeam.types.BeamLimits", "modulename": "pytribeam.types", "qualname": "BeamLimits", "kind": "class", "doc": "<p>Limits for beam settings as determined by autoscript.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>voltage_kv : Limit\n    The voltage limit in kV.\ncurrent_na : Limit\n    The current limit in nA.\nhfw_mm : Limit\n    The horizontal field width limit in mm.\nworking_distance_mm : Limit\n    The working distance limit in mm.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.BeamLimits.__init__", "modulename": "pytribeam.types", "qualname": "BeamLimits.__init__", "kind": "function", "doc": "<p>Create new instance of BeamLimits(voltage_kv, current_na, hfw_mm, working_distance_mm)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">voltage_kv</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span>,</span><span class=\"param\">\t<span class=\"n\">current_na</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span>,</span><span class=\"param\">\t<span class=\"n\">hfw_mm</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span>,</span><span class=\"param\">\t<span class=\"n\">working_distance_mm</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span></span>)</span>"}, {"fullname": "pytribeam.types.BeamLimits.voltage_kv", "modulename": "pytribeam.types", "qualname": "BeamLimits.voltage_kv", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.BeamLimits.current_na", "modulename": "pytribeam.types", "qualname": "BeamLimits.current_na", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.BeamLimits.hfw_mm", "modulename": "pytribeam.types", "qualname": "BeamLimits.hfw_mm", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.BeamLimits.working_distance_mm", "modulename": "pytribeam.types", "qualname": "BeamLimits.working_distance_mm", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.ElectronBeam", "modulename": "pytribeam.types", "qualname": "ElectronBeam", "kind": "class", "doc": "<p>The specific beam type 'electron'.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>settings : BeamSettings\n    The beam settings.\ntype : BeamType\n    The beam type (default is BeamType.ELECTRON).\ndefault_view : ViewQuad\n    The default view quadrant (default is ViewQuad.UPPER_LEFT).\ndevice : Device\n    The beam device (default is Device.ELECTRON_BEAM).</p>\n", "bases": "Beam"}, {"fullname": "pytribeam.types.ElectronBeam.__init__", "modulename": "pytribeam.types", "qualname": "ElectronBeam.__init__", "kind": "function", "doc": "<p>Create new instance of Beam(settings, type, default_view, device)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamSettings</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamType</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_view</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ViewQuad</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Device</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pytribeam.types.ElectronBeam.settings", "modulename": "pytribeam.types", "qualname": "ElectronBeam.settings", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.BeamSettings"}, {"fullname": "pytribeam.types.ElectronBeam.type", "modulename": "pytribeam.types", "qualname": "ElectronBeam.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pytribeam.types.BeamType", "default_value": "&lt;BeamType.ELECTRON: &#x27;electron&#x27;&gt;"}, {"fullname": "pytribeam.types.ElectronBeam.default_view", "modulename": "pytribeam.types", "qualname": "ElectronBeam.default_view", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pytribeam.types.ViewQuad", "default_value": "&lt;ViewQuad.UPPER_LEFT: 1&gt;"}, {"fullname": "pytribeam.types.ElectronBeam.device", "modulename": "pytribeam.types", "qualname": "ElectronBeam.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pytribeam.types.Device", "default_value": "&lt;Device.ELECTRON_BEAM: 1&gt;"}, {"fullname": "pytribeam.types.GeneralSettings", "modulename": "pytribeam.types", "qualname": "GeneralSettings", "kind": "class", "doc": "<p>General settings object.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>yml_version : float\n    The YAML version.\nslice_thickness_um : float\n    The slice thickness in micrometers.\nmax_slice_number : int\n    The maximum slice number.\npre_tilt_deg : float\n    The pre-tilt angle in degrees.\nsectioning_axis : SectioningAxis\n    The sectioning axis.\nstage_tolerance : StageTolerance\n    The stage tolerance.\nconnection : MicroscopeConnection\n    The microscope connection settings.\nEBSD_OEM : ExternalDeviceOEM\n    The EBSD OEM.\nEDS_OEM : ExternalDeviceOEM\n    The EDS OEM.\nexp_dir : Path\n    The experiment directory.\nh5_log_name : str\n    The HDF5 log file name.\nstep_count : int\n    The step count.</p>\n\n<h2 id=\"properties\">Properties</h2>\n\n<p>log_filepath : Path\n    The log file path.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.GeneralSettings.__init__", "modulename": "pytribeam.types", "qualname": "GeneralSettings.__init__", "kind": "function", "doc": "<p>Create new instance of GeneralSettings(yml_version, slice_thickness_um, max_slice_number, pre_tilt_deg, sectioning_axis, stage_tolerance, connection, EBSD_OEM, EDS_OEM, exp_dir, h5_log_name, step_count)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">yml_version</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">slice_thickness_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">pre_tilt_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">sectioning_axis</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">SectioningAxis</span>,</span><span class=\"param\">\t<span class=\"n\">stage_tolerance</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageTolerance</span>,</span><span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">MicroscopeConnection</span>,</span><span class=\"param\">\t<span class=\"n\">EBSD_OEM</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ExternalDeviceOEM</span>,</span><span class=\"param\">\t<span class=\"n\">EDS_OEM</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ExternalDeviceOEM</span>,</span><span class=\"param\">\t<span class=\"n\">exp_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">h5_log_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">step_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "pytribeam.types.GeneralSettings.yml_version", "modulename": "pytribeam.types", "qualname": "GeneralSettings.yml_version", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.GeneralSettings.slice_thickness_um", "modulename": "pytribeam.types", "qualname": "GeneralSettings.slice_thickness_um", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.GeneralSettings.max_slice_number", "modulename": "pytribeam.types", "qualname": "GeneralSettings.max_slice_number", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.GeneralSettings.pre_tilt_deg", "modulename": "pytribeam.types", "qualname": "GeneralSettings.pre_tilt_deg", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.GeneralSettings.sectioning_axis", "modulename": "pytribeam.types", "qualname": "GeneralSettings.sectioning_axis", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": pytribeam.types.SectioningAxis"}, {"fullname": "pytribeam.types.GeneralSettings.stage_tolerance", "modulename": "pytribeam.types", "qualname": "GeneralSettings.stage_tolerance", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": pytribeam.types.StageTolerance"}, {"fullname": "pytribeam.types.GeneralSettings.connection", "modulename": "pytribeam.types", "qualname": "GeneralSettings.connection", "kind": "variable", "doc": "<p>Alias for field number 6</p>\n", "annotation": ": pytribeam.types.MicroscopeConnection"}, {"fullname": "pytribeam.types.GeneralSettings.EBSD_OEM", "modulename": "pytribeam.types", "qualname": "GeneralSettings.EBSD_OEM", "kind": "variable", "doc": "<p>Alias for field number 7</p>\n", "annotation": ": pytribeam.types.ExternalDeviceOEM"}, {"fullname": "pytribeam.types.GeneralSettings.EDS_OEM", "modulename": "pytribeam.types", "qualname": "GeneralSettings.EDS_OEM", "kind": "variable", "doc": "<p>Alias for field number 8</p>\n", "annotation": ": pytribeam.types.ExternalDeviceOEM"}, {"fullname": "pytribeam.types.GeneralSettings.exp_dir", "modulename": "pytribeam.types", "qualname": "GeneralSettings.exp_dir", "kind": "variable", "doc": "<p>Alias for field number 9</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "pytribeam.types.GeneralSettings.h5_log_name", "modulename": "pytribeam.types", "qualname": "GeneralSettings.h5_log_name", "kind": "variable", "doc": "<p>Alias for field number 10</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.GeneralSettings.step_count", "modulename": "pytribeam.types", "qualname": "GeneralSettings.step_count", "kind": "variable", "doc": "<p>Alias for field number 11</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.GeneralSettings.log_filepath", "modulename": "pytribeam.types", "qualname": "GeneralSettings.log_filepath", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "pytribeam.types.IonBeam", "modulename": "pytribeam.types", "qualname": "IonBeam", "kind": "class", "doc": "<p>The specific beam type 'ion'.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>settings : BeamSettings\n    The beam settings.\ntype : BeamType\n    The beam type (default is BeamType.ION).\ndefault_view : ViewQuad\n    The default view quadrant (default is ViewQuad.UPPER_RIGHT).\ndevice : Device\n    The beam device (default is Device.ION_BEAM).</p>\n", "bases": "Beam"}, {"fullname": "pytribeam.types.IonBeam.__init__", "modulename": "pytribeam.types", "qualname": "IonBeam.__init__", "kind": "function", "doc": "<p>Create new instance of Beam(settings, type, default_view, device)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamSettings</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BeamType</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_view</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ViewQuad</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Device</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pytribeam.types.IonBeam.settings", "modulename": "pytribeam.types", "qualname": "IonBeam.settings", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.BeamSettings"}, {"fullname": "pytribeam.types.IonBeam.type", "modulename": "pytribeam.types", "qualname": "IonBeam.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pytribeam.types.BeamType", "default_value": "&lt;BeamType.ION: &#x27;ion&#x27;&gt;"}, {"fullname": "pytribeam.types.IonBeam.default_view", "modulename": "pytribeam.types", "qualname": "IonBeam.default_view", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pytribeam.types.ViewQuad", "default_value": "&lt;ViewQuad.UPPER_RIGHT: 2&gt;"}, {"fullname": "pytribeam.types.IonBeam.device", "modulename": "pytribeam.types", "qualname": "IonBeam.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pytribeam.types.Device", "default_value": "&lt;Device.ION_BEAM: 2&gt;"}, {"fullname": "pytribeam.types.Detector", "modulename": "pytribeam.types", "qualname": "Detector", "kind": "class", "doc": "<p>Generic detector settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>type : DetectorType\n    The detector type.\nmode : DetectorMode\n    The detector mode.\nbrightness : float\n    The brightness setting.\ncontrast : float\n    The contrast setting.\nauto_cb_settings : ScanArea\n    The auto contrast/brightness settings.\ncustom_settings : dict\n    The custom settings.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.Detector.__init__", "modulename": "pytribeam.types", "qualname": "Detector.__init__", "kind": "function", "doc": "<p>Create new instance of Detector(type, mode, brightness, contrast, auto_cb_settings, custom_settings)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DetectorType</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DetectorMode</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">brightness</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">contrast</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auto_cb_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ScanArea</span> <span class=\"o\">=</span> <span class=\"n\">ScanArea</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">custom_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pytribeam.types.Detector.type", "modulename": "pytribeam.types", "qualname": "Detector.type", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.DetectorType"}, {"fullname": "pytribeam.types.Detector.mode", "modulename": "pytribeam.types", "qualname": "Detector.mode", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.DetectorMode"}, {"fullname": "pytribeam.types.Detector.brightness", "modulename": "pytribeam.types", "qualname": "Detector.brightness", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.Detector.contrast", "modulename": "pytribeam.types", "qualname": "Detector.contrast", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.Detector.auto_cb_settings", "modulename": "pytribeam.types", "qualname": "Detector.auto_cb_settings", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": pytribeam.types.ScanArea"}, {"fullname": "pytribeam.types.Detector.custom_settings", "modulename": "pytribeam.types", "qualname": "Detector.custom_settings", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": dict"}, {"fullname": "pytribeam.types.PresetResolution", "modulename": "pytribeam.types", "qualname": "PresetResolution", "kind": "class", "doc": "<p>Enum adapter for autoscript ScanningResolution enum.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>PRESET_512X442 : Resolution\n    512x442 resolution.\nPRESET_768X512 : Resolution\n    768x512 resolution.\nPRESET_1024X884 : Resolution\n    1024x884 resolution.\nPRESET_1536X1024 : Resolution\n    1536x1024 resolution.\nPRESET_2048X1768 : Resolution\n    2048x1768 resolution.\nPRESET_3072X2048 : Resolution\n    3072x2048 resolution.\nPRESET_4096X3536 : Resolution\n    4096x3536 resolution.\nPRESET_6144X4096 : Resolution\n    6144x4096 resolution.</p>\n", "bases": "Resolution, enum.Enum"}, {"fullname": "pytribeam.types.PresetResolution.PRESET_512X442", "modulename": "pytribeam.types", "qualname": "PresetResolution.PRESET_512X442", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PresetResolution.PRESET_512X442: Resolution(width=512, height=442)&gt;"}, {"fullname": "pytribeam.types.PresetResolution.PRESET_768X512", "modulename": "pytribeam.types", "qualname": "PresetResolution.PRESET_768X512", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PresetResolution.PRESET_768X512: Resolution(width=768, height=512)&gt;"}, {"fullname": "pytribeam.types.PresetResolution.PRESET_1024X884", "modulename": "pytribeam.types", "qualname": "PresetResolution.PRESET_1024X884", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PresetResolution.PRESET_1024X884: Resolution(width=1024, height=884)&gt;"}, {"fullname": "pytribeam.types.PresetResolution.PRESET_1536X1024", "modulename": "pytribeam.types", "qualname": "PresetResolution.PRESET_1536X1024", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PresetResolution.PRESET_1536X1024: Resolution(width=1536, height=1024)&gt;"}, {"fullname": "pytribeam.types.PresetResolution.PRESET_2048X1768", "modulename": "pytribeam.types", "qualname": "PresetResolution.PRESET_2048X1768", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PresetResolution.PRESET_2048X1768: Resolution(width=2048, height=1768)&gt;"}, {"fullname": "pytribeam.types.PresetResolution.PRESET_3072X2048", "modulename": "pytribeam.types", "qualname": "PresetResolution.PRESET_3072X2048", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PresetResolution.PRESET_3072X2048: Resolution(width=3072, height=2048)&gt;"}, {"fullname": "pytribeam.types.PresetResolution.PRESET_4096X3536", "modulename": "pytribeam.types", "qualname": "PresetResolution.PRESET_4096X3536", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PresetResolution.PRESET_4096X3536: Resolution(width=4096, height=3536)&gt;"}, {"fullname": "pytribeam.types.PresetResolution.PRESET_6144X4096", "modulename": "pytribeam.types", "qualname": "PresetResolution.PRESET_6144X4096", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PresetResolution.PRESET_6144X4096: Resolution(width=6144, height=4096)&gt;"}, {"fullname": "pytribeam.types.Scan", "modulename": "pytribeam.types", "qualname": "Scan", "kind": "class", "doc": "<p>Generic scan settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>rotation_deg : float\n    The scan rotation in degrees.\ndwell_time_us : float\n    The dwell time in microseconds.\nresolution : Resolution\n    The scan resolution.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.Scan.__init__", "modulename": "pytribeam.types", "qualname": "Scan.__init__", "kind": "function", "doc": "<p>Create new instance of Scan(rotation_deg, dwell_time_us, resolution)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rotation_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dwell_time_us</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Resolution</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pytribeam.types.Scan.rotation_deg", "modulename": "pytribeam.types", "qualname": "Scan.rotation_deg", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.Scan.dwell_time_us", "modulename": "pytribeam.types", "qualname": "Scan.dwell_time_us", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.Scan.resolution", "modulename": "pytribeam.types", "qualname": "Scan.resolution", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": pytribeam.types.Resolution"}, {"fullname": "pytribeam.types.ImageSettings", "modulename": "pytribeam.types", "qualname": "ImageSettings", "kind": "class", "doc": "<p>Image settings for the microscope.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>microscope : Microscope\n    The microscope object.\nbeam : Beam\n    The beam settings.\ndetector : Detector\n    The detector settings.\nscan : Scan\n    The scan settings.\nbit_depth : ColorDepth\n    The bit depth of the image.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.ImageSettings.__init__", "modulename": "pytribeam.types", "qualname": "ImageSettings.__init__", "kind": "function", "doc": "<p>Create new instance of ImageSettings(microscope, beam, detector, scan, bit_depth)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">detector</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Detector</span>,</span><span class=\"param\">\t<span class=\"n\">scan</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Scan</span>,</span><span class=\"param\">\t<span class=\"n\">bit_depth</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ColorDepth</span></span>)</span>"}, {"fullname": "pytribeam.types.ImageSettings.microscope", "modulename": "pytribeam.types", "qualname": "ImageSettings.microscope", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.Microscope"}, {"fullname": "pytribeam.types.ImageSettings.beam", "modulename": "pytribeam.types", "qualname": "ImageSettings.beam", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.Beam"}, {"fullname": "pytribeam.types.ImageSettings.detector", "modulename": "pytribeam.types", "qualname": "ImageSettings.detector", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": pytribeam.types.Detector"}, {"fullname": "pytribeam.types.ImageSettings.scan", "modulename": "pytribeam.types", "qualname": "ImageSettings.scan", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pytribeam.types.Scan"}, {"fullname": "pytribeam.types.ImageSettings.bit_depth", "modulename": "pytribeam.types", "qualname": "ImageSettings.bit_depth", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": pytribeam.types.ColorDepth"}, {"fullname": "pytribeam.types.StageSettings", "modulename": "pytribeam.types", "qualname": "StageSettings", "kind": "class", "doc": "<p>Settings for high-level stage movement operation.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>microscope : Microscope\n    The microscope object.\ninitial_position : StagePositionUser\n    The initial position of the stage.\npretilt_angle_deg : PretiltAngleDegrees\n    The pretilt angle in degrees.\nsectioning_axis : SectioningAxis\n    The sectioning axis.\nrotation_side : RotationSide\n    The rotation side.\nmovement_mode : StageMovementMode\n    The movement mode of the stage (default is StageMovementMode.OUT_OF_PLANE).</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.StageSettings.__init__", "modulename": "pytribeam.types", "qualname": "StageSettings.__init__", "kind": "function", "doc": "<p>Create new instance of StageSettings(microscope, initial_position, pretilt_angle_deg, sectioning_axis, rotation_side, movement_mode)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">initial_position</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StagePositionUser</span>,</span><span class=\"param\">\t<span class=\"n\">pretilt_angle_deg</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">PretiltAngleDegrees</span>,</span><span class=\"param\">\t<span class=\"n\">sectioning_axis</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">SectioningAxis</span>,</span><span class=\"param\">\t<span class=\"n\">rotation_side</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">RotationSide</span>,</span><span class=\"param\">\t<span class=\"n\">movement_mode</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageMovementMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">StageMovementMode</span><span class=\"o\">.</span><span class=\"n\">OUT_OF_PLANE</span><span class=\"p\">:</span> <span class=\"s1\">&#39;out_of_plane&#39;</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "pytribeam.types.StageSettings.microscope", "modulename": "pytribeam.types", "qualname": "StageSettings.microscope", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.Microscope"}, {"fullname": "pytribeam.types.StageSettings.initial_position", "modulename": "pytribeam.types", "qualname": "StageSettings.initial_position", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.StagePositionUser"}, {"fullname": "pytribeam.types.StageSettings.pretilt_angle_deg", "modulename": "pytribeam.types", "qualname": "StageSettings.pretilt_angle_deg", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": pytribeam.types.PretiltAngleDegrees"}, {"fullname": "pytribeam.types.StageSettings.sectioning_axis", "modulename": "pytribeam.types", "qualname": "StageSettings.sectioning_axis", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pytribeam.types.SectioningAxis"}, {"fullname": "pytribeam.types.StageSettings.rotation_side", "modulename": "pytribeam.types", "qualname": "StageSettings.rotation_side", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": pytribeam.types.RotationSide"}, {"fullname": "pytribeam.types.StageSettings.movement_mode", "modulename": "pytribeam.types", "qualname": "StageSettings.movement_mode", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": pytribeam.types.StageMovementMode"}, {"fullname": "pytribeam.types.ScanLimits", "modulename": "pytribeam.types", "qualname": "ScanLimits", "kind": "class", "doc": "<p>Limits for beam scan settings as determined by autoscript.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>rotation_deg : Limit\n    The rotation limit in degrees.\ndwell_us : Limit\n    The dwell time limit in microseconds.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.ScanLimits.__init__", "modulename": "pytribeam.types", "qualname": "ScanLimits.__init__", "kind": "function", "doc": "<p>Create new instance of ScanLimits(rotation_deg, dwell_us)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rotation_deg</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span>, </span><span class=\"param\"><span class=\"n\">dwell_us</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span></span>)</span>"}, {"fullname": "pytribeam.types.ScanLimits.rotation_deg", "modulename": "pytribeam.types", "qualname": "ScanLimits.rotation_deg", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.ScanLimits.dwell_us", "modulename": "pytribeam.types", "qualname": "ScanLimits.dwell_us", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.Limit"}, {"fullname": "pytribeam.types.CustomSettings", "modulename": "pytribeam.types", "qualname": "CustomSettings", "kind": "class", "doc": "<p>Custom settings for running scripts.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>script_path : Path\n    The path to the script.\nexecutable_path : Path\n    The path to the executable.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.CustomSettings.__init__", "modulename": "pytribeam.types", "qualname": "CustomSettings.__init__", "kind": "function", "doc": "<p>Create new instance of CustomSettings(script_path, executable_path)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">script_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">executable_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span>)</span>"}, {"fullname": "pytribeam.types.CustomSettings.script_path", "modulename": "pytribeam.types", "qualname": "CustomSettings.script_path", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "pytribeam.types.CustomSettings.executable_path", "modulename": "pytribeam.types", "qualname": "CustomSettings.executable_path", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "pytribeam.types.RectanglePattern", "modulename": "pytribeam.types", "qualname": "RectanglePattern", "kind": "class", "doc": "<p>Adapter class for autoscript RectanglePattern.</p>\n", "bases": "autoscript_sdb_microscope_client._dynamic_object_proxies.RectanglePattern"}, {"fullname": "pytribeam.types.CleaningCrossSectionPattern", "modulename": "pytribeam.types", "qualname": "CleaningCrossSectionPattern", "kind": "class", "doc": "<p>Adapter class for autoscript CleaningCrossSectionPattern.</p>\n", "bases": "autoscript_sdb_microscope_client._dynamic_object_proxies.CleaningCrossSectionPattern"}, {"fullname": "pytribeam.types.RegularCrossSectionPattern", "modulename": "pytribeam.types", "qualname": "RegularCrossSectionPattern", "kind": "class", "doc": "<p>Adapter class for autoscript RegularCrossSectionPattern.</p>\n", "bases": "autoscript_sdb_microscope_client._dynamic_object_proxies.RegularCrossSectionPattern"}, {"fullname": "pytribeam.types.StreamPattern", "modulename": "pytribeam.types", "qualname": "StreamPattern", "kind": "class", "doc": "<p>Adapter class for autoscript StreamPattern.</p>\n", "bases": "autoscript_sdb_microscope_client._dynamic_object_proxies.StreamPattern"}, {"fullname": "pytribeam.types.FIBBoxPattern", "modulename": "pytribeam.types", "qualname": "FIBBoxPattern", "kind": "class", "doc": "<p>FIB box pattern settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>center_um : Point\n    The center of the pattern in micrometers.\nwidth_um : float\n    The width of the pattern in micrometers.\nheight_um : float\n    The height of the pattern in micrometers.\ndepth_um : float\n    The depth of the pattern in micrometers.\nscan_direction : FIBPatternScanDirection\n    The scan direction of the pattern.\nscan_type : FIBPatternScanType\n    The scan type of the pattern.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.FIBBoxPattern.__init__", "modulename": "pytribeam.types", "qualname": "FIBBoxPattern.__init__", "kind": "function", "doc": "<p>Create new instance of FIBBoxPattern(center_um, width_um, height_um, depth_um, scan_direction, scan_type)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">center_um</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Point</span>,</span><span class=\"param\">\t<span class=\"n\">width_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">height_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">depth_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">scan_direction</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternScanDirection</span>,</span><span class=\"param\">\t<span class=\"n\">scan_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternScanType</span></span>)</span>"}, {"fullname": "pytribeam.types.FIBBoxPattern.center_um", "modulename": "pytribeam.types", "qualname": "FIBBoxPattern.center_um", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.Point"}, {"fullname": "pytribeam.types.FIBBoxPattern.width_um", "modulename": "pytribeam.types", "qualname": "FIBBoxPattern.width_um", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.FIBBoxPattern.height_um", "modulename": "pytribeam.types", "qualname": "FIBBoxPattern.height_um", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.FIBBoxPattern.depth_um", "modulename": "pytribeam.types", "qualname": "FIBBoxPattern.depth_um", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.FIBBoxPattern.scan_direction", "modulename": "pytribeam.types", "qualname": "FIBBoxPattern.scan_direction", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": pytribeam.types.FIBPatternScanDirection"}, {"fullname": "pytribeam.types.FIBBoxPattern.scan_type", "modulename": "pytribeam.types", "qualname": "FIBBoxPattern.scan_type", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": pytribeam.types.FIBPatternScanType"}, {"fullname": "pytribeam.types.FIBRectanglePattern", "modulename": "pytribeam.types", "qualname": "FIBRectanglePattern", "kind": "class", "doc": "<p>FIB rectangle pattern settings.</p>\n", "bases": "FIBBoxPattern"}, {"fullname": "pytribeam.types.FIBRectanglePattern.__init__", "modulename": "pytribeam.types", "qualname": "FIBRectanglePattern.__init__", "kind": "function", "doc": "<p>Create new instance of FIBBoxPattern(center_um, width_um, height_um, depth_um, scan_direction, scan_type)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">center_um</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Point</span>,</span><span class=\"param\">\t<span class=\"n\">width_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">height_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">depth_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">scan_direction</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternScanDirection</span>,</span><span class=\"param\">\t<span class=\"n\">scan_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternScanType</span></span>)</span>"}, {"fullname": "pytribeam.types.FIBRegularCrossSection", "modulename": "pytribeam.types", "qualname": "FIBRegularCrossSection", "kind": "class", "doc": "<p>FIB regular cross-section pattern settings.</p>\n", "bases": "FIBBoxPattern"}, {"fullname": "pytribeam.types.FIBRegularCrossSection.__init__", "modulename": "pytribeam.types", "qualname": "FIBRegularCrossSection.__init__", "kind": "function", "doc": "<p>Create new instance of FIBBoxPattern(center_um, width_um, height_um, depth_um, scan_direction, scan_type)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">center_um</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Point</span>,</span><span class=\"param\">\t<span class=\"n\">width_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">height_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">depth_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">scan_direction</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternScanDirection</span>,</span><span class=\"param\">\t<span class=\"n\">scan_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternScanType</span></span>)</span>"}, {"fullname": "pytribeam.types.FIBCleaningCrossSection", "modulename": "pytribeam.types", "qualname": "FIBCleaningCrossSection", "kind": "class", "doc": "<p>FIB cleaning cross-section pattern settings.</p>\n", "bases": "FIBBoxPattern"}, {"fullname": "pytribeam.types.FIBCleaningCrossSection.__init__", "modulename": "pytribeam.types", "qualname": "FIBCleaningCrossSection.__init__", "kind": "function", "doc": "<p>Create new instance of FIBBoxPattern(center_um, width_um, height_um, depth_um, scan_direction, scan_type)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">center_um</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Point</span>,</span><span class=\"param\">\t<span class=\"n\">width_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">height_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">depth_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">scan_direction</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternScanDirection</span>,</span><span class=\"param\">\t<span class=\"n\">scan_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternScanType</span></span>)</span>"}, {"fullname": "pytribeam.types.FIBStreamPattern", "modulename": "pytribeam.types", "qualname": "FIBStreamPattern", "kind": "class", "doc": "<p>FIB stream pattern settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>dwell_us : float\n    The dwell time in microseconds (must be a multiple of 25 ns).\nrepeats : int\n    The number of repeats.\nrecipe_file : Path\n    The path to the recipe file.\nmask_file : Path\n    The path to the mask file.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.FIBStreamPattern.__init__", "modulename": "pytribeam.types", "qualname": "FIBStreamPattern.__init__", "kind": "function", "doc": "<p>Create new instance of FIBStreamPattern(dwell_us, repeats, recipe_file, mask_file)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dwell_us</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">repeats</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">recipe_file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">mask_file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span>)</span>"}, {"fullname": "pytribeam.types.FIBStreamPattern.dwell_us", "modulename": "pytribeam.types", "qualname": "FIBStreamPattern.dwell_us", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.FIBStreamPattern.repeats", "modulename": "pytribeam.types", "qualname": "FIBStreamPattern.repeats", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.FIBStreamPattern.recipe_file", "modulename": "pytribeam.types", "qualname": "FIBStreamPattern.recipe_file", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "pytribeam.types.FIBStreamPattern.mask_file", "modulename": "pytribeam.types", "qualname": "FIBStreamPattern.mask_file", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "pytribeam.types.FIBPattern", "modulename": "pytribeam.types", "qualname": "FIBPattern", "kind": "class", "doc": "<p>FIB pattern settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>application : str\n    The application name.\ntype : FIBPatternType\n    The pattern type.\ngeometry : Union[FIBRectanglePattern, FIBRegularCrossSection, FIBCleaningCrossSection, FIBStreamPattern]\n    The pattern geometry.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.FIBPattern.__init__", "modulename": "pytribeam.types", "qualname": "FIBPattern.__init__", "kind": "function", "doc": "<p>Create new instance of FIBPattern(application, type, geometry)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">application</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPatternType</span>,</span><span class=\"param\">\t<span class=\"n\">geometry</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBRectanglePattern</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBRegularCrossSection</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBCleaningCrossSection</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBStreamPattern</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pytribeam.types.FIBPattern.application", "modulename": "pytribeam.types", "qualname": "FIBPattern.application", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.FIBPattern.type", "modulename": "pytribeam.types", "qualname": "FIBPattern.type", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.FIBPatternType"}, {"fullname": "pytribeam.types.FIBPattern.geometry", "modulename": "pytribeam.types", "qualname": "FIBPattern.geometry", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": Union[pytribeam.types.FIBRectanglePattern, pytribeam.types.FIBRegularCrossSection, pytribeam.types.FIBCleaningCrossSection, pytribeam.types.FIBStreamPattern]"}, {"fullname": "pytribeam.types.FIBSettings", "modulename": "pytribeam.types", "qualname": "FIBSettings", "kind": "class", "doc": "<p>FIB settings for the microscope.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>microscope : Microscope\n    The microscope object.\nimage : ImageSettings\n    The image settings.\nmill_beam : Beam\n    The milling beam settings.\npattern : FIBPattern\n    The FIB pattern settings.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.FIBSettings.__init__", "modulename": "pytribeam.types", "qualname": "FIBSettings.__init__", "kind": "function", "doc": "<p>Create new instance of FIBSettings(microscope, image, mill_beam, pattern)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span>,</span><span class=\"param\">\t<span class=\"n\">mill_beam</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Beam</span>,</span><span class=\"param\">\t<span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBPattern</span></span>)</span>"}, {"fullname": "pytribeam.types.FIBSettings.microscope", "modulename": "pytribeam.types", "qualname": "FIBSettings.microscope", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.Microscope"}, {"fullname": "pytribeam.types.FIBSettings.image", "modulename": "pytribeam.types", "qualname": "FIBSettings.image", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.ImageSettings"}, {"fullname": "pytribeam.types.FIBSettings.mill_beam", "modulename": "pytribeam.types", "qualname": "FIBSettings.mill_beam", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": pytribeam.types.Beam"}, {"fullname": "pytribeam.types.FIBSettings.pattern", "modulename": "pytribeam.types", "qualname": "FIBSettings.pattern", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pytribeam.types.FIBPattern"}, {"fullname": "pytribeam.types.EBSDGridType", "modulename": "pytribeam.types", "qualname": "EBSDGridType", "kind": "class", "doc": "<p>Enum for EBSD grid types.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>SQUARE : int\n    Square grid type.\nHEXAGONAL : int\n    Hexagonal grid type.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "pytribeam.types.EBSDGridType.SQUARE", "modulename": "pytribeam.types", "qualname": "EBSDGridType.SQUARE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EBSDGridType.SQUARE: 1&gt;"}, {"fullname": "pytribeam.types.EBSDGridType.HEXAGONAL", "modulename": "pytribeam.types", "qualname": "EBSDGridType.HEXAGONAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EBSDGridType.HEXAGONAL: 0&gt;"}, {"fullname": "pytribeam.types.EBSDSettings", "modulename": "pytribeam.types", "qualname": "EBSDSettings", "kind": "class", "doc": "<p>EBSD settings for the microscope.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>image : ImageSettings\n    The image settings.\nenable_eds : bool\n    Whether to enable EDS.\nenable_ebsd : bool\n    Whether to enable EBSD (default is True).</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.EBSDSettings.__init__", "modulename": "pytribeam.types", "qualname": "EBSDSettings.__init__", "kind": "function", "doc": "<p>Create new instance of EBSDSettings(image, enable_eds, enable_ebsd)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span>,</span><span class=\"param\">\t<span class=\"n\">enable_eds</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">enable_ebsd</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pytribeam.types.EBSDSettings.image", "modulename": "pytribeam.types", "qualname": "EBSDSettings.image", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.ImageSettings"}, {"fullname": "pytribeam.types.EBSDSettings.enable_eds", "modulename": "pytribeam.types", "qualname": "EBSDSettings.enable_eds", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": bool"}, {"fullname": "pytribeam.types.EBSDSettings.enable_ebsd", "modulename": "pytribeam.types", "qualname": "EBSDSettings.enable_ebsd", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": bool"}, {"fullname": "pytribeam.types.EDSSettings", "modulename": "pytribeam.types", "qualname": "EDSSettings", "kind": "class", "doc": "<p>EDS settings for the microscope.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>image : ImageSettings\n    The image settings.\nenable_eds : bool\n    Whether to enable EDS (default is True).</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.EDSSettings.__init__", "modulename": "pytribeam.types", "qualname": "EDSSettings.__init__", "kind": "function", "doc": "<p>Create new instance of EDSSettings(image, enable_eds)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span>, </span><span class=\"param\"><span class=\"n\">enable_eds</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pytribeam.types.EDSSettings.image", "modulename": "pytribeam.types", "qualname": "EDSSettings.image", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.ImageSettings"}, {"fullname": "pytribeam.types.EDSSettings.enable_eds", "modulename": "pytribeam.types", "qualname": "EDSSettings.enable_eds", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": bool"}, {"fullname": "pytribeam.types.LaserPolarization", "modulename": "pytribeam.types", "qualname": "LaserPolarization", "kind": "class", "doc": "<p>Enum for laser polarization.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>VERTICAL : str\n    Vertical polarization.\nHORIZONTAL : str\n    Horizontal polarization.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.LaserPolarization.VERTICAL", "modulename": "pytribeam.types", "qualname": "LaserPolarization.VERTICAL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserPolarization.VERTICAL: &#x27;vertical&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserPolarization.HORIZONTAL", "modulename": "pytribeam.types", "qualname": "LaserPolarization.HORIZONTAL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserPolarization.HORIZONTAL: &#x27;horizontal&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserPulse", "modulename": "pytribeam.types", "qualname": "LaserPulse", "kind": "class", "doc": "<p>Laser pulse settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>wavelength_nm : LaserWavelength\n    The laser wavelength in nanometers.\ndivider : int\n    The pulse divider.\nenergy_uj : float\n    The pulse energy in microjoules.\npolarization : LaserPolarization\n    The pulse polarization.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.LaserPulse.__init__", "modulename": "pytribeam.types", "qualname": "LaserPulse.__init__", "kind": "function", "doc": "<p>Create new instance of LaserPulse(wavelength_nm, divider, energy_uj, polarization)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wavelength_nm</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserWavelength</span>,</span><span class=\"param\">\t<span class=\"n\">divider</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">energy_uj</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">polarization</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPolarization</span></span>)</span>"}, {"fullname": "pytribeam.types.LaserPulse.wavelength_nm", "modulename": "pytribeam.types", "qualname": "LaserPulse.wavelength_nm", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.LaserWavelength"}, {"fullname": "pytribeam.types.LaserPulse.divider", "modulename": "pytribeam.types", "qualname": "LaserPulse.divider", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.LaserPulse.energy_uj", "modulename": "pytribeam.types", "qualname": "LaserPulse.energy_uj", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserPulse.polarization", "modulename": "pytribeam.types", "qualname": "LaserPulse.polarization", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pytribeam.types.LaserPolarization"}, {"fullname": "pytribeam.types.LaserScanType", "modulename": "pytribeam.types", "qualname": "LaserScanType", "kind": "class", "doc": "<p>Enum for laser scan types.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>SERPENTINE : str\n    Serpentine scan type.\nRASTER : str\n    Raster scan type.\nSINGLE : str\n    Single scan type.\nLAP : str\n    Lap scan type.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.LaserScanType.SERPENTINE", "modulename": "pytribeam.types", "qualname": "LaserScanType.SERPENTINE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserScanType.SERPENTINE: &#x27;serpentine&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserScanType.RASTER", "modulename": "pytribeam.types", "qualname": "LaserScanType.RASTER", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserScanType.RASTER: &#x27;raster&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserScanType.SINGLE", "modulename": "pytribeam.types", "qualname": "LaserScanType.SINGLE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserScanType.SINGLE: &#x27;single&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserScanType.LAP", "modulename": "pytribeam.types", "qualname": "LaserScanType.LAP", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserScanType.LAP: &#x27;lap&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserPatternType", "modulename": "pytribeam.types", "qualname": "LaserPatternType", "kind": "class", "doc": "<p>Enum for laser pattern types.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>BOX : str\n    Box pattern type.\nLINE : str\n    Line pattern type.</p>\n", "bases": "enum.Enum"}, {"fullname": "pytribeam.types.LaserPatternType.BOX", "modulename": "pytribeam.types", "qualname": "LaserPatternType.BOX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserPatternType.BOX: &#x27;box&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserPatternType.LINE", "modulename": "pytribeam.types", "qualname": "LaserPatternType.LINE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;LaserPatternType.LINE: &#x27;line&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserBoxPattern", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern", "kind": "class", "doc": "<p>Laser box pattern settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>passes : int\n    The number of passes.\nsize_x_um : float\n    The size in the x direction in micrometers.\nsize_y_um : float\n    The size in the y direction in micrometers.\npitch_x_um : float\n    The pitch in the x direction in micrometers.\npitch_y_um : float\n    The pitch in the y direction in micrometers.\nscan_type : LaserScanType\n    The scan type (Serpentine or Raster).\ncoordinate_ref : CoordinateReference\n    The coordinate reference (Center, UpperCenter, or UpperLeft).</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.LaserBoxPattern.__init__", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern.__init__", "kind": "function", "doc": "<p>Create new instance of LaserBoxPattern(passes, size_x_um, size_y_um, pitch_x_um, pitch_y_um, scan_type, coordinate_ref)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">passes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">size_x_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">size_y_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">pitch_x_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">pitch_y_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">scan_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserScanType</span>,</span><span class=\"param\">\t<span class=\"n\">coordinate_ref</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">CoordinateReference</span></span>)</span>"}, {"fullname": "pytribeam.types.LaserBoxPattern.passes", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern.passes", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.LaserBoxPattern.size_x_um", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern.size_x_um", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserBoxPattern.size_y_um", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern.size_y_um", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserBoxPattern.pitch_x_um", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern.pitch_x_um", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserBoxPattern.pitch_y_um", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern.pitch_y_um", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserBoxPattern.scan_type", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern.scan_type", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": pytribeam.types.LaserScanType"}, {"fullname": "pytribeam.types.LaserBoxPattern.coordinate_ref", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern.coordinate_ref", "kind": "variable", "doc": "<p>Alias for field number 6</p>\n", "annotation": ": pytribeam.types.CoordinateReference"}, {"fullname": "pytribeam.types.LaserBoxPattern.type", "modulename": "pytribeam.types", "qualname": "LaserBoxPattern.type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;LaserPatternType.BOX: &#x27;box&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserLinePattern", "modulename": "pytribeam.types", "qualname": "LaserLinePattern", "kind": "class", "doc": "<p>Laser line pattern settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>passes : int\n    The number of passes.\nsize_um : float\n    The size in micrometers.\npitch_um : float\n    The pitch in micrometers.\nscan_type : LaserScanType\n    The scan type (Single or Lap).</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.LaserLinePattern.__init__", "modulename": "pytribeam.types", "qualname": "LaserLinePattern.__init__", "kind": "function", "doc": "<p>Create new instance of LaserLinePattern(passes, size_um, pitch_um, scan_type)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">passes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">size_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">pitch_um</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">scan_type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserScanType</span></span>)</span>"}, {"fullname": "pytribeam.types.LaserLinePattern.passes", "modulename": "pytribeam.types", "qualname": "LaserLinePattern.passes", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.LaserLinePattern.size_um", "modulename": "pytribeam.types", "qualname": "LaserLinePattern.size_um", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserLinePattern.pitch_um", "modulename": "pytribeam.types", "qualname": "LaserLinePattern.pitch_um", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserLinePattern.scan_type", "modulename": "pytribeam.types", "qualname": "LaserLinePattern.scan_type", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pytribeam.types.LaserScanType"}, {"fullname": "pytribeam.types.LaserLinePattern.type", "modulename": "pytribeam.types", "qualname": "LaserLinePattern.type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;LaserPatternType.LINE: &#x27;line&#x27;&gt;"}, {"fullname": "pytribeam.types.LaserPattern", "modulename": "pytribeam.types", "qualname": "LaserPattern", "kind": "class", "doc": "<p>Laser pattern settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>mode : LaserPatternMode\n    The laser pattern mode.\nrotation_deg : float\n    The rotation in degrees.\ngeometry : Union[LaserBoxPattern, LaserLinePattern]\n    The pattern geometry.\npulses_per_pixel : int\n    The number of pulses per pixel.\npixel_dwell_ms : float\n    The pixel dwell time in milliseconds.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.LaserPattern.__init__", "modulename": "pytribeam.types", "qualname": "LaserPattern.__init__", "kind": "function", "doc": "<p>Create new instance of LaserPattern(mode, rotation_deg, geometry, pulses_per_pixel, pixel_dwell_ms)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPatternMode</span>,</span><span class=\"param\">\t<span class=\"n\">rotation_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">geometry</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserBoxPattern</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserLinePattern</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">pulses_per_pixel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pixel_dwell_ms</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pytribeam.types.LaserPattern.mode", "modulename": "pytribeam.types", "qualname": "LaserPattern.mode", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.LaserPatternMode"}, {"fullname": "pytribeam.types.LaserPattern.rotation_deg", "modulename": "pytribeam.types", "qualname": "LaserPattern.rotation_deg", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserPattern.geometry", "modulename": "pytribeam.types", "qualname": "LaserPattern.geometry", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": Union[pytribeam.types.LaserBoxPattern, pytribeam.types.LaserLinePattern]"}, {"fullname": "pytribeam.types.LaserPattern.pulses_per_pixel", "modulename": "pytribeam.types", "qualname": "LaserPattern.pulses_per_pixel", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.LaserPattern.pixel_dwell_ms", "modulename": "pytribeam.types", "qualname": "LaserPattern.pixel_dwell_ms", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserState", "modulename": "pytribeam.types", "qualname": "LaserState", "kind": "class", "doc": "<p>Settings for all readable values from TFS Laser Control.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>wavelength_nm : LaserWavelength\n    The laser wavelength in nanometers.\nfrequency_khz : float\n    The frequency in kilohertz.\npulse_divider : int\n    The pulse divider.\npulse_energy_uj : float\n    The pulse energy in microjoules.\nobjective_position_mm : float\n    The objective position in millimeters.\nbeam_shift_um : Point\n    The beam shift in micrometers.\npattern : LaserPattern\n    The laser pattern settings.\nexpected_pattern_duration_s : float\n    The expected pattern duration in seconds.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.LaserState.__init__", "modulename": "pytribeam.types", "qualname": "LaserState.__init__", "kind": "function", "doc": "<p>Create new instance of LaserState(wavelength_nm, frequency_khz, pulse_divider, pulse_energy_uj, objective_position_mm, beam_shift_um, pattern, expected_pattern_duration_s)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wavelength_nm</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserWavelength</span>,</span><span class=\"param\">\t<span class=\"n\">frequency_khz</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">pulse_divider</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">pulse_energy_uj</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">objective_position_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">beam_shift_um</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Point</span>,</span><span class=\"param\">\t<span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPattern</span>,</span><span class=\"param\">\t<span class=\"n\">expected_pattern_duration_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pytribeam.types.LaserState.wavelength_nm", "modulename": "pytribeam.types", "qualname": "LaserState.wavelength_nm", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.LaserWavelength"}, {"fullname": "pytribeam.types.LaserState.frequency_khz", "modulename": "pytribeam.types", "qualname": "LaserState.frequency_khz", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserState.pulse_divider", "modulename": "pytribeam.types", "qualname": "LaserState.pulse_divider", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.LaserState.pulse_energy_uj", "modulename": "pytribeam.types", "qualname": "LaserState.pulse_energy_uj", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserState.objective_position_mm", "modulename": "pytribeam.types", "qualname": "LaserState.objective_position_mm", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserState.beam_shift_um", "modulename": "pytribeam.types", "qualname": "LaserState.beam_shift_um", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": pytribeam.types.Point"}, {"fullname": "pytribeam.types.LaserState.pattern", "modulename": "pytribeam.types", "qualname": "LaserState.pattern", "kind": "variable", "doc": "<p>Alias for field number 6</p>\n", "annotation": ": pytribeam.types.LaserPattern"}, {"fullname": "pytribeam.types.LaserState.expected_pattern_duration_s", "modulename": "pytribeam.types", "qualname": "LaserState.expected_pattern_duration_s", "kind": "variable", "doc": "<p>Alias for field number 7</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserSettings", "modulename": "pytribeam.types", "qualname": "LaserSettings", "kind": "class", "doc": "<p>Laser settings for the microscope.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>microscope : Microscope\n    The microscope object.\npulse : LaserPulse\n    The laser pulse settings.\nobjective_position_mm : float\n    The objective position in millimeters.\nbeam_shift_um : Point\n    The beam shift in micrometers.\npattern : LaserPattern\n    The laser pattern settings.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.LaserSettings.__init__", "modulename": "pytribeam.types", "qualname": "LaserSettings.__init__", "kind": "function", "doc": "<p>Create new instance of LaserSettings(microscope, pulse, objective_position_mm, beam_shift_um, pattern)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">pulse</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPulse</span>,</span><span class=\"param\">\t<span class=\"n\">objective_position_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">beam_shift_um</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Point</span>,</span><span class=\"param\">\t<span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserPattern</span></span>)</span>"}, {"fullname": "pytribeam.types.LaserSettings.microscope", "modulename": "pytribeam.types", "qualname": "LaserSettings.microscope", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.Microscope"}, {"fullname": "pytribeam.types.LaserSettings.pulse", "modulename": "pytribeam.types", "qualname": "LaserSettings.pulse", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.LaserPulse"}, {"fullname": "pytribeam.types.LaserSettings.objective_position_mm", "modulename": "pytribeam.types", "qualname": "LaserSettings.objective_position_mm", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.LaserSettings.beam_shift_um", "modulename": "pytribeam.types", "qualname": "LaserSettings.beam_shift_um", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": pytribeam.types.Point"}, {"fullname": "pytribeam.types.LaserSettings.pattern", "modulename": "pytribeam.types", "qualname": "LaserSettings.pattern", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": pytribeam.types.LaserPattern"}, {"fullname": "pytribeam.types.Step", "modulename": "pytribeam.types", "qualname": "Step", "kind": "class", "doc": "<p>Step settings for the experiment.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>type : StepType\n    The step type.\nname : str\n    The step name.\nnumber : int\n    The step number.\nfrequency : int\n    The step frequency.\nstage : StageSettings\n    The stage settings.\noperation_settings : Union[CustomSettings, EBSDSettings, EDSSettings, ImageSettings, FIBSettings, LaserSettings]\n    The operation settings for the step.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.Step.__init__", "modulename": "pytribeam.types", "qualname": "Step.__init__", "kind": "function", "doc": "<p>Create new instance of Step(type, name, number, frequency, stage, operation_settings)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StepType</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">frequency</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StageSettings</span>,</span><span class=\"param\">\t<span class=\"n\">operation_settings</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">CustomSettings</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">EBSDSettings</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">EDSSettings</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ImageSettings</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FIBSettings</span><span class=\"p\">,</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">LaserSettings</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pytribeam.types.Step.type", "modulename": "pytribeam.types", "qualname": "Step.type", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.StepType"}, {"fullname": "pytribeam.types.Step.name", "modulename": "pytribeam.types", "qualname": "Step.name", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.Step.number", "modulename": "pytribeam.types", "qualname": "Step.number", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.Step.frequency", "modulename": "pytribeam.types", "qualname": "Step.frequency", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.Step.stage", "modulename": "pytribeam.types", "qualname": "Step.stage", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": pytribeam.types.StageSettings"}, {"fullname": "pytribeam.types.Step.operation_settings", "modulename": "pytribeam.types", "qualname": "Step.operation_settings", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": Union[pytribeam.types.CustomSettings, pytribeam.types.EBSDSettings, pytribeam.types.EDSSettings, pytribeam.types.ImageSettings, pytribeam.types.FIBSettings, pytribeam.types.LaserSettings]"}, {"fullname": "pytribeam.types.ExperimentSettings", "modulename": "pytribeam.types", "qualname": "ExperimentSettings", "kind": "class", "doc": "<p>Experiment settings for the experiment.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>microscope : Microscope\n    The microscope object.\ngeneral_settings : GeneralSettings\n    The general settings for the experiment.\nstep_sequence : List[Step]\n    The sequence of steps for the experiment.\nenable_EBSD : bool\n    Whether to enable EBSD.\nenable_EDS : bool\n    Whether to enable EDS.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.ExperimentSettings.__init__", "modulename": "pytribeam.types", "qualname": "ExperimentSettings.__init__", "kind": "function", "doc": "<p>Create new instance of ExperimentSettings(microscope, general_settings, step_sequence, enable_EBSD, enable_EDS)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">general_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneralSettings</span>,</span><span class=\"param\">\t<span class=\"n\">step_sequence</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Step</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">enable_EBSD</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">enable_EDS</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "pytribeam.types.ExperimentSettings.microscope", "modulename": "pytribeam.types", "qualname": "ExperimentSettings.microscope", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": pytribeam.types.Microscope"}, {"fullname": "pytribeam.types.ExperimentSettings.general_settings", "modulename": "pytribeam.types", "qualname": "ExperimentSettings.general_settings", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": pytribeam.types.GeneralSettings"}, {"fullname": "pytribeam.types.ExperimentSettings.step_sequence", "modulename": "pytribeam.types", "qualname": "ExperimentSettings.step_sequence", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": List[pytribeam.types.Step]"}, {"fullname": "pytribeam.types.ExperimentSettings.enable_EBSD", "modulename": "pytribeam.types", "qualname": "ExperimentSettings.enable_EBSD", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": bool"}, {"fullname": "pytribeam.types.ExperimentSettings.enable_EDS", "modulename": "pytribeam.types", "qualname": "ExperimentSettings.enable_EDS", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": bool"}, {"fullname": "pytribeam.types.YMLFormat", "modulename": "pytribeam.types", "qualname": "YMLFormat", "kind": "class", "doc": "<p>YAML format settings.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>version : float\n    The version of the YAML format.\ngeneral_section_key : str\n    The key for the general section.\nnon_step_section_count : int\n    The number of non-step sections.\ngeneral_exp_settings : dict\n    The general experiment settings.\nstep_count_key : str\n    The key for the step count.\nstep_section_key : str\n    The key for the step section.\nstep_general_settings : dict\n    The general settings for the step.\nstep_general_key : str\n    The key for the general step settings.\nstep_number_key : str\n    The key for the step number.\nstep_frequency_key : str\n    The key for the step frequency.\nstep_type_key : str\n    The key for the step type.\nstep_stage_settings_key : str\n    The key for the step stage settings.\nimage_step_settings : dict\n    The settings for the image step.</p>\n", "bases": "builtins.tuple"}, {"fullname": "pytribeam.types.YMLFormat.__init__", "modulename": "pytribeam.types", "qualname": "YMLFormat.__init__", "kind": "function", "doc": "<p>Create new instance of YMLFormat(version, general_section_key, non_step_section_count, general_exp_settings, step_count_key, step_section_key, step_general_settings, step_general_key, step_number_key, step_frequency_key, step_type_key, step_stage_settings_key, image_step_settings)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">general_section_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">non_step_section_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">general_exp_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_count_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">step_section_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">step_general_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_general_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">step_number_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">step_frequency_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">step_type_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">step_stage_settings_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">image_step_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "pytribeam.types.YMLFormat.version", "modulename": "pytribeam.types", "qualname": "YMLFormat.version", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n", "annotation": ": float"}, {"fullname": "pytribeam.types.YMLFormat.general_section_key", "modulename": "pytribeam.types", "qualname": "YMLFormat.general_section_key", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.YMLFormat.non_step_section_count", "modulename": "pytribeam.types", "qualname": "YMLFormat.non_step_section_count", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n", "annotation": ": int"}, {"fullname": "pytribeam.types.YMLFormat.general_exp_settings", "modulename": "pytribeam.types", "qualname": "YMLFormat.general_exp_settings", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n", "annotation": ": dict"}, {"fullname": "pytribeam.types.YMLFormat.step_count_key", "modulename": "pytribeam.types", "qualname": "YMLFormat.step_count_key", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.YMLFormat.step_section_key", "modulename": "pytribeam.types", "qualname": "YMLFormat.step_section_key", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.YMLFormat.step_general_settings", "modulename": "pytribeam.types", "qualname": "YMLFormat.step_general_settings", "kind": "variable", "doc": "<p>Alias for field number 6</p>\n", "annotation": ": dict"}, {"fullname": "pytribeam.types.YMLFormat.step_general_key", "modulename": "pytribeam.types", "qualname": "YMLFormat.step_general_key", "kind": "variable", "doc": "<p>Alias for field number 7</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.YMLFormat.step_number_key", "modulename": "pytribeam.types", "qualname": "YMLFormat.step_number_key", "kind": "variable", "doc": "<p>Alias for field number 8</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.YMLFormat.step_frequency_key", "modulename": "pytribeam.types", "qualname": "YMLFormat.step_frequency_key", "kind": "variable", "doc": "<p>Alias for field number 9</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.YMLFormat.step_type_key", "modulename": "pytribeam.types", "qualname": "YMLFormat.step_type_key", "kind": "variable", "doc": "<p>Alias for field number 10</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.YMLFormat.step_stage_settings_key", "modulename": "pytribeam.types", "qualname": "YMLFormat.step_stage_settings_key", "kind": "variable", "doc": "<p>Alias for field number 11</p>\n", "annotation": ": str"}, {"fullname": "pytribeam.types.YMLFormat.image_step_settings", "modulename": "pytribeam.types", "qualname": "YMLFormat.image_step_settings", "kind": "variable", "doc": "<p>Alias for field number 12</p>\n", "annotation": ": dict"}, {"fullname": "pytribeam.types.YMLFormatVersion", "modulename": "pytribeam.types", "qualname": "YMLFormatVersion", "kind": "class", "doc": "<p>Enum for YAML format versions.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>V_1_0 : YMLFormat\n    Version 1.0 of the YAML format.</p>\n", "bases": "YMLFormat, enum.Enum"}, {"fullname": "pytribeam.types.YMLFormatVersion.V_1_0", "modulename": "pytribeam.types", "qualname": "YMLFormatVersion.V_1_0", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;YMLFormatVersion.V_1_0: YMLFormat(version=1.0, general_section_key=&#x27;general&#x27;, non_step_section_count=2, general_exp_settings={&#x27;slice_thickness_um&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;max_slice_num&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;pre_tilt_deg&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;sectioning_axis&#x27;: &lt;enum &#x27;SectioningAxis&#x27;&gt;, &#x27;stage_translational_tol_um&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;stage_angular_tol_deg&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;connection_host&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;connection_port&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;EBSD_OEM&#x27;: &lt;enum &#x27;ExternalDeviceOEM&#x27;&gt;, &#x27;EDS_OEMexp_dir&#x27;: &lt;class &#x27;pathlib.Path&#x27;&gt;, &#x27;h5_log_name&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;step_count&#x27;: &lt;class &#x27;int&#x27;&gt;}, step_count_key=&#x27;step_count&#x27;, step_section_key=&#x27;steps&#x27;, step_general_settings={&#x27;step_number&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;step_type&#x27;: &lt;enum &#x27;StepType&#x27;&gt;, &#x27;frequency&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;stage&#x27;: &lt;class &#x27;pytribeam.types.StagePositionUser&#x27;&gt;}, step_general_key=&#x27;step_general&#x27;, step_number_key=&#x27;step_number&#x27;, step_frequency_key=&#x27;frequency&#x27;, step_type_key=&#x27;step_type&#x27;, step_stage_settings_key=&#x27;stage&#x27;, image_step_settings={&#x27;beam_type&#x27;: &lt;enum &#x27;BeamType&#x27;&gt;, &#x27;beam_settings&#x27;: &lt;class &#x27;pytribeam.types.BeamSettings&#x27;&gt;, &#x27;detector&#x27;: &lt;class &#x27;pytribeam.types.Detector&#x27;&gt;, &#x27;scan&#x27;: &lt;class &#x27;pytribeam.types.Scan&#x27;&gt;, &#x27;bit_depth&#x27;: &lt;enum &#x27;ColorDepth&#x27;&gt;, &#x27;tiling_settings&#x27;: &lt;class &#x27;pytribeam.types.ImageTileSettings&#x27;&gt;})&gt;"}, {"fullname": "pytribeam.utilities", "modulename": "pytribeam.utilities", "kind": "module", "doc": "<h1 id=\"utilities-module\">Utilities Module</h1>\n\n<p>This module contains various utility functions and decorators for managing and controlling the microscope, handling YAML files, and performing other common tasks.</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>beam_type(beam) -> property\n    Return the beam property object as ion and electron beams have the same internal hierarchy.</p>\n\n<p>connect_microscope(microscope: tbt.Microscope, quiet_output: bool = True, connection_host: str = None, connection_port: int = None) -> bool\n    Connect to the microscope with the option to suppress printout.</p>\n\n<p>dict_to_yml(db: dict, file_path: Path) -> Path\n    Convert a dictionary to a YAML file.</p>\n\n<p>disconnect_microscope(microscope: tbt.Microscope, quiet_output: bool = True) -> bool\n    Disconnect from the microscope with the option to suppress printout.</p>\n\n<p>general_settings(exp_settings: dict, yml_format: tbt.YMLFormat) -> dict\n    Grab general experiment settings from a .yml file and return them as a dictionary.</p>\n\n<p>step_type(settings: dict, yml_format: tbt.YMLFormat) -> tbt.StepType\n    Determine the step type for a specific step settings dictionary.</p>\n\n<p>in_interval(val: float, limit: tbt.Limit, type: tbt.IntervalType) -> bool\n    Test whether a value is within an interval, with the interval type defined by an enumerated IntervalType.</p>\n\n<p>gen_dict_extract(key, var)\n    Extract values from a nested dictionary by key.</p>\n\n<p>nested_dictionary_location(d: dict, key: str, value: Any) -> List[str]\n    Find the nested location of a key-value pair in a dictionary.</p>\n\n<p>nested_find_key_value_pair(d: dict, key: str, value: Any) -> List[str]\n    Find a key-value pair in a nested dictionary.</p>\n\n<p>_flatten(dictionary: dict) -> dict\n    Flatten a dictionary using pandas.</p>\n\n<p>none_value_dictionary(dictionary: dict) -> bool\n    Check if all values in a dictionary are None.</p>\n\n<p>nostdout()\n    Create a dummy file to suppress output.</p>\n\n<p>step_count(exp_settings: dict, yml_format: tbt.YMLFormatVersion) -> int\n    Determine the maximum step number from a settings dictionary.</p>\n\n<p>step_settings(exp_settings: dict, step_number_key: str, step_number_val: int, yml_format: tbt.YMLFormatVersion) -> Tuple[str, dict]\n    Grab specific step settings from an experimental dictionary and return them as a dictionary along with the user-defined step name.</p>\n\n<p>valid_microscope_connection(host: str, port: str) -> bool\n    Determine if a microscope connection can be made.</p>\n\n<p>enable_external_device(oem: tbt.ExternalDeviceOEM) -> bool\n    Determine whether to enable external device control.</p>\n\n<p>valid_enum_entry(obj: Any, check_type: Enum) -> bool\n    Determine if an object is a member of an Enum class.</p>\n\n<p>yml_format(version: float) -> tbt.YMLFormatVersion\n    Return the YML file format for a given version.</p>\n\n<p>yml_to_dict(*, yml_path_file: Path, version: float, required_keys: Tuple[str, ...]) -> Dict\n    Convert a YAML file to a dictionary.</p>\n\n<p>yml_version(file: Path, key_name=\"config_file_version\") -> float\n    Return the version of a YAML file if the proper key exists.</p>\n\n<p>yes_no(question) -> bool\n    Simple Yes/No function.</p>\n\n<p>remove_directory(directory: Path)\n    Recursively remove a directory.</p>\n\n<p>split_list(data: List, chunk_size: int) -> List\n    Split a list into equal-sized chunks.</p>\n\n<p>tabular_list(data: List, num_columns: int = Constants.default_column_count, column_width: int = Constants.default_column_width) -> str\n    Format a list into a tabular string.</p>\n\n<h2 id=\"decorators\">Decorators</h2>\n\n<p>hardware_movement(func)\n    Decorator to run a function only when hardware testing is enabled.</p>\n\n<p>run_on_standalone_machine(func)\n    Decorator to run a function only on a standalone machine.</p>\n\n<p>run_on_microscope_machine(func)\n    Decorator to run a function only on a microscope machine.</p>\n"}, {"fullname": "pytribeam.utilities.beam_type", "modulename": "pytribeam.utilities", "qualname": "beam_type", "kind": "function", "doc": "<p>Return the beam property object as ion and electron beams have the same internal hierarchy.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>beam : Any\n    The beam object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>property\n    The beam property object.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the beam type is not implemented.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">beam</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">property</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.connect_microscope", "modulename": "pytribeam.utilities", "qualname": "connect_microscope", "kind": "function", "doc": "<p>Connect to the microscope with the option to suppress printout.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to connect.\nquiet_output : bool, optional\n    Whether to suppress printout (default is True).\nconnection_host : str, optional\n    The connection host (default is None).\nconnection_port : int, optional\n    The connection port (default is None).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the connection is successful.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ConnectionError\n    If the connection fails.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>,</span><span class=\"param\">\t<span class=\"n\">quiet_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">connection_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">connection_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.dict_to_yml", "modulename": "pytribeam.utilities", "qualname": "dict_to_yml", "kind": "function", "doc": "<p>Convert a dictionary to a YAML file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>db : dict\n    The dictionary to convert.\nfile_path : Path\n    The path to save the YAML file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Path\n    The path to the saved YAML file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.disconnect_microscope", "modulename": "pytribeam.utilities", "qualname": "disconnect_microscope", "kind": "function", "doc": "<p>Disconnect from the microscope with the option to suppress printout.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>microscope : tbt.Microscope\n    The microscope object to disconnect.\nquiet_output : bool, optional\n    Whether to suppress printout (default is True).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the disconnection is successful.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ConnectionError\n    If the disconnection fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">microscope</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Microscope</span>, </span><span class=\"param\"><span class=\"n\">quiet_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.general_settings", "modulename": "pytribeam.utilities", "qualname": "general_settings", "kind": "function", "doc": "<p>Grab general experiment settings from a .yml file and return them as a dictionary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>exp_settings : dict\n    The experiment settings dictionary.\nyml_format : tbt.YMLFormat\n    The YAML format version.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    The general experiment settings as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exp_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormat</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.step_type", "modulename": "pytribeam.utilities", "qualname": "step_type", "kind": "function", "doc": "<p>Determine the step type for a specific step settings dictionary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>settings : dict\n    The step settings dictionary.\nyml_format : tbt.YMLFormat\n    The YAML format version.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.StepType\n    The step type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormat</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">StepType</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.in_interval", "modulename": "pytribeam.utilities", "qualname": "in_interval", "kind": "function", "doc": "<p>Test whether a value is within an interval, with the interval type defined by an enumerated IntervalType.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>val : float\n    The input value to be compared against min and max.\nlimit : tbt.Limit\n    The bounds of the interval.\ntype : tbt.IntervalType\n    The type of interval.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if within the interval, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Limit</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">IntervalType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.gen_dict_extract", "modulename": "pytribeam.utilities", "qualname": "gen_dict_extract", "kind": "function", "doc": "<p>Extract values from a nested dictionary by key.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>key : str\n    The key to search for.\nvar : dict\n    The nested dictionary to search.</p>\n\n<h2 id=\"yields\">Yields</h2>\n\n<p>Any\n    The values associated with the specified key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">var</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.nested_dictionary_location", "modulename": "pytribeam.utilities", "qualname": "nested_dictionary_location", "kind": "function", "doc": "<p>Find the nested location of a key-value pair in a dictionary.</p>\n\n<p>This function returns a list of key values from the highest to the lowest level of nested dictionaries.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>d : dict\n    The dictionary to search.\nkey : str\n    The key to search for.\nvalue : Any\n    The value to search for.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>List[str]\n    The nested location of the key-value pair.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If the key-value pair is not found in the dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.nested_find_key_value_pair", "modulename": "pytribeam.utilities", "qualname": "nested_find_key_value_pair", "kind": "function", "doc": "<p>Find a key-value pair in a nested dictionary.</p>\n\n<p>This function returns a list of key values from the highest to the lowest level of nested dictionaries.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>d : dict\n    The dictionary to search.\nkey : str\n    The key to search for.\nvalue : Any\n    The value to search for.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>List[str]\n    The nested location of the key-value pair.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.none_value_dictionary", "modulename": "pytribeam.utilities", "qualname": "none_value_dictionary", "kind": "function", "doc": "<p>Check if all values in a dictionary are None.</p>\n\n<p>This function returns True if all values in the dictionary are None, and False otherwise.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dictionary : dict\n    The dictionary to check.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if all values in the dictionary are None, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dictionary</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.nostdout", "modulename": "pytribeam.utilities", "qualname": "nostdout", "kind": "function", "doc": "<p>Create a dummy file to suppress output.</p>\n\n<p>This function creates a dummy file to suppress output.</p>\n\n<h2 id=\"yields\">Yields</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.step_count", "modulename": "pytribeam.utilities", "qualname": "step_count", "kind": "function", "doc": "<p>Determine the maximum step number from a settings dictionary.</p>\n\n<p>This function determines the maximum step number from a settings dictionary, as specified by the step_number_key.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>exp_settings : dict\n    The experiment settings dictionary.\nyml_format : tbt.YMLFormatVersion\n    The YAML format version.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>int\n    The maximum step number.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the number of steps found does not match the expected step count.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exp_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.step_settings", "modulename": "pytribeam.utilities", "qualname": "step_settings", "kind": "function", "doc": "<p>Grab specific step settings from an experimental dictionary and return them as a dictionary along with the user-defined step name.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>exp_settings : dict\n    The experiment settings dictionary.\nstep_number_key : str\n    The key for the step number.\nstep_number_val : int\n    The value for the step number.\nyml_format : tbt.YMLFormatVersion\n    The YAML format version.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Tuple[str, dict]\n    The step name and the step settings dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exp_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">step_number_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">step_number_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">yml_format</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.valid_microscope_connection", "modulename": "pytribeam.utilities", "qualname": "valid_microscope_connection", "kind": "function", "doc": "<p>Determine if a microscope connection can be made.</p>\n\n<p>This function checks if a microscope connection can be made and disconnects if a connection can be made.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>host : str\n    The connection host.\nport : str\n    The connection port.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the connection can be made, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.enable_external_device", "modulename": "pytribeam.utilities", "qualname": "enable_external_device", "kind": "function", "doc": "<p>Determine whether to enable external device control.</p>\n\n<p>This function checks if the external device control should be enabled based on the OEM.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>oem : tbt.ExternalDeviceOEM\n    The OEM of the external device.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the external device control should be enabled, False otherwise.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the OEM type is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">oem</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ExternalDeviceOEM</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.valid_enum_entry", "modulename": "pytribeam.utilities", "qualname": "valid_enum_entry", "kind": "function", "doc": "<p>Determine if an object is a member of an Enum class.</p>\n\n<p>This function checks if an object is a member of an Enum class.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>obj : Any\n    The object to check.\ncheck_type : Enum\n    The Enum class to check against.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the object is a member of the Enum class, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">check_type</span><span class=\"p\">:</span> <span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.yml_format", "modulename": "pytribeam.utilities", "qualname": "yml_format", "kind": "function", "doc": "<p>Return the YML file format for a given version.</p>\n\n<p>This function returns the YML file format for a given version.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>version : float\n    The version of the YML file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.YMLFormatVersion\n    The YML file format for the given version.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If the YML file version is unsupported.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">YMLFormatVersion</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.yml_to_dict", "modulename": "pytribeam.utilities", "qualname": "yml_to_dict", "kind": "function", "doc": "<p>Convert a YAML file to a dictionary.</p>\n\n<p>This function reads a YAML file and returns the result as a dictionary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>yml_path_file : Path\n    The fully pathed location to the input file.\nversion : float\n    The version of the YAML file in x.y format.\nrequired_keys : Tuple[str, ...]\n    The key(s) that must be in the YAML file for conversion to a dictionary to occur.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    The YAML file represented as a dictionary.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>TypeError\n    If the file type is unsupported.\nOSError\n    If the YAML file cannot be opened or decoded.\nKeyError\n    If the required keys are not found in the YAML file.\nValueError\n    If the version specified in the file does not match the requested version.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">yml_path_file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">required_keys</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.yml_version", "modulename": "pytribeam.utilities", "qualname": "yml_version", "kind": "function", "doc": "<p>Return the version of a YAML file if the proper key exists.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>file : Path\n    The path to the YAML file.\nkey_name : str, optional\n    The key name for the version in the YAML file (default is \"config_file_version\").</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    The version of the YAML file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If the version key is not found in the YAML file.\nValueError\n    If the version value is not a valid float.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">key_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;config_file_version&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.yes_no", "modulename": "pytribeam.utilities", "qualname": "yes_no", "kind": "function", "doc": "<p>Simple Yes/No function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>question : str\n    The question to ask the user.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the user answers \"yes\", False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">question</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.remove_directory", "modulename": "pytribeam.utilities", "qualname": "remove_directory", "kind": "function", "doc": "<p>Recursively remove a directory.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>directory : Path\n    The path to the directory to remove.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.split_list", "modulename": "pytribeam.utilities", "qualname": "split_list", "kind": "function", "doc": "<p>Split a list into equal-sized chunks.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data : List\n    The list to split.\nchunk_size : int\n    The size of each chunk.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>List\n    A list of chunks.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">List</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.tabular_list", "modulename": "pytribeam.utilities", "qualname": "tabular_list", "kind": "function", "doc": "<p>Format a list into a tabular string.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data : List\n    The list to format.\nnum_columns : int, optional\n    The number of columns in the table (default is Constants.default_column_count).\ncolumn_width : int, optional\n    The width of each column in the table (default is Constants.default_column_width).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>str\n    The formatted tabular string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">List</span>, </span><span class=\"param\"><span class=\"n\">num_columns</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">column_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.hardware_movement", "modulename": "pytribeam.utilities", "qualname": "hardware_movement", "kind": "function", "doc": "<p>Decorator to run a function only when hardware testing is enabled.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func : function\n    The function to decorate.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>function\n    The decorated function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.run_on_standalone_machine", "modulename": "pytribeam.utilities", "qualname": "run_on_standalone_machine", "kind": "function", "doc": "<p>Decorator to run a function only on a standalone machine.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func : function\n    The function to decorate.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>function\n    The decorated function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.utilities.run_on_microscope_machine", "modulename": "pytribeam.utilities", "qualname": "run_on_microscope_machine", "kind": "function", "doc": "<p>Decorator to run a function only on a microscope machine.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func : function\n    The function to decorate.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>function\n    The decorated function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.workflow", "modulename": "pytribeam.workflow", "kind": "module", "doc": "<h1 id=\"workflow-module\">Workflow Module</h1>\n\n<p>This module contains functions for managing and executing the workflow of an experiment, including performing operations, setting up the experiment, and running the main experiment loop.</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<p>perform_operation(step_settings, step: tbt.Step, general_settings: tbt.GeneralSettings, slice_number: int) -> bool\n    Perform the operation for the specified step settings.</p>\n\n<p>perform_operation(step_settings: tbt.ImageSettings, step: tbt.Step, general_settings: tbt.GeneralSettings, slice_number: int) -> bool\n    Perform the image operation for the specified step settings.</p>\n\n<p>perform_operation(step_settings: tbt.FIBSettings, step: tbt.Step, general_settings: tbt.GeneralSettings, slice_number: int) -> bool\n    Perform the FIB operation for the specified step settings.</p>\n\n<p>perform_operation(step_settings: tbt.CustomSettings, step: tbt.Step, general_settings: tbt.GeneralSettings, slice_number: int) -> bool\n    Perform the custom operation for the specified step settings.</p>\n\n<p>perform_operation(step_settings: tbt.EBSDSettings, step: tbt.Step, general_settings: tbt.GeneralSettings, slice_number: int) -> bool\n    Perform the EBSD operation for the specified step settings.</p>\n\n<p>perform_operation(step_settings: tbt.EDSSettings, step: tbt.Step, general_settings: tbt.GeneralSettings, slice_number: int) -> bool\n    Perform the EDS operation for the specified step settings.</p>\n\n<p>perform_operation(step_settings: tbt.LaserSettings, step: tbt.Step, general_settings: tbt.GeneralSettings, slice_number: int) -> bool\n    Perform the laser operation for the specified step settings.</p>\n\n<p>ebsd_eds_conflict_free(step_sequence: List[tbt.Step]) -> bool\n    Check if the step sequence is free of EBSD and EDS conflicts.</p>\n\n<p>pre_flight_check(yml_path: Path) -> tbt.ExperimentSettings\n    Perform a pre-flight check for the experiment.</p>\n\n<p>setup_experiment(yml_path: Path) -> tbt.ExperimentSettings\n    Set up the experiment based on the YAML configuration.</p>\n\n<p>perform_step(slice_number: int, step_number: int, experiment_settings: tbt.ExperimentSettings) -> bool\n    Perform a step in the experiment.</p>\n\n<p>run_experiment_cli(start_slice: int, start_step: int, yml_path: Path)\n    Main loop for the experiment, accessed through the command line.</p>\n"}, {"fullname": "pytribeam.workflow.perform_operation", "modulename": "pytribeam.workflow", "qualname": "perform_operation", "kind": "function", "doc": "<p>Perform the operation for the specified step settings.</p>\n\n<p>This function performs the operation for the specified step settings, including validation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>step_settings : Any\n    The step settings for the operation.\nstep : tbt.Step\n    The step object containing the operation settings.\ngeneral_settings : tbt.GeneralSettings\n    The general settings object.\nslice_number : int\n    The slice number for the operation.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the operation is performed successfully.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    If no handler is available for the provided step settings type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">step_settings</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Step</span>,</span><span class=\"param\">\t<span class=\"n\">general_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">GeneralSettings</span>,</span><span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.workflow.ebsd_eds_conflict_free", "modulename": "pytribeam.workflow", "qualname": "ebsd_eds_conflict_free", "kind": "function", "doc": "<p>Check if the step sequence is free of EBSD and EDS conflicts.</p>\n\n<p>This function checks if the step sequence is free of EBSD and EDS conflicts.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>step_sequence : List[tbt.Step]\n    The step sequence to check.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the step sequence is free of EBSD and EDS conflicts.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If an EBSD or EDS conflict is found in the step sequence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">step_sequence</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Step</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.workflow.pre_flight_check", "modulename": "pytribeam.workflow", "qualname": "pre_flight_check", "kind": "function", "doc": "<p>Perform a pre-flight check for the experiment.</p>\n\n<p>This function performs a pre-flight check for the experiment by validating the YAML configuration, connecting to the microscope, and validating the step sequence.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>yml_path : Path\n    The path to the YAML configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.ExperimentSettings\n    The validated experiment settings.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>SystemError\n    If there are issues with the EBSD or EDS camera, or if the laser control is not enabled.\nValueError\n    If the step sequence is not parsed correctly or if there are EBSD/EDS conflicts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">yml_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ExperimentSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.workflow.setup_experiment", "modulename": "pytribeam.workflow", "qualname": "setup_experiment", "kind": "function", "doc": "<p>Set up the experiment based on the YAML configuration.</p>\n\n<p>This function sets up the experiment by validating the YAML configuration, creating the log file, linking the stage, and retracting all devices.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>yml_path : Path\n    The path to the YAML configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tbt.ExperimentSettings\n    The experiment settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">yml_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ExperimentSettings</span>:</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.workflow.perform_step", "modulename": "pytribeam.workflow", "qualname": "perform_step", "kind": "function", "doc": "<p>Perform a step in the experiment.</p>\n\n<p>This function performs a step in the experiment based on the slice number, step number, and experiment settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>slice_number : int\n    The slice number for the step.\nstep_number : int\n    The step number for the experiment.\nexperiment_settings : tbt.ExperimentSettings\n    The experiment settings.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if the step is performed successfully.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slice_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">step_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">experiment_settings</span><span class=\"p\">:</span> <span class=\"n\">pytribeam</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ExperimentSettings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pytribeam.workflow.run_experiment_cli", "modulename": "pytribeam.workflow", "qualname": "run_experiment_cli", "kind": "function", "doc": "<p>Main loop for the experiment, accessed through the command line.</p>\n\n<p>This function runs the main loop for the experiment based on the specified start slice, start step, and YAML configuration file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>start_slice : int\n    The starting slice number for the experiment.\nstart_step : int\n    The starting step number for the experiment.\nyml_path : Path\n    The path to the YAML configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_slice</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">yml_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();